
set_FREE_RTOS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800a578  0800a578  0001a578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c8  0800a8c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c8  0800a8c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d0  0800a8d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002070  200001e0  0800aab8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002250  0800aab8  00022250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022704  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c52  00000000  00000000  00042914  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  00046568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001888  00000000  00000000  00047fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004d36  00000000  00000000  00049830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015cc8  00000000  00000000  0004e566  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115c6a  00000000  00000000  0006422e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179e98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007938  00000000  00000000  00179f14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a55c 	.word	0x0800a55c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800a55c 	.word	0x0800a55c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <usDelay>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "hcSensor.h"

void usDelay(uint32_t uSec)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d801      	bhi.n	8000f8a <usDelay+0x12>
 8000f86:	2302      	movs	r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1;
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <usDelay+0x70>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <usDelay+0x70>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
	usTIM->SR %= ~1;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <usDelay+0x70>)
 8000f9a:	6919      	ldr	r1, [r3, #16]
 8000f9c:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <usDelay+0x70>)
 8000f9e:	f111 0f02 	cmn.w	r1, #2
 8000fa2:	bf2c      	ite	cs
 8000fa4:	2201      	movcs	r2, #1
 8000fa6:	2200      	movcc	r2, #0
 8000fa8:	4613      	mov	r3, r2
 8000faa:	07db      	lsls	r3, r3, #31
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	1aca      	subs	r2, r1, r3
 8000fb2:	6102      	str	r2, [r0, #16]
	usTIM->CR1 |= 1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <usDelay+0x70>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <usDelay+0x70>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8000fc0:	bf00      	nop
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <usDelay+0x70>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d1f9      	bne.n	8000fc2 <usDelay+0x4a>
	usTIM->SR &= ~(0x0001);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <usDelay+0x70>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <usDelay+0x70>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6113      	str	r3, [r2, #16]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	00000000 	.word	0x00000000

08000ff0 <measureDistance>:

float measureDistance()
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	uint32_t numTics = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
	const float speedSound = 0.0343/2;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <measureDistance+0xc0>)
 8000ffc:	60bb      	str	r3, [r7, #8]
	float distance = 0;
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	607b      	str	r3, [r7, #4]


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	482a      	ldr	r0, [pc, #168]	; (80010b4 <measureDistance+0xc4>)
 800100a:	f001 f913 	bl	8002234 <HAL_GPIO_WritePin>
	usDelay(3);
 800100e:	2003      	movs	r0, #3
 8001010:	f7ff ffb2 	bl	8000f78 <usDelay>

	//TRIG
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2108      	movs	r1, #8
 8001018:	4826      	ldr	r0, [pc, #152]	; (80010b4 <measureDistance+0xc4>)
 800101a:	f001 f90b 	bl	8002234 <HAL_GPIO_WritePin>
	usDelay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff ffaa 	bl	8000f78 <usDelay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2108      	movs	r1, #8
 8001028:	4822      	ldr	r0, [pc, #136]	; (80010b4 <measureDistance+0xc4>)
 800102a:	f001 f903 	bl	8002234 <HAL_GPIO_WritePin>

	//START MEASURE
	while(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5)==GPIO_PIN_SET)
 800102e:	e005      	b.n	800103c <measureDistance+0x4c>
	{
		numTics++;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
		usDelay(2);
 8001036:	2002      	movs	r0, #2
 8001038:	f7ff ff9e 	bl	8000f78 <usDelay>
	while(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5)==GPIO_PIN_SET)
 800103c:	2120      	movs	r1, #32
 800103e:	481d      	ldr	r0, [pc, #116]	; (80010b4 <measureDistance+0xc4>)
 8001040:	f001 f8e0 	bl	8002204 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d0f2      	beq.n	8001030 <measureDistance+0x40>
	};

	distance = (numTics + 0.0f)*2.8*speedSound;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001054:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80010b8 <measureDistance+0xc8>
 8001058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800105c:	ee17 0a90 	vmov	r0, s15
 8001060:	f7ff fa8a 	bl	8000578 <__aeabi_f2d>
 8001064:	a310      	add	r3, pc, #64	; (adr r3, 80010a8 <measureDistance+0xb8>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff fadd 	bl	8000628 <__aeabi_dmul>
 800106e:	4603      	mov	r3, r0
 8001070:	460c      	mov	r4, r1
 8001072:	4625      	mov	r5, r4
 8001074:	461c      	mov	r4, r3
 8001076:	68b8      	ldr	r0, [r7, #8]
 8001078:	f7ff fa7e 	bl	8000578 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff fad0 	bl	8000628 <__aeabi_dmul>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fda2 	bl	8000bd8 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	607b      	str	r3, [r7, #4]

  return distance;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ee07 3a90 	vmov	s15, r3
}
 800109e:	eeb0 0a67 	vmov.f32	s0, s15
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	66666666 	.word	0x66666666
 80010ac:	40066666 	.word	0x40066666
 80010b0:	3c8c7e28 	.word	0x3c8c7e28
 80010b4:	48001400 	.word	0x48001400
 80010b8:	00000000 	.word	0x00000000

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c0:	f000 fdd1 	bl	8001c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c4:	f000 f82e 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c8:	f000 fa16 	bl	80014f8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010cc:	f000 f8b4 	bl	8001238 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80010d0:	f000 f94e 	bl	8001370 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d4:	f000 f9e6 	bl	80014a4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80010d8:	f000 f996 	bl	8001408 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 f8fc 	bl	80012d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010e0:	f004 fc92 	bl	8005a08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80010e4:	4a09      	ldr	r2, [pc, #36]	; (800110c <main+0x50>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <main+0x54>)
 80010ea:	f004 fcf7 	bl	8005adc <osThreadNew>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <main+0x58>)
 80010f2:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 80010f4:	4a08      	ldr	r2, [pc, #32]	; (8001118 <main+0x5c>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <main+0x60>)
 80010fa:	f004 fcef 	bl	8005adc <osThreadNew>
 80010fe:	4602      	mov	r2, r0
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <main+0x64>)
 8001102:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001104:	f004 fcb4 	bl	8005a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001108:	e7fe      	b.n	8001108 <main+0x4c>
 800110a:	bf00      	nop
 800110c:	0800a5c4 	.word	0x0800a5c4
 8001110:	0800169d 	.word	0x0800169d
 8001114:	20002150 	.word	0x20002150
 8001118:	0800a5e8 	.word	0x0800a5e8
 800111c:	0800173d 	.word	0x0800173d
 8001120:	200021b8 	.word	0x200021b8

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0bc      	sub	sp, #240	; 0xf0
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800112e:	2244      	movs	r2, #68	; 0x44
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f007 f9d7 	bl	80084e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2294      	movs	r2, #148	; 0x94
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f007 f9c9 	bl	80084e6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001154:	2000      	movs	r0, #0
 8001156:	f001 fa07 	bl	8002568 <HAL_PWREx_ControlVoltageScaling>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001160:	f000 fb0e 	bl	8001780 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800116a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800116e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001178:	2303      	movs	r3, #3
 800117a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001184:	231e      	movs	r3, #30
 8001186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 faa5 	bl	80026f0 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011ac:	f000 fae8 	bl	8001780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011d4:	2105      	movs	r1, #5
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 feb0 	bl	8002f3c <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e2:	f000 facd 	bl	8001780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80011e6:	f242 0326 	movw	r3, #8230	; 0x2026
 80011ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011fc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80011fe:	2303      	movs	r3, #3
 8001200:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001206:	230c      	movs	r3, #12
 8001208:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001216:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f002 f96e 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800122a:	f000 faa9 	bl	8001780 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	37f0      	adds	r7, #240	; 0xf0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <MX_LPUART1_UART_Init+0x94>)
 8001240:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001244:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <MX_LPUART1_UART_Init+0x98>)
 8001246:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 800124a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800124e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001282:	f003 fae7 	bl	8004854 <HAL_UART_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800128c:	f000 fa78 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001290:	2100      	movs	r1, #0
 8001292:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 8001294:	f004 f83b 	bl	800530e <HAL_UARTEx_SetTxFifoThreshold>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800129e:	f000 fa6f 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <MX_LPUART1_UART_Init+0x90>)
 80012a6:	f004 f870 	bl	800538a <HAL_UARTEx_SetRxFifoThreshold>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b0:	f000 fa66 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_LPUART1_UART_Init+0x9c>)
 80012b6:	f003 fff1 	bl	800529c <HAL_UARTEx_DisableFifoMode>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 fa5e 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20001fac 	.word	0x20001fac
 80012cc:	40008000 	.word	0x40008000
 80012d0:	00033324 	.word	0x00033324
 80012d4:	20002038 	.word	0x20002038

080012d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_USART2_UART_Init+0x90>)
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <MX_USART2_UART_Init+0x94>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_USART2_UART_Init+0x90>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_USART2_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_USART2_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_USART2_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_USART2_UART_Init+0x90>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_USART2_UART_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_USART2_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001322:	f003 fa97 	bl	8004854 <HAL_UART_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800132c:	f000 fa28 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001334:	f003 ffeb 	bl	800530e <HAL_UARTEx_SetTxFifoThreshold>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800133e:	f000 fa1f 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001346:	f004 f820 	bl	800538a <HAL_UARTEx_SetRxFifoThreshold>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001350:	f000 fa16 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_USART2_UART_Init+0x90>)
 8001356:	f003 ffa1 	bl	800529c <HAL_UARTEx_DisableFifoMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 fa0e 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200020c4 	.word	0x200020c4
 800136c:	40004400 	.word	0x40004400

08001370 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_USART3_UART_Init+0x90>)
 8001376:	4a23      	ldr	r2, [pc, #140]	; (8001404 <MX_USART3_UART_Init+0x94>)
 8001378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_USART3_UART_Init+0x90>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_USART3_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_USART3_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_USART3_UART_Init+0x90>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013ba:	f003 fa4b 	bl	8004854 <HAL_UART_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013c4:	f000 f9dc 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c8:	2100      	movs	r1, #0
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013cc:	f003 ff9f 	bl	800530e <HAL_UARTEx_SetTxFifoThreshold>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013d6:	f000 f9d3 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013da:	2100      	movs	r1, #0
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013de:	f003 ffd4 	bl	800538a <HAL_UARTEx_SetRxFifoThreshold>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013e8:	f000 f9ca 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_USART3_UART_Init+0x90>)
 80013ee:	f003 ff55 	bl	800529c <HAL_UARTEx_DisableFifoMode>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013f8:	f000 f9c2 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20001b18 	.word	0x20001b18
 8001404:	40004800 	.word	0x40004800

08001408 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_TIM4_Init+0x94>)
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <MX_TIM4_Init+0x98>)
 800142a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 120-1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_TIM4_Init+0x94>)
 800142e:	2277      	movs	r2, #119	; 0x77
 8001430:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_TIM4_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_TIM4_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_TIM4_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_TIM4_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_TIM4_Init+0x94>)
 800144c:	f002 fd60 	bl	8003f10 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001456:	f000 f993 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_TIM4_Init+0x94>)
 8001468:	f002 ff39 	bl	80042de <HAL_TIM_ConfigClockSource>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001472:	f000 f985 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <MX_TIM4_Init+0x94>)
 8001484:	f003 f940 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800148e:	f000 f977 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20001acc 	.word	0x20001acc
 80014a0:	40000800 	.word	0x40000800

080014a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014b2:	2206      	movs	r2, #6
 80014b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014b8:	2202      	movs	r2, #2
 80014ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014be:	2201      	movs	r2, #1
 80014c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014dc:	2201      	movs	r2, #1
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014e2:	f000 fed9 	bl	8002298 <HAL_PCD_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 f948 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20001ba4 	.word	0x20001ba4

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <MX_GPIO_Init+0x18c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b57      	ldr	r3, [pc, #348]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <MX_GPIO_Init+0x18c>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b54      	ldr	r3, [pc, #336]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a50      	ldr	r2, [pc, #320]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <MX_GPIO_Init+0x18c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <MX_GPIO_Init+0x18c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a44      	ldr	r2, [pc, #272]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b42      	ldr	r3, [pc, #264]	; (8001684 <MX_GPIO_Init+0x18c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <MX_GPIO_Init+0x18c>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <MX_GPIO_Init+0x18c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <MX_GPIO_Init+0x18c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a38      	ldr	r2, [pc, #224]	; (8001684 <MX_GPIO_Init+0x18c>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <MX_GPIO_Init+0x18c>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80015b6:	f001 f88b 	bl	80026d0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2108      	movs	r1, #8
 80015be:	4832      	ldr	r0, [pc, #200]	; (8001688 <MX_GPIO_Init+0x190>)
 80015c0:	f000 fe38 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80015ca:	4830      	ldr	r0, [pc, #192]	; (800168c <MX_GPIO_Init+0x194>)
 80015cc:	f000 fe32 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2120      	movs	r1, #32
 80015d4:	482e      	ldr	r0, [pc, #184]	; (8001690 <MX_GPIO_Init+0x198>)
 80015d6:	f000 fe2d 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <MX_GPIO_Init+0x19c>)
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	482a      	ldr	r0, [pc, #168]	; (8001698 <MX_GPIO_Init+0x1a0>)
 80015f0:	f000 fc76 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 80015f4:	2308      	movs	r3, #8
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	481f      	ldr	r0, [pc, #124]	; (8001688 <MX_GPIO_Init+0x190>)
 800160c:	f000 fc68 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo1_Pin */
  GPIO_InitStruct.Pin = Echo1_Pin;
 8001610:	2320      	movs	r3, #32
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4819      	ldr	r0, [pc, #100]	; (8001688 <MX_GPIO_Init+0x190>)
 8001624:	f000 fc5c 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001628:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4812      	ldr	r0, [pc, #72]	; (800168c <MX_GPIO_Init+0x194>)
 8001642:	f000 fc4d 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001646:	2320      	movs	r3, #32
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_GPIO_Init+0x198>)
 800165e:	f000 fc3f 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001662:	2340      	movs	r3, #64	; 0x40
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_GPIO_Init+0x198>)
 8001676:	f000 fc33 	bl	8001ee0 <HAL_GPIO_Init>

}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	48001400 	.word	0x48001400
 800168c:	48000400 	.word	0x48000400
 8001690:	48001800 	.word	0x48001800
 8001694:	10110000 	.word	0x10110000
 8001698:	48000800 	.word	0x48000800

0800169c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80016a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a8:	481d      	ldr	r0, [pc, #116]	; (8001720 <StartBlink01+0x84>)
 80016aa:	f000 fdab 	bl	8002204 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02f      	beq.n	8001714 <StartBlink01+0x78>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b8:	481a      	ldr	r0, [pc, #104]	; (8001724 <StartBlink01+0x88>)
 80016ba:	f000 fdd3 	bl	8002264 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2108      	movs	r1, #8
 80016c2:	4819      	ldr	r0, [pc, #100]	; (8001728 <StartBlink01+0x8c>)
 80016c4:	f000 fdb6 	bl	8002234 <HAL_GPIO_WritePin>
		  osDelay(200);
 80016c8:	20c8      	movs	r0, #200	; 0xc8
 80016ca:	f004 faad 	bl	8005c28 <osDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2108      	movs	r1, #8
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <StartBlink01+0x8c>)
 80016d4:	f000 fdae 	bl	8002234 <HAL_GPIO_WritePin>

		  distance = measureDistance();
 80016d8:	f7ff fc8a 	bl	8000ff0 <measureDistance>
 80016dc:	eef0 7a40 	vmov.f32	s15, s0
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <StartBlink01+0x90>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
		  sprintf(uartBuffer, "Distance = %.1f\r\n", distance);
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <StartBlink01+0x90>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff44 	bl	8000578 <__aeabi_f2d>
 80016f0:	4603      	mov	r3, r0
 80016f2:	460c      	mov	r4, r1
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	490d      	ldr	r1, [pc, #52]	; (8001730 <StartBlink01+0x94>)
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <StartBlink01+0x98>)
 80016fc:	f007 fb58 	bl	8008db0 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuffer, strlen(uartBuffer), 100);
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <StartBlink01+0x98>)
 8001702:	f7fe fd7d 	bl	8000200 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	4909      	ldr	r1, [pc, #36]	; (8001734 <StartBlink01+0x98>)
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <StartBlink01+0x9c>)
 8001710:	f003 f8f0 	bl	80048f4 <HAL_UART_Transmit>
	  }

    osDelay(2000);
 8001714:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001718:	f004 fa86 	bl	8005c28 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800171c:	e7c2      	b.n	80016a4 <StartBlink01+0x8>
 800171e:	bf00      	nop
 8001720:	48000800 	.word	0x48000800
 8001724:	48000400 	.word	0x48000400
 8001728:	48001400 	.word	0x48001400
 800172c:	200001fc 	.word	0x200001fc
 8001730:	0800a588 	.word	0x0800a588
 8001734:	20002154 	.word	0x20002154
 8001738:	200020c4 	.word	0x200020c4

0800173c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <StartBlink02+0x1c>)
 8001748:	f000 fd8c 	bl	8002264 <HAL_GPIO_TogglePin>
    osDelay(500);
 800174c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001750:	f004 fa6a 	bl	8005c28 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001754:	e7f6      	b.n	8001744 <StartBlink02+0x8>
 8001756:	bf00      	nop
 8001758:	48000400 	.word	0x48000400

0800175c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800176e:	f000 fa93 	bl	8001c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40001000 	.word	0x40001000

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6613      	str	r3, [r2, #96]	; 0x60
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x44>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x44>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	; 0x38
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a47      	ldr	r2, [pc, #284]	; (8001914 <HAL_UART_MspInit+0x13c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12b      	bne.n	8001852 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_UART_MspInit+0x140>)
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	4a46      	ldr	r2, [pc, #280]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a40      	ldr	r2, [pc, #256]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 800182a:	f000 ff51 	bl	80026d0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800182e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001840:	2308      	movs	r3, #8
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	4834      	ldr	r0, [pc, #208]	; (800191c <HAL_UART_MspInit+0x144>)
 800184c:	f000 fb48 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001850:	e05c      	b.n	800190c <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_UART_MspInit+0x148>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d129      	bne.n	80018b0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800185c:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_UART_MspInit+0x140>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001866:	6593      	str	r3, [r2, #88]	; 0x58
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_UART_MspInit+0x140>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_UART_MspInit+0x140>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_UART_MspInit+0x140>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800188c:	230c      	movs	r3, #12
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189c:	2307      	movs	r3, #7
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f000 fb19 	bl	8001ee0 <HAL_GPIO_Init>
}
 80018ae:	e02d      	b.n	800190c <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_UART_MspInit+0x14c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d128      	bne.n	800190c <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_UART_MspInit+0x140>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	4a16      	ldr	r2, [pc, #88]	; (8001918 <HAL_UART_MspInit+0x140>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6593      	str	r3, [r2, #88]	; 0x58
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_UART_MspInit+0x140>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x140>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_UART_MspInit+0x140>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_MspInit+0x140>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018fc:	2307      	movs	r3, #7
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	4808      	ldr	r0, [pc, #32]	; (8001928 <HAL_UART_MspInit+0x150>)
 8001908:	f000 faea 	bl	8001ee0 <HAL_GPIO_Init>
}
 800190c:	bf00      	nop
 800190e:	3738      	adds	r7, #56	; 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40008000 	.word	0x40008000
 8001918:	40021000 	.word	0x40021000
 800191c:	48001800 	.word	0x48001800
 8001920:	40004400 	.word	0x40004400
 8001924:	40004800 	.word	0x40004800
 8001928:	48000c00 	.word	0x48000c00

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_TIM_Base_MspInit+0x38>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_TIM_Base_MspInit+0x3c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x3c>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40000800 	.word	0x40000800
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198c:	d154      	bne.n	8001a38 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a2b      	ldr	r2, [pc, #172]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019a6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019b8:	230a      	movs	r3, #10
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f000 fa8b 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f000 fa7d 	bl	8001ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 80019ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d114      	bne.n	8001a34 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001a22:	f000 fe45 	bl	80026b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <HAL_PCD_MspInit+0xd4>)
 8001a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a32:	e001      	b.n	8001a38 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001a34:	f000 fe3c 	bl	80026b0 <HAL_PWREx_EnableVddUSB>
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f000 fa17 	bl	8001e8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a5e:	2036      	movs	r0, #54	; 0x36
 8001a60:	f000 fa30 	bl	8001ec4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <HAL_InitTick+0xa0>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_InitTick+0xa0>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_InitTick+0xa0>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a7c:	f107 0210 	add.w	r2, r7, #16
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 fc46 	bl	8003318 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a8c:	f001 fc18 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_InitTick+0xa4>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_InitTick+0xa8>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_InitTick+0xac>)
 8001aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_InitTick+0xa8>)
 8001aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_InitTick+0xa8>)
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_InitTick+0xa8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_InitTick+0xa8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_InitTick+0xa8>)
 8001ac6:	f002 fa23 	bl	8003f10 <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <HAL_InitTick+0xa8>)
 8001ad2:	f002 fa75 	bl	8003fc0 <HAL_TIM_Base_Start_IT>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	200021bc 	.word	0x200021bc
 8001af0:	40001000 	.word	0x40001000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <TIM6_DAC_IRQHandler+0x10>)
 8001b2e:	f002 fab7 	bl	80040a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200021bc 	.word	0x200021bc

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f006 fc86 	bl	800847c <__errno>
 8001b70:	4602      	mov	r2, r0
 8001b72:	230c      	movs	r3, #12
 8001b74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200a0000 	.word	0x200a0000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000200 	.word	0x20000200
 8001ba4:	20002250 	.word	0x20002250

08001ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <SystemInit+0x64>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <SystemInit+0x64>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <SystemInit+0x68>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <SystemInit+0x68>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <SystemInit+0x68>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <SystemInit+0x68>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <SystemInit+0x68>)
 8001bd4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <SystemInit+0x68>)
 8001be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <SystemInit+0x68>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <SystemInit+0x68>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <SystemInit+0x68>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SystemInit+0x64>)
 8001bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	40021000 	.word	0x40021000

08001c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c18:	f7ff ffc6 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c1e:	e003      	b.n	8001c28 <LoopCopyDataInit>

08001c20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c26:	3104      	adds	r1, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c28:	480a      	ldr	r0, [pc, #40]	; (8001c54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c30:	d3f6      	bcc.n	8001c20 <CopyDataInit>
	ldr	r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c34:	e002      	b.n	8001c3c <LoopFillZerobss>

08001c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c38:	f842 3b04 	str.w	r3, [r2], #4

08001c3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <LoopForever+0x16>)
	cmp	r2, r3
 8001c3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c40:	d3f9      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c42:	f006 fc21 	bl	8008488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c46:	f7ff fa39 	bl	80010bc <main>

08001c4a <LoopForever>:

LoopForever:
    b LoopForever
 8001c4a:	e7fe      	b.n	8001c4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c4c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001c50:	0800a8d8 	.word	0x0800a8d8
	ldr	r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c58:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001c5c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001c60:	20002250 	.word	0x20002250

08001c64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC1_IRQHandler>

08001c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f900 	bl	8001e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fee4 	bl	8001a44 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e001      	b.n	8001c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c88:	f7ff fd82 	bl	8001790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20002208 	.word	0x20002208

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20002208 	.word	0x20002208

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_Delay+0x40>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000008 	.word	0x20000008

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <__NVIC_EnableIRQ+0x38>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff4c 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9e:	f7ff ff61 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ea2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	6978      	ldr	r0, [r7, #20]
 8001eaa:	f7ff ffb1 	bl	8001e10 <NVIC_EncodePriority>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff80 	bl	8001dbc <__NVIC_SetPriority>
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff54 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e166      	b.n	80021be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8158 	beq.w	80021b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d00b      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1c:	2b11      	cmp	r3, #17
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 0201 	and.w	r2, r3, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0xea>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80b2 	beq.w	80021b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_GPIO_Init+0x2fc>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_GPIO_Init+0x2fc>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6613      	str	r3, [r2, #96]	; 0x60
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_GPIO_Init+0x2fc>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206c:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_GPIO_Init+0x300>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002096:	d02b      	beq.n	80020f0 <HAL_GPIO_Init+0x210>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_GPIO_Init+0x304>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d025      	beq.n	80020ec <HAL_GPIO_Init+0x20c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_GPIO_Init+0x308>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01f      	beq.n	80020e8 <HAL_GPIO_Init+0x208>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a50      	ldr	r2, [pc, #320]	; (80021ec <HAL_GPIO_Init+0x30c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d019      	beq.n	80020e4 <HAL_GPIO_Init+0x204>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <HAL_GPIO_Init+0x310>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x200>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4e      	ldr	r2, [pc, #312]	; (80021f4 <HAL_GPIO_Init+0x314>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1fc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x318>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1f8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x31c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1f4>
 80020d0:	2307      	movs	r3, #7
 80020d2:	e00e      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020d4:	2308      	movs	r3, #8
 80020d6:	e00c      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020d8:	2306      	movs	r3, #6
 80020da:	e00a      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020dc:	2305      	movs	r3, #5
 80020de:	e008      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020e0:	2304      	movs	r3, #4
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_GPIO_Init+0x300>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_GPIO_Init+0x320>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002134:	4a32      	ldr	r2, [pc, #200]	; (8002200 <HAL_GPIO_Init+0x320>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_GPIO_Init+0x320>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800215e:	4a28      	ldr	r2, [pc, #160]	; (8002200 <HAL_GPIO_Init+0x320>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_GPIO_Init+0x320>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_GPIO_Init+0x320>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_GPIO_Init+0x320>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021b2:	4a13      	ldr	r2, [pc, #76]	; (8002200 <HAL_GPIO_Init+0x320>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f ae91 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	48001000 	.word	0x48001000
 80021f4:	48001400 	.word	0x48001400
 80021f8:	48001800 	.word	0x48001800
 80021fc:	48001c00 	.word	0x48001c00
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002250:	e002      	b.n	8002258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43d9      	mvns	r1, r3
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	400b      	ands	r3, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	b08f      	sub	sp, #60	; 0x3c
 800229c:	af0a      	add	r7, sp, #40	; 0x28
 800229e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e116      	b.n	80024d8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff fb51 	bl	800196c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f947 	bl	800557c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	687e      	ldr	r6, [r7, #4]
 80022f6:	466d      	mov	r5, sp
 80022f8:	f106 0410 	add.w	r4, r6, #16
 80022fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002308:	e885 0003 	stmia.w	r5, {r0, r1}
 800230c:	1d33      	adds	r3, r6, #4
 800230e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f003 f8e1 	bl	80054d8 <USB_CoreInit>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0d7      	b.n	80024d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f003 f935 	bl	800559e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e04a      	b.n	80023d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	333d      	adds	r3, #61	; 0x3d
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	333c      	adds	r3, #60	; 0x3c
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	b298      	uxth	r0, r3
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3342      	adds	r3, #66	; 0x42
 8002376:	4602      	mov	r2, r0
 8002378:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	333f      	adds	r3, #63	; 0x3f
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3344      	adds	r3, #68	; 0x44
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3348      	adds	r3, #72	; 0x48
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3350      	adds	r3, #80	; 0x50
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3af      	bcc.n	800233a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e044      	b.n	800246a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d3b5      	bcc.n	80023e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	687e      	ldr	r6, [r7, #4]
 800247c:	466d      	mov	r5, sp
 800247e:	f106 0410 	add.w	r4, r6, #16
 8002482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800248e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002492:	1d33      	adds	r3, r6, #4
 8002494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002496:	6838      	ldr	r0, [r7, #0]
 8002498:	f003 f8ac 	bl	80055f4 <USB_DevInit>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e014      	b.n	80024d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f80a 	bl	80024e0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fa3c 	bl	800594e <USB_DevDisconnect>

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	f043 0303 	orr.w	r3, r3, #3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_PWREx_GetVoltageRange+0x3c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002538:	d102      	bne.n	8002540 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800253a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800253e:	e00b      	b.n	8002558 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254e:	d102      	bne.n	8002556 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	e000      	b.n	8002558 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002556:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d141      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002576:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002582:	d131      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258a:	4a46      	ldr	r2, [pc, #280]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002590:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800259c:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025a4:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2232      	movs	r2, #50	; 0x32
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	4a3f      	ldr	r2, [pc, #252]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	0c9b      	lsrs	r3, r3, #18
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ba:	e002      	b.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3b01      	subs	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d102      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f2      	bne.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e2:	d158      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e057      	b.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025f8:	e04d      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d141      	bne.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d131      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2232      	movs	r2, #50	; 0x32
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	0c9b      	lsrs	r3, r3, #18
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002646:	e002      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3b01      	subs	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d102      	bne.n	8002662 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f2      	bne.n	8002648 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266e:	d112      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e011      	b.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002684:	e007      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002694:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40007000 	.word	0x40007000
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026be:	6053      	str	r3, [r2, #4]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000

080026d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80026da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026de:	6053      	str	r3, [r2, #4]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40007000 	.word	0x40007000

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f000 bc16 	b.w	8002f30 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002704:	4ba0      	ldr	r3, [pc, #640]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270e:	4b9e      	ldr	r3, [pc, #632]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80e4 	beq.w	80028ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_RCC_OscConfig+0x4c>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	f040 808b 	bne.w	800284a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b01      	cmp	r3, #1
 8002738:	f040 8087 	bne.w	800284a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x64>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e3ed      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_RCC_OscConfig+0x7e>
 8002764:	4b88      	ldr	r3, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	e005      	b.n	800277a <HAL_RCC_OscConfig+0x8a>
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277a:	4293      	cmp	r3, r2
 800277c:	d223      	bcs.n	80027c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fdfa 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e3ce      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002792:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7c      	ldr	r2, [pc, #496]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b7a      	ldr	r3, [pc, #488]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4977      	ldr	r1, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b0:	4b75      	ldr	r3, [pc, #468]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	4972      	ldr	r1, [pc, #456]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
 80027c4:	e025      	b.n	8002812 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c6:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	496a      	ldr	r1, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	4965      	ldr	r1, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fdba 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e38e      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002812:	f000 fcbf 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8002816:	4601      	mov	r1, r0
 8002818:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_RCC_OscConfig+0x29c>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	fa21 f303 	lsr.w	r3, r1, r3
 800282e:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_OscConfig+0x2a0>)
 8002830:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002832:	4b58      	ldr	r3, [pc, #352]	; (8002994 <HAL_RCC_OscConfig+0x2a4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f904 	bl	8001a44 <HAL_InitTick>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d052      	beq.n	80028ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	e372      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d032      	beq.n	80028b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002852:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800285e:	f7ff fa2f 	bl	8001cc0 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002866:	f7ff fa2b 	bl	8001cc0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e35b      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002884:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3f      	ldr	r2, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	493a      	ldr	r1, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4935      	ldr	r1, [pc, #212]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 80028b6:	e01a      	b.n	80028ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028b8:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a32      	ldr	r2, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f9fc 	bl	8001cc0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028cc:	f7ff f9f8 	bl	8001cc0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e328      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1dc>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d073      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x21c>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d10e      	bne.n	8002924 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d063      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d15f      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e305      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x24c>
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0x288>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x270>
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0x288>
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a05      	ldr	r2, [pc, #20]	; (8002988 <HAL_RCC_OscConfig+0x298>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f99e 	bl	8001cc0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002986:	e010      	b.n	80029aa <HAL_RCC_OscConfig+0x2ba>
 8002988:	40021000 	.word	0x40021000
 800298c:	0800a60c 	.word	0x0800a60c
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7ff f992 	bl	8001cc0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e2c2      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029aa:	4baf      	ldr	r3, [pc, #700]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x2a8>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7ff f982 	bl	8001cc0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7ff f97e 	bl	8001cc0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e2ae      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d2:	4ba5      	ldr	r3, [pc, #660]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2d0>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d060      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x310>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d119      	bne.n	8002a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d116      	bne.n	8002a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a00:	4b99      	ldr	r3, [pc, #612]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x328>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e28b      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b93      	ldr	r3, [pc, #588]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	4990      	ldr	r1, [pc, #576]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2c:	e040      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d023      	beq.n	8002a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a36:	4b8c      	ldr	r3, [pc, #560]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a8b      	ldr	r2, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7ff f93d 	bl	8001cc0 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7ff f939 	bl	8001cc0 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e269      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5c:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b7f      	ldr	r3, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	497c      	ldr	r1, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e018      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a79      	ldr	r2, [pc, #484]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7ff f919 	bl	8001cc0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7ff f915 	bl	8001cc0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e245      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa4:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d03c      	beq.n	8002b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01c      	beq.n	8002afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac4:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	4a67      	ldr	r2, [pc, #412]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff f8f4 	bl	8001cc0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff f8f0 	bl	8001cc0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e220      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aee:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <HAL_RCC_OscConfig+0x3ec>
 8002afc:	e01b      	b.n	8002b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7ff f8d7 	bl	8001cc0 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7ff f8d3 	bl	8001cc0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e203      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a6 	beq.w	8002c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b44      	ldr	r3, [pc, #272]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	4a43      	ldr	r2, [pc, #268]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_RCC_OscConfig+0x57c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x57c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <HAL_RCC_OscConfig+0x57c>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b88:	f7ff f89a 	bl	8001cc0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7ff f896 	bl	8001cc0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1c6      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_RCC_OscConfig+0x57c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4d8>
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc6:	e024      	b.n	8002c12 <HAL_RCC_OscConfig+0x522>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d110      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x502>
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	4a24      	ldr	r2, [pc, #144]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf0:	e00f      	b.n	8002c12 <HAL_RCC_OscConfig+0x522>
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002c0a:	f023 0304 	bic.w	r3, r3, #4
 8002c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f851 	bl	8001cc0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7ff f84d 	bl	8001cc0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e17b      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ed      	beq.n	8002c22 <HAL_RCC_OscConfig+0x532>
 8002c46:	e01a      	b.n	8002c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7ff f83a 	bl	8001cc0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7ff f836 	bl	8001cc0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d906      	bls.n	8002c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e164      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c70:	4ba8      	ldr	r3, [pc, #672]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e8      	bne.n	8002c50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7e:	7ffb      	ldrb	r3, [r7, #31]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c84:	4ba3      	ldr	r3, [pc, #652]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	4aa2      	ldr	r2, [pc, #648]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d03c      	beq.n	8002d16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01c      	beq.n	8002cde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ca4:	4b9b      	ldr	r3, [pc, #620]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002caa:	4a9a      	ldr	r2, [pc, #616]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7ff f804 	bl	8001cc0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cbc:	f7ff f800 	bl	8001cc0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e130      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cce:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <HAL_RCC_OscConfig+0x5cc>
 8002cdc:	e01b      	b.n	8002d16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cde:	4b8d      	ldr	r3, [pc, #564]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce4:	4a8b      	ldr	r2, [pc, #556]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fe ffe7 	bl	8001cc0 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf6:	f7fe ffe3 	bl	8001cc0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e113      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d08:	4b82      	ldr	r3, [pc, #520]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ef      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8107 	beq.w	8002f2e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	f040 80cb 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d2a:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d12c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d123      	bne.n	8002d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d11b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d113      	bne.n	8002d98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d109      	bne.n	8002d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d06d      	beq.n	8002e74 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d068      	beq.n	8002e70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002daa:	4b5a      	ldr	r3, [pc, #360]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0ba      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a55      	ldr	r2, [pc, #340]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc6:	f7fe ff7b 	bl	8001cc0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe ff77 	bl	8001cc0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0a7      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <HAL_RCC_OscConfig+0x828>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e06:	0212      	lsls	r2, r2, #8
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e0e:	0852      	lsrs	r2, r2, #1
 8002e10:	3a01      	subs	r2, #1
 8002e12:	0552      	lsls	r2, r2, #21
 8002e14:	4311      	orrs	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e1a:	0852      	lsrs	r2, r2, #1
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	0652      	lsls	r2, r2, #25
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e26:	06d2      	lsls	r2, r2, #27
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	493a      	ldr	r1, [pc, #232]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e30:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e3c:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e48:	f7fe ff3a 	bl	8001cc0 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe ff36 	bl	8001cc0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e066      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6e:	e05e      	b.n	8002f2e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e05d      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d156      	bne.n	8002f2e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fe ff12 	bl	8001cc0 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe ff0e 	bl	8001cc0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e03e      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x7b0>
 8002ebe:	e036      	b.n	8002f2e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d031      	beq.n	8002f2a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ee4:	f023 0303 	bic.w	r3, r3, #3
 8002ee8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_OscConfig+0x824>)
 8002ef0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe fee1 	bl	8001cc0 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	e00c      	b.n	8002f1c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe fedd 	bl	8001cc0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d905      	bls.n	8002f1c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00d      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_OscConfig+0x848>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ec      	bne.n	8002f02 <HAL_RCC_OscConfig+0x812>
 8002f28:	e001      	b.n	8002f2e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e10f      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	4984      	ldr	r1, [pc, #528]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b82      	ldr	r3, [pc, #520]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0f7      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8089 	beq.w	80030a4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d133      	bne.n	8003002 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9a:	4b79      	ldr	r3, [pc, #484]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0e4      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002faa:	f000 fa41 	bl	8003430 <RCC_GetSysClockFreqFromPLLSource>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCC_ClockConfig+0x248>)
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d955      	bls.n	8003062 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fca:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e044      	b.n	8003062 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03e      	beq.n	8003062 <HAL_RCC_ClockConfig+0x126>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d13a      	bne.n	8003062 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff4:	4a62      	ldr	r2, [pc, #392]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e02f      	b.n	8003062 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0ac      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003022:	4b57      	ldr	r3, [pc, #348]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0a0      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e098      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003042:	f000 f8a7 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <HAL_RCC_ClockConfig+0x248>)
 800304a:	429a      	cmp	r2, r3
 800304c:	d909      	bls.n	8003062 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800304e:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003056:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4944      	ldr	r1, [pc, #272]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fe fe24 	bl	8001cc0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fe fe20 	bl	8001cc0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e070      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4930      	ldr	r1, [pc, #192]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d105      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030d4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d210      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 020f 	bic.w	r2, r3, #15
 80030ec:	4923      	ldr	r1, [pc, #140]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_ClockConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e036      	b.n	8003174 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4918      	ldr	r1, [pc, #96]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4910      	ldr	r1, [pc, #64]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003144:	f000 f826 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003148:	4601      	mov	r1, r0
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_ClockConfig+0x244>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_ClockConfig+0x24c>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa21 f303 	lsr.w	r3, r1, r3
 8003160:	4a0a      	ldr	r2, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x250>)
 8003162:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x254>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fc6b 	bl	8001a44 <HAL_InitTick>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]

  return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	04c4b400 	.word	0x04c4b400
 8003188:	0800a60c 	.word	0x0800a60c
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ac:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d121      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d11e      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031f0:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003204:	e00a      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d102      	bne.n	8003212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e004      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d101      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800321a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d133      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0xa4>
 8003232:	2b03      	cmp	r3, #3
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0xaa>
 8003236:	e005      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800323a:	617b      	str	r3, [r7, #20]
      break;
 800323c:	e005      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003240:	617b      	str	r3, [r7, #20]
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	617b      	str	r3, [r7, #20]
      break;
 8003248:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	3301      	adds	r3, #1
 8003256:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	fb02 f203 	mul.w	r2, r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_GetSysClockFreq+0x104>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0e5b      	lsrs	r3, r3, #25
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800328a:	69bb      	ldr	r3, [r7, #24]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3724      	adds	r7, #36	; 0x24
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40021000 	.word	0x40021000
 800329c:	0800a624 	.word	0x0800a624
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c8:	4601      	mov	r1, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	0800a61c 	.word	0x0800a61c

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032f0:	f7ff ffda 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032f4:	4601      	mov	r1, r0
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0adb      	lsrs	r3, r3, #11
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	0800a61c 	.word	0x0800a61c

08003318 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	220f      	movs	r2, #15
 8003326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCC_GetClockConfig+0x60>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	40022000 	.word	0x40022000

0800337c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003394:	f7ff f8c8 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 8003398:	6178      	str	r0, [r7, #20]
 800339a:	e014      	b.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b22      	ldr	r3, [pc, #136]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	6593      	str	r3, [r2, #88]	; 0x58
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033b4:	f7ff f8b8 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 80033b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d10b      	bne.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d913      	bls.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2ba0      	cmp	r3, #160	; 0xa0
 80033d8:	d902      	bls.n	80033e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033da:	2302      	movs	r3, #2
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e00d      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e0:	2301      	movs	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e00a      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b7f      	cmp	r3, #127	; 0x7f
 80033ea:	d902      	bls.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033ec:	2302      	movs	r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e004      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b70      	cmp	r3, #112	; 0x70
 80033f6:	d101      	bne.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 020f 	bic.w	r2, r3, #15
 8003404:	4909      	ldr	r1, [pc, #36]	; (800342c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	40022000 	.word	0x40022000

08003430 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d118      	bne.n	8003478 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003446:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d107      	bne.n	8003462 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003452:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e005      	b.n	800346e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346e:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d002      	beq.n	800348e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003488:	2b03      	cmp	r3, #3
 800348a:	d003      	beq.n	8003494 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800348c:	e005      	b.n	800349a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003490:	613b      	str	r3, [r7, #16]
    break;
 8003492:	e005      	b.n	80034a0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003496:	613b      	str	r3, [r7, #16]
    break;
 8003498:	e002      	b.n	80034a0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	613b      	str	r3, [r7, #16]
    break;
 800349e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	3301      	adds	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	0e5b      	lsrs	r3, r3, #25
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	3301      	adds	r3, #1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034e0:	683b      	ldr	r3, [r7, #0]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	0800a624 	.word	0x0800a624
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003508:	2300      	movs	r3, #0
 800350a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800350c:	2300      	movs	r3, #0
 800350e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d03d      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d00b      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d804      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003530:	e01d      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003532:	2b60      	cmp	r3, #96	; 0x60
 8003534:	d01e      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d01c      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800353c:	4b86      	ldr	r3, [pc, #536]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a85      	ldr	r2, [pc, #532]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fafd 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3320      	adds	r3, #32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fbe4 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	74fb      	strb	r3, [r7, #19]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357c:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800357e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003582:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	4973      	ldr	r1, [pc, #460]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d042      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d00f      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xce>
 80035ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b2:	d805      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d011      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035bc:	d017      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xee>
 80035be:	e01f      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80035c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c4:	d01f      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d01c      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035cc:	e018      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ce:	4b62      	ldr	r3, [pc, #392]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4a61      	ldr	r2, [pc, #388]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035da:	e015      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fab4 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ec:	e00c      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3320      	adds	r3, #32
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb9b 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035fe:	e003      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	74fb      	strb	r3, [r7, #19]
      break;
 8003604:	e000      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800360e:	4b52      	ldr	r3, [pc, #328]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	494e      	ldr	r1, [pc, #312]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003624:	e001      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 809f 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003638:	2300      	movs	r3, #0
 800363a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800363c:	4b46      	ldr	r3, [pc, #280]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800364c:	2300      	movs	r3, #0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	4a40      	ldr	r2, [pc, #256]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6593      	str	r3, [r2, #88]	; 0x58
 800365e:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800367a:	f7fe fb21 	bl	8001cc0 <HAL_GetTick>
 800367e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003680:	e009      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe fb1d 	bl	8001cc0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d902      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	74fb      	strb	r3, [r7, #19]
        break;
 8003694:	e005      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ef      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d15b      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01f      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d019      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d016      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fe fadc 	bl	8001cc0 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370a:	e00b      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fad8 	bl	8001cc0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d902      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	74fb      	strb	r3, [r7, #19]
            break;
 8003722:	e006      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ec      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10c      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	4903      	ldr	r1, [pc, #12]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003750:	e008      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
 8003756:	e005      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003764:	7c7b      	ldrb	r3, [r7, #17]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4ba0      	ldr	r3, [pc, #640]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a9f      	ldr	r2, [pc, #636]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003782:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	4996      	ldr	r1, [pc, #600]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a4:	4b91      	ldr	r3, [pc, #580]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 020c 	bic.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	498e      	ldr	r1, [pc, #568]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	4985      	ldr	r1, [pc, #532]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e8:	4b80      	ldr	r3, [pc, #512]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	497d      	ldr	r1, [pc, #500]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800380a:	4b78      	ldr	r3, [pc, #480]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	4974      	ldr	r1, [pc, #464]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382c:	4b6f      	ldr	r3, [pc, #444]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	496c      	ldr	r1, [pc, #432]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384e:	4b67      	ldr	r3, [pc, #412]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385c:	4963      	ldr	r1, [pc, #396]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003870:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800387e:	495b      	ldr	r1, [pc, #364]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003892:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	4952      	ldr	r1, [pc, #328]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b4:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	494a      	ldr	r1, [pc, #296]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d6:	4b45      	ldr	r3, [pc, #276]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	4941      	ldr	r1, [pc, #260]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038f8:	4b3c      	ldr	r3, [pc, #240]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	4939      	ldr	r1, [pc, #228]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d028      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	4930      	ldr	r1, [pc, #192]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003938:	d106      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003944:	60d3      	str	r3, [r2, #12]
 8003946:	e011      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003950:	d10c      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2101      	movs	r1, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f8f9 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d04d      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003980:	d108      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003988:	4a18      	ldr	r2, [pc, #96]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800398e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003992:	e012      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800399a:	4a14      	ldr	r2, [pc, #80]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b2:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c2:	d106      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
 80039d0:	e020      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039da:	d109      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a02      	ldr	r2, [pc, #8]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	60d3      	str	r3, [r2, #12]
 80039e8:	e014      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f8a5 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d028      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a20:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2e:	4947      	ldr	r1, [pc, #284]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a40:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a41      	ldr	r2, [pc, #260]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4a:	60d3      	str	r3, [r2, #12]
 8003a4c:	e011      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f876 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a7e:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8e:	492f      	ldr	r1, [pc, #188]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f851 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ace:	f023 0204 	bic.w	r2, r3, #4
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	491c      	ldr	r1, [pc, #112]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00b      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af2:	f023 0218 	bic.w	r2, r3, #24
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	4913      	ldr	r1, [pc, #76]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b20:	490a      	ldr	r1, [pc, #40]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b32:	d105      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b40:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000

08003b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0203 	and.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d103      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d13f      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	e03c      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00c      	beq.n	8003baa <RCCEx_PLLSAI1_Config+0x5a>
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d013      	beq.n	8003bbc <RCCEx_PLLSAI1_Config+0x6c>
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d120      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11d      	bne.n	8003be0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba8:	e01a      	b.n	8003be0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003baa:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e013      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bbc:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10f      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc8:	4b55      	ldr	r3, [pc, #340]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd8:	e006      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e004      	b.n	8003bea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003be4:	bf00      	nop
 8003be6:	e000      	b.n	8003bea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003be8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d108      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f023 0203 	bic.w	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4948      	ldr	r1, [pc, #288]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 8086 	bne.w	8003d16 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c0a:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a44      	ldr	r2, [pc, #272]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c16:	f7fe f853 	bl	8001cc0 <HAL_GetTick>
 8003c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c1c:	e009      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c1e:	f7fe f84f 	bl	8001cc0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d902      	bls.n	8003c32 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c30:	e005      	b.n	8003c3e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ef      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d168      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d113      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4a:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6892      	ldr	r2, [r2, #8]
 8003c56:	0211      	lsls	r1, r2, #8
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68d2      	ldr	r2, [r2, #12]
 8003c5c:	06d2      	lsls	r2, r2, #27
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	492d      	ldr	r1, [pc, #180]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	610b      	str	r3, [r1, #16]
 8003c70:	e02d      	b.n	8003cce <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d115      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6912      	ldr	r2, [r2, #16]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0552      	lsls	r2, r2, #21
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6852      	ldr	r2, [r2, #4]
 8003c96:	3a01      	subs	r2, #1
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	4920      	ldr	r1, [pc, #128]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	610b      	str	r3, [r1, #16]
 8003ca2:	e014      	b.n	8003cce <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6952      	ldr	r2, [r2, #20]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6852      	ldr	r2, [r2, #4]
 8003cc2:	3a01      	subs	r2, #1
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	4915      	ldr	r1, [pc, #84]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fd fff1 	bl	8001cc0 <HAL_GetTick>
 8003cde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce0:	e009      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ce2:	f7fd ffed 	bl	8001cc0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d902      	bls.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	73fb      	strb	r3, [r7, #15]
          break;
 8003cf4:	e005      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4903      	ldr	r1, [pc, #12]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	07ff800f 	.word	0x07ff800f
 8003d28:	ff9f800f 	.word	0xff9f800f
 8003d2c:	f9ff800f 	.word	0xf9ff800f

08003d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d3e:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d103      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d13f      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e03c      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d00c      	beq.n	8003d8a <RCCEx_PLLSAI2_Config+0x5a>
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d013      	beq.n	8003d9c <RCCEx_PLLSAI2_Config+0x6c>
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d120      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d78:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11d      	bne.n	8003dc0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d88:	e01a      	b.n	8003dc0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9a:	e013      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d9c:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003da8:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003db8:	e006      	b.n	8003dc8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbe:	e004      	b.n	8003dca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dc8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f023 0203 	bic.w	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4948      	ldr	r1, [pc, #288]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f040 8086 	bne.w	8003ef6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dea:	4b45      	ldr	r3, [pc, #276]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a44      	ldr	r2, [pc, #272]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df6:	f7fd ff63 	bl	8001cc0 <HAL_GetTick>
 8003dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dfc:	e009      	b.n	8003e12 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dfe:	f7fd ff5f 	bl	8001cc0 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d902      	bls.n	8003e12 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e10:	e005      	b.n	8003e1e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ef      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d168      	bne.n	8003ef6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d113      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e2a:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	0211      	lsls	r1, r2, #8
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	06d2      	lsls	r2, r2, #27
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6852      	ldr	r2, [r2, #4]
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	492d      	ldr	r1, [pc, #180]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	614b      	str	r3, [r1, #20]
 8003e50:	e02d      	b.n	8003eae <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d115      	bne.n	8003e84 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	0211      	lsls	r1, r2, #8
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6912      	ldr	r2, [r2, #16]
 8003e6a:	0852      	lsrs	r2, r2, #1
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	0552      	lsls	r2, r2, #21
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6852      	ldr	r2, [r2, #4]
 8003e76:	3a01      	subs	r2, #1
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	4920      	ldr	r1, [pc, #128]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	614b      	str	r3, [r1, #20]
 8003e82:	e014      	b.n	8003eae <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e84:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6952      	ldr	r2, [r2, #20]
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0652      	lsls	r2, r2, #25
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6852      	ldr	r2, [r2, #4]
 8003ea2:	3a01      	subs	r2, #1
 8003ea4:	0112      	lsls	r2, r2, #4
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	4915      	ldr	r1, [pc, #84]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd ff01 	bl	8001cc0 <HAL_GetTick>
 8003ebe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ec0:	e009      	b.n	8003ed6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ec2:	f7fd fefd 	bl	8001cc0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d902      	bls.n	8003ed6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ed4:	e005      	b.n	8003ee2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ef      	beq.n	8003ec2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	07ff800f 	.word	0x07ff800f
 8003f08:	ff9f800f 	.word	0xff9f800f
 8003f0c:	f9ff800f 	.word	0xf9ff800f

08003f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e049      	b.n	8003fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fcf8 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 faa6 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d001      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04f      	b.n	8004078 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	; (8004084 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d018      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_TIM_Base_Start_IT+0xc8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_TIM_Base_Start_IT+0xcc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_TIM_Base_Start_IT+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_TIM_Base_Start_IT+0xd4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_Base_Start_IT+0xd8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d115      	bne.n	8004062 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_TIM_Base_Start_IT+0xdc>)
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b06      	cmp	r3, #6
 8004046:	d015      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0xb4>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404e:	d011      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	e008      	b.n	8004074 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e000      	b.n	8004076 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40013400 	.word	0x40013400
 8004098:	40014000 	.word	0x40014000
 800409c:	00010007 	.word	0x00010007

080040a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0202 	mvn.w	r2, #2
 80040cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9be 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9b0 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f9c1 	bl	8004478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0204 	mvn.w	r2, #4
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f994 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f986 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f997 	bl	8004478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b08      	cmp	r3, #8
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0208 	mvn.w	r2, #8
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f96a 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f95c 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f96d 	bl	8004478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0210 	mvn.w	r2, #16
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2208      	movs	r2, #8
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f940 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f932 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f943 	bl	8004478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0201 	mvn.w	r2, #1
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fa9c 	bl	800175c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 faee 	bl	800482c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425e:	d10e      	bne.n	800427e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	d107      	bne.n	800427e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fae1 	bl	8004840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d10e      	bne.n	80042aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d107      	bne.n	80042aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8f1 	bl	800448c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d10e      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d107      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0220 	mvn.w	r2, #32
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 faa1 	bl	8004818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_ConfigClockSource+0x18>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0a8      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x16a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004318:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004320:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d067      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x124>
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d80b      	bhi.n	800434e <HAL_TIM_ConfigClockSource+0x70>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d073      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x144>
 800433a:	2b10      	cmp	r3, #16
 800433c:	d802      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x66>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d06f      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004342:	e078      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004344:	2b20      	cmp	r3, #32
 8004346:	d06c      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x144>
 8004348:	2b30      	cmp	r3, #48	; 0x30
 800434a:	d06a      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800434c:	e073      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800434e:	2b70      	cmp	r3, #112	; 0x70
 8004350:	d00d      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x90>
 8004352:	2b70      	cmp	r3, #112	; 0x70
 8004354:	d804      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x82>
 8004356:	2b50      	cmp	r3, #80	; 0x50
 8004358:	d033      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xe4>
 800435a:	2b60      	cmp	r3, #96	; 0x60
 800435c:	d041      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800435e:	e06a      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d066      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0x156>
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436a:	d017      	beq.n	800439c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800436c:	e063      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6899      	ldr	r1, [r3, #8]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f000 f9a3 	bl	80046c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004390:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	609a      	str	r2, [r3, #8]
      break;
 800439a:	e04c      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f000 f98c 	bl	80046c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043be:	609a      	str	r2, [r3, #8]
      break;
 80043c0:	e039      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f000 f900 	bl	80045d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2150      	movs	r1, #80	; 0x50
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f959 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 80043e0:	e029      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f000 f91f 	bl	8004632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2160      	movs	r1, #96	; 0x60
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f949 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 8004400:	e019      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	461a      	mov	r2, r3
 8004410:	f000 f8e0 	bl	80045d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2140      	movs	r1, #64	; 0x40
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f939 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 8004420:	e009      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f000 f930 	bl	8004692 <TIM_ITRx_SetConfig>
        break;
 8004432:	e000      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d00f      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <TIM_Base_SetConfig+0x118>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <TIM_Base_SetConfig+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <TIM_Base_SetConfig+0x120>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2f      	ldr	r2, [pc, #188]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01f      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d01b      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <TIM_Base_SetConfig+0x118>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d017      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <TIM_Base_SetConfig+0x11c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <TIM_Base_SetConfig+0x120>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00f      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00b      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <TIM_Base_SetConfig+0x128>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <TIM_Base_SetConfig+0x12c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <TIM_Base_SetConfig+0x130>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d108      	bne.n	800454c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a10      	ldr	r2, [pc, #64]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_Base_SetConfig+0xf8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <TIM_Base_SetConfig+0x128>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a10      	ldr	r2, [pc, #64]	; (80045cc <TIM_Base_SetConfig+0x12c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0xf8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <TIM_Base_SetConfig+0x130>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40012c00 	.word	0x40012c00
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f023 030a 	bic.w	r3, r3, #10
 8004610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004632:	b480      	push	{r7}
 8004634:	b087      	sub	sp, #28
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0210 	bic.w	r2, r3, #16
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800465c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	031b      	lsls	r3, r3, #12
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800466e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f043 0307 	orr.w	r3, r3, #7
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	021a      	lsls	r2, r3, #8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800471c:	2302      	movs	r3, #2
 800471e:	e068      	b.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800475a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01d      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d018      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a14      	ldr	r2, [pc, #80]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10c      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40013400 	.word	0x40013400
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40014000 	.word	0x40014000

08004818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e042      	b.n	80048ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fc ffad 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2224      	movs	r2, #36	; 0x24
 8004882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8c4 	bl	8004a24 <UART_SetConfig>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e022      	b.n	80048ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb8a 	bl	8004fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fc11 	bl	800510c <UART_CheckIdleState>
 80048ea:	4603      	mov	r3, r0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490a:	2b20      	cmp	r3, #32
 800490c:	f040 8084 	bne.w	8004a18 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_Transmit+0x28>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e07c      	b.n	8004a1a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_UART_Transmit+0x3a>
 800492a:	2302      	movs	r3, #2
 800492c:	e075      	b.n	8004a1a <HAL_UART_Transmit+0x126>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2221      	movs	r2, #33	; 0x21
 8004942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004946:	f7fd f9bb 	bl	8001cc0 <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d108      	bne.n	8004978 <HAL_UART_Transmit+0x84>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004988:	e02d      	b.n	80049e6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fc01 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e03a      	b.n	8004a1a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b6:	b292      	uxth	r2, r2
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3302      	adds	r3, #2
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e008      	b.n	80049d4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b292      	uxth	r2, r2
 80049cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1cb      	bne.n	800498a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2140      	movs	r1, #64	; 0x40
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fbcd 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a28:	b088      	sub	sp, #32
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4bb1      	ldr	r3, [pc, #708]	; (8004d20 <UART_SetConfig+0x2fc>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	69f9      	ldr	r1, [r7, #28]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4aa6      	ldr	r2, [pc, #664]	; (8004d24 <UART_SetConfig+0x300>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	69f9      	ldr	r1, [r7, #28]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f023 010f 	bic.w	r1, r3, #15
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a97      	ldr	r2, [pc, #604]	; (8004d28 <UART_SetConfig+0x304>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d121      	bne.n	8004b14 <UART_SetConfig+0xf0>
 8004ad0:	4b96      	ldr	r3, [pc, #600]	; (8004d2c <UART_SetConfig+0x308>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d816      	bhi.n	8004b0c <UART_SetConfig+0xe8>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xc0>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004afb 	.word	0x08004afb
 8004af0:	08004b07 	.word	0x08004b07
 8004af4:	2301      	movs	r3, #1
 8004af6:	76fb      	strb	r3, [r7, #27]
 8004af8:	e0e8      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004afa:	2302      	movs	r3, #2
 8004afc:	76fb      	strb	r3, [r7, #27]
 8004afe:	e0e5      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b00:	2304      	movs	r3, #4
 8004b02:	76fb      	strb	r3, [r7, #27]
 8004b04:	e0e2      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b06:	2308      	movs	r3, #8
 8004b08:	76fb      	strb	r3, [r7, #27]
 8004b0a:	e0df      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	76fb      	strb	r3, [r7, #27]
 8004b10:	bf00      	nop
 8004b12:	e0db      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a85      	ldr	r2, [pc, #532]	; (8004d30 <UART_SetConfig+0x30c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d134      	bne.n	8004b88 <UART_SetConfig+0x164>
 8004b1e:	4b83      	ldr	r3, [pc, #524]	; (8004d2c <UART_SetConfig+0x308>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d829      	bhi.n	8004b80 <UART_SetConfig+0x15c>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x110>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004b81 	.word	0x08004b81
 8004b3c:	08004b81 	.word	0x08004b81
 8004b40:	08004b81 	.word	0x08004b81
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b81 	.word	0x08004b81
 8004b54:	08004b6f 	.word	0x08004b6f
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b81 	.word	0x08004b81
 8004b64:	08004b7b 	.word	0x08004b7b
 8004b68:	2300      	movs	r3, #0
 8004b6a:	76fb      	strb	r3, [r7, #27]
 8004b6c:	e0ae      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	76fb      	strb	r3, [r7, #27]
 8004b72:	e0ab      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b74:	2304      	movs	r3, #4
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e0a8      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e0a5      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b80:	2310      	movs	r3, #16
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	bf00      	nop
 8004b86:	e0a1      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a69      	ldr	r2, [pc, #420]	; (8004d34 <UART_SetConfig+0x310>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d120      	bne.n	8004bd4 <UART_SetConfig+0x1b0>
 8004b92:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <UART_SetConfig+0x308>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d00f      	beq.n	8004bc0 <UART_SetConfig+0x19c>
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d802      	bhi.n	8004baa <UART_SetConfig+0x186>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <UART_SetConfig+0x190>
 8004ba8:	e010      	b.n	8004bcc <UART_SetConfig+0x1a8>
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d005      	beq.n	8004bba <UART_SetConfig+0x196>
 8004bae:	2b30      	cmp	r3, #48	; 0x30
 8004bb0:	d009      	beq.n	8004bc6 <UART_SetConfig+0x1a2>
 8004bb2:	e00b      	b.n	8004bcc <UART_SetConfig+0x1a8>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	76fb      	strb	r3, [r7, #27]
 8004bb8:	e088      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	76fb      	strb	r3, [r7, #27]
 8004bbe:	e085      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	76fb      	strb	r3, [r7, #27]
 8004bc4:	e082      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	76fb      	strb	r3, [r7, #27]
 8004bca:	e07f      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	bf00      	nop
 8004bd2:	e07b      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <UART_SetConfig+0x314>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d120      	bne.n	8004c20 <UART_SetConfig+0x1fc>
 8004bde:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <UART_SetConfig+0x308>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d00f      	beq.n	8004c0c <UART_SetConfig+0x1e8>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d802      	bhi.n	8004bf6 <UART_SetConfig+0x1d2>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0x1dc>
 8004bf4:	e010      	b.n	8004c18 <UART_SetConfig+0x1f4>
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d005      	beq.n	8004c06 <UART_SetConfig+0x1e2>
 8004bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfc:	d009      	beq.n	8004c12 <UART_SetConfig+0x1ee>
 8004bfe:	e00b      	b.n	8004c18 <UART_SetConfig+0x1f4>
 8004c00:	2300      	movs	r3, #0
 8004c02:	76fb      	strb	r3, [r7, #27]
 8004c04:	e062      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c06:	2302      	movs	r3, #2
 8004c08:	76fb      	strb	r3, [r7, #27]
 8004c0a:	e05f      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	76fb      	strb	r3, [r7, #27]
 8004c10:	e05c      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c12:	2308      	movs	r3, #8
 8004c14:	76fb      	strb	r3, [r7, #27]
 8004c16:	e059      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	bf00      	nop
 8004c1e:	e055      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a45      	ldr	r2, [pc, #276]	; (8004d3c <UART_SetConfig+0x318>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d124      	bne.n	8004c74 <UART_SetConfig+0x250>
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <UART_SetConfig+0x308>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	d012      	beq.n	8004c60 <UART_SetConfig+0x23c>
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3e:	d802      	bhi.n	8004c46 <UART_SetConfig+0x222>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <UART_SetConfig+0x230>
 8004c44:	e012      	b.n	8004c6c <UART_SetConfig+0x248>
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4a:	d006      	beq.n	8004c5a <UART_SetConfig+0x236>
 8004c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c50:	d009      	beq.n	8004c66 <UART_SetConfig+0x242>
 8004c52:	e00b      	b.n	8004c6c <UART_SetConfig+0x248>
 8004c54:	2300      	movs	r3, #0
 8004c56:	76fb      	strb	r3, [r7, #27]
 8004c58:	e038      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	76fb      	strb	r3, [r7, #27]
 8004c5e:	e035      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c60:	2304      	movs	r3, #4
 8004c62:	76fb      	strb	r3, [r7, #27]
 8004c64:	e032      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c66:	2308      	movs	r3, #8
 8004c68:	76fb      	strb	r3, [r7, #27]
 8004c6a:	e02f      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	76fb      	strb	r3, [r7, #27]
 8004c70:	bf00      	nop
 8004c72:	e02b      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <UART_SetConfig+0x300>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d124      	bne.n	8004cc8 <UART_SetConfig+0x2a4>
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <UART_SetConfig+0x308>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d012      	beq.n	8004cb4 <UART_SetConfig+0x290>
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d802      	bhi.n	8004c9a <UART_SetConfig+0x276>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <UART_SetConfig+0x284>
 8004c98:	e012      	b.n	8004cc0 <UART_SetConfig+0x29c>
 8004c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9e:	d006      	beq.n	8004cae <UART_SetConfig+0x28a>
 8004ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca4:	d009      	beq.n	8004cba <UART_SetConfig+0x296>
 8004ca6:	e00b      	b.n	8004cc0 <UART_SetConfig+0x29c>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	76fb      	strb	r3, [r7, #27]
 8004cac:	e00e      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	76fb      	strb	r3, [r7, #27]
 8004cb2:	e00b      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e008      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	76fb      	strb	r3, [r7, #27]
 8004cbe:	e005      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	bf00      	nop
 8004cc6:	e001      	b.n	8004ccc <UART_SetConfig+0x2a8>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <UART_SetConfig+0x300>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f040 80a1 	bne.w	8004e1a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd8:	7efb      	ldrb	r3, [r7, #27]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d836      	bhi.n	8004d4c <UART_SetConfig+0x328>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x2c0>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d4d 	.word	0x08004d4d
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d4d 	.word	0x08004d4d
 8004cf4:	08004d17 	.word	0x08004d17
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004d4d 	.word	0x08004d4d
 8004d04:	08004d45 	.word	0x08004d45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fe fada 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	6178      	str	r0, [r7, #20]
        break;
 8004d0e:	e022      	b.n	8004d56 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <UART_SetConfig+0x31c>)
 8004d12:	617b      	str	r3, [r7, #20]
        break;
 8004d14:	e01f      	b.n	8004d56 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe fa3d 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8004d1a:	6178      	str	r0, [r7, #20]
        break;
 8004d1c:	e01b      	b.n	8004d56 <UART_SetConfig+0x332>
 8004d1e:	bf00      	nop
 8004d20:	cfff69f3 	.word	0xcfff69f3
 8004d24:	40008000 	.word	0x40008000
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40004400 	.word	0x40004400
 8004d34:	40004800 	.word	0x40004800
 8004d38:	40004c00 	.word	0x40004c00
 8004d3c:	40005000 	.word	0x40005000
 8004d40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d48:	617b      	str	r3, [r7, #20]
        break;
 8004d4a:	e004      	b.n	8004d56 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	76bb      	strb	r3, [r7, #26]
        break;
 8004d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 811d 	beq.w	8004f98 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	4a97      	ldr	r2, [pc, #604]	; (8004fc0 <UART_SetConfig+0x59c>)
 8004d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d305      	bcc.n	8004d8e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d902      	bls.n	8004d94 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	76bb      	strb	r3, [r7, #26]
 8004d92:	e101      	b.n	8004f98 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	4a87      	ldr	r2, [pc, #540]	; (8004fc0 <UART_SetConfig+0x59c>)
 8004da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f04f 0400 	mov.w	r4, #0
 8004dac:	461a      	mov	r2, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	f7fb ff62 	bl	8000c78 <__aeabi_uldivmod>
 8004db4:	4603      	mov	r3, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4619      	mov	r1, r3
 8004dba:	4622      	mov	r2, r4
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	f04f 0400 	mov.w	r4, #0
 8004dc4:	0214      	lsls	r4, r2, #8
 8004dc6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004dca:	020b      	lsls	r3, r1, #8
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6852      	ldr	r2, [r2, #4]
 8004dd0:	0852      	lsrs	r2, r2, #1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	eb13 0b01 	adds.w	fp, r3, r1
 8004ddc:	eb44 0c02 	adc.w	ip, r4, r2
 8004de0:	4658      	mov	r0, fp
 8004de2:	4661      	mov	r1, ip
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f04f 0400 	mov.w	r4, #0
 8004dec:	461a      	mov	r2, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	f7fb ff42 	bl	8000c78 <__aeabi_uldivmod>
 8004df4:	4603      	mov	r3, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e00:	d308      	bcc.n	8004e14 <UART_SetConfig+0x3f0>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e08:	d204      	bcs.n	8004e14 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e0c1      	b.n	8004f98 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	76bb      	strb	r3, [r7, #26]
 8004e18:	e0be      	b.n	8004f98 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e22:	d164      	bne.n	8004eee <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004e24:	7efb      	ldrb	r3, [r7, #27]
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d827      	bhi.n	8004e7a <UART_SetConfig+0x456>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x40c>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e5d 	.word	0x08004e5d
 8004e38:	08004e65 	.word	0x08004e65
 8004e3c:	08004e7b 	.word	0x08004e7b
 8004e40:	08004e6b 	.word	0x08004e6b
 8004e44:	08004e7b 	.word	0x08004e7b
 8004e48:	08004e7b 	.word	0x08004e7b
 8004e4c:	08004e7b 	.word	0x08004e7b
 8004e50:	08004e73 	.word	0x08004e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe fa34 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8004e58:	6178      	str	r0, [r7, #20]
        break;
 8004e5a:	e013      	b.n	8004e84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7fe fa46 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8004e60:	6178      	str	r0, [r7, #20]
        break;
 8004e62:	e00f      	b.n	8004e84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b57      	ldr	r3, [pc, #348]	; (8004fc4 <UART_SetConfig+0x5a0>)
 8004e66:	617b      	str	r3, [r7, #20]
        break;
 8004e68:	e00c      	b.n	8004e84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7fe f993 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8004e6e:	6178      	str	r0, [r7, #20]
        break;
 8004e70:	e008      	b.n	8004e84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	617b      	str	r3, [r7, #20]
        break;
 8004e78:	e004      	b.n	8004e84 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	76bb      	strb	r3, [r7, #26]
        break;
 8004e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8086 	beq.w	8004f98 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	4a4b      	ldr	r2, [pc, #300]	; (8004fc0 <UART_SetConfig+0x59c>)
 8004e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e96:	461a      	mov	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e9e:	005a      	lsls	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	d916      	bls.n	8004ee8 <UART_SetConfig+0x4c4>
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d212      	bcs.n	8004ee8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f023 030f 	bic.w	r3, r3, #15
 8004eca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	89fa      	ldrh	r2, [r7, #14]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e057      	b.n	8004f98 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	76bb      	strb	r3, [r7, #26]
 8004eec:	e054      	b.n	8004f98 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eee:	7efb      	ldrb	r3, [r7, #27]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d828      	bhi.n	8004f46 <UART_SetConfig+0x522>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x4d8>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	08004f47 	.word	0x08004f47
 8004f0c:	08004f37 	.word	0x08004f37
 8004f10:	08004f47 	.word	0x08004f47
 8004f14:	08004f47 	.word	0x08004f47
 8004f18:	08004f47 	.word	0x08004f47
 8004f1c:	08004f3f 	.word	0x08004f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f20:	f7fe f9ce 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8004f24:	6178      	str	r0, [r7, #20]
        break;
 8004f26:	e013      	b.n	8004f50 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe f9e0 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8004f2c:	6178      	str	r0, [r7, #20]
        break;
 8004f2e:	e00f      	b.n	8004f50 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <UART_SetConfig+0x5a0>)
 8004f32:	617b      	str	r3, [r7, #20]
        break;
 8004f34:	e00c      	b.n	8004f50 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7fe f92d 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8004f3a:	6178      	str	r0, [r7, #20]
        break;
 8004f3c:	e008      	b.n	8004f50 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f42:	617b      	str	r3, [r7, #20]
        break;
 8004f44:	e004      	b.n	8004f50 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004f4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d020      	beq.n	8004f98 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <UART_SetConfig+0x59c>)
 8004f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f60:	461a      	mov	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	441a      	add	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d908      	bls.n	8004f94 <UART_SetConfig+0x570>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d204      	bcs.n	8004f94 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	e001      	b.n	8004f98 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004fb4:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004fc0:	0800a654 	.word	0x0800a654
 8004fc4:	00f42400 	.word	0x00f42400

08004fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c6:	d10a      	bne.n	80050de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800511c:	f7fc fdd0 	bl	8001cc0 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d10e      	bne.n	800514e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f82c 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e022      	b.n	8005194 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b04      	cmp	r3, #4
 800515a:	d10e      	bne.n	800517a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f816 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e00c      	b.n	8005194 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ac:	e062      	b.n	8005274 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d05e      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7fc fd83 	bl	8001cc0 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <UART_WaitOnFlagUntilTimeout+0x30>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11d      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051da:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e045      	b.n	8005294 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d02e      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005224:	d126      	bne.n	8005274 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800522e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800523e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e00f      	b.n	8005294 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4013      	ands	r3, r2
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	429a      	cmp	r2, r3
 8005290:	d08d      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e027      	b.n	8005302 <HAL_UARTEx_DisableFifoMode+0x66>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2224      	movs	r2, #36	; 0x24
 80052be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005322:	2302      	movs	r3, #2
 8005324:	e02d      	b.n	8005382 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2224      	movs	r2, #36	; 0x24
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f850 	bl	8005408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800539e:	2302      	movs	r3, #2
 80053a0:	e02d      	b.n	80053fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2224      	movs	r2, #36	; 0x24
 80053ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f812 	bl	8005408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005410:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8005412:	f107 0314 	add.w	r3, r7, #20
 8005416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800541a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800541e:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005428:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005430:	2b00      	cmp	r3, #0
 8005432:	d108      	bne.n	8005446 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005444:	e03d      	b.n	80054c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005446:	2308      	movs	r3, #8
 8005448:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800544a:	2308      	movs	r3, #8
 800544c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	0e5b      	lsrs	r3, r3, #25
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	0f5b      	lsrs	r3, r3, #29
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800546e:	7fbb      	ldrb	r3, [r7, #30]
 8005470:	7f3a      	ldrb	r2, [r7, #28]
 8005472:	f107 0120 	add.w	r1, r7, #32
 8005476:	440a      	add	r2, r1
 8005478:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	7f3a      	ldrb	r2, [r7, #28]
 8005482:	f107 0120 	add.w	r1, r7, #32
 8005486:	440a      	add	r2, r1
 8005488:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800548c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005498:	7ffb      	ldrb	r3, [r7, #31]
 800549a:	7f7a      	ldrb	r2, [r7, #29]
 800549c:	f107 0120 	add.w	r1, r7, #32
 80054a0:	440a      	add	r2, r1
 80054a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	7f7a      	ldrb	r2, [r7, #29]
 80054ac:	f107 0120 	add.w	r1, r7, #32
 80054b0:	440a      	add	r2, r1
 80054b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80054b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054c2:	bf00      	nop
 80054c4:	3724      	adds	r7, #36	; 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	0800a59c 	.word	0x0800a59c
 80054d4:	0800a5a4 	.word	0x0800a5a4

080054d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d8:	b084      	sub	sp, #16
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	f107 001c 	add.w	r0, r7, #28
 80054e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d122      	bne.n	8005536 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa30 	bl	8005990 <USB_CoreReset>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e01a      	b.n	800556c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa24 	bl	8005990 <USB_CoreReset>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800554c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
 800555e:	e005      	b.n	800556c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005578:	b004      	add	sp, #16
 800557a:	4770      	bx	lr

0800557c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 0201 	bic.w	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	e00b      	b.n	80055e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	e001      	b.n	80055e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e003      	b.n	80055ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055e2:	2032      	movs	r0, #50	; 0x32
 80055e4:	f7fc fb78 	bl	8001cd8 <HAL_Delay>

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f4:	b084      	sub	sp, #16
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e009      	b.n	8005628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3340      	adds	r3, #64	; 0x40
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	2200      	movs	r2, #0
 8005620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0e      	cmp	r3, #14
 800562c:	d9f2      	bls.n	8005614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11c      	bne.n	800566e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e005      	b.n	800567a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005680:	461a      	mov	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	4619      	mov	r1, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	461a      	mov	r2, r3
 8005696:	680b      	ldr	r3, [r1, #0]
 8005698:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800569a:	2103      	movs	r1, #3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f93d 	bl	800591c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056a2:	2110      	movs	r1, #16
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f8f1 	bl	800588c <USB_FlushTxFifo>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f90f 	bl	80058d8 <USB_FlushRxFifo>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	461a      	mov	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e043      	b.n	8005776 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005704:	d118      	bne.n	8005738 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	461a      	mov	r2, r3
 800571a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	e013      	b.n	800574a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	461a      	mov	r2, r3
 8005730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e008      	b.n	800574a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	461a      	mov	r2, r3
 8005758:	2300      	movs	r3, #0
 800575a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	461a      	mov	r2, r3
 800576a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800576e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	3301      	adds	r3, #1
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	429a      	cmp	r2, r3
 800577c:	d3b7      	bcc.n	80056ee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e043      	b.n	800580c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579a:	d118      	bne.n	80057ce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	461a      	mov	r2, r3
 80057b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e013      	b.n	80057e0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	461a      	mov	r2, r3
 80057c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	e008      	b.n	80057e0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057da:	461a      	mov	r2, r3
 80057dc:	2300      	movs	r3, #0
 80057de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	461a      	mov	r2, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	461a      	mov	r2, r3
 8005800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3301      	adds	r3, #1
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d3b7      	bcc.n	8005784 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005826:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005834:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f043 0210 	orr.w	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <USB_DevInit+0x294>)
 8005848:	4313      	orrs	r3, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f043 0208 	orr.w	r2, r3, #8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d107      	bne.n	8005876 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586e:	f043 0304 	orr.w	r3, r3, #4
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005882:	b004      	add	sp, #16
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	803c3800 	.word	0x803c3800

0800588c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <USB_FlushTxFifo+0x48>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d0f0      	beq.n	80058a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	00030d40 	.word	0x00030d40

080058d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2210      	movs	r2, #16
 80058e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <USB_FlushRxFifo+0x40>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d0f0      	beq.n	80058ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	00030d40 	.word	0x00030d40

0800591c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593c:	4313      	orrs	r3, r2
 800593e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005968:	f023 0303 	bic.w	r3, r3, #3
 800596c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <USB_CoreReset+0x64>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d901      	bls.n	80059ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e01b      	b.n	80059e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	daf2      	bge.n	800599c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <USB_CoreReset+0x64>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e006      	b.n	80059e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d0f0      	beq.n	80059c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	00030d40 	.word	0x00030d40

080059f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0e:	f3ef 8305 	mrs	r3, IPSR
 8005a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a26:	f3ef 8311 	mrs	r3, BASEPRI
 8005a2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <osKernelInitialize+0x3a>
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <osKernelInitialize+0x64>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d103      	bne.n	8005a42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005a3a:	f06f 0305 	mvn.w	r3, #5
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e00c      	b.n	8005a5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <osKernelInitialize+0x64>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <osKernelInitialize+0x64>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000204 	.word	0x20000204

08005a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a76:	f3ef 8305 	mrs	r3, IPSR
 8005a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10f      	bne.n	8005aa2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a82:	f3ef 8310 	mrs	r3, PRIMASK
 8005a86:	607b      	str	r3, [r7, #4]
  return(result);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a92:	603b      	str	r3, [r7, #0]
  return(result);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <osKernelStart+0x3a>
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <osKernelStart+0x68>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d103      	bne.n	8005aaa <osKernelStart+0x3a>
    stat = osErrorISR;
 8005aa2:	f06f 0305 	mvn.w	r3, #5
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e010      	b.n	8005acc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <osKernelStart+0x68>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d109      	bne.n	8005ac6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ab2:	f7ff ffa1 	bl	80059f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <osKernelStart+0x68>)
 8005ab8:	2202      	movs	r2, #2
 8005aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005abc:	f001 f870 	bl	8006ba0 <vTaskStartScheduler>
      stat = osOK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e002      	b.n	8005acc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005acc:	68fb      	ldr	r3, [r7, #12]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000204 	.word	0x20000204

08005adc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b090      	sub	sp, #64	; 0x40
 8005ae0:	af04      	add	r7, sp, #16
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aec:	f3ef 8305 	mrs	r3, IPSR
 8005af0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005af2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 808f 	bne.w	8005c18 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b06:	f3ef 8311 	mrs	r3, BASEPRI
 8005b0a:	617b      	str	r3, [r7, #20]
  return(result);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <osThreadNew+0x3e>
 8005b12:	4b44      	ldr	r3, [pc, #272]	; (8005c24 <osThreadNew+0x148>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d07e      	beq.n	8005c18 <osThreadNew+0x13c>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d07b      	beq.n	8005c18 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005b24:	2318      	movs	r3, #24
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d045      	beq.n	8005bc4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <osThreadNew+0x6a>
        name = attr->name;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <osThreadNew+0x90>
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	2b38      	cmp	r3, #56	; 0x38
 8005b5e:	d805      	bhi.n	8005b6c <osThreadNew+0x90>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <osThreadNew+0x94>
        return (NULL);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e054      	b.n	8005c1a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	089b      	lsrs	r3, r3, #2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <osThreadNew+0xca>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b5b      	cmp	r3, #91	; 0x5b
 8005b8e:	d90a      	bls.n	8005ba6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d006      	beq.n	8005ba6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <osThreadNew+0xca>
        mem = 1;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	e010      	b.n	8005bc8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <osThreadNew+0xec>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <osThreadNew+0xec>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <osThreadNew+0xec>
          mem = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	e001      	b.n	8005bc8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d110      	bne.n	8005bf0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bd6:	9202      	str	r2, [sp, #8]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fe09 	bl	80067fc <xTaskCreateStatic>
 8005bea:	4603      	mov	r3, r0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	e013      	b.n	8005c18 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d110      	bne.n	8005c18 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f107 0310 	add.w	r3, r7, #16
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fe51 	bl	80068b0 <xTaskCreate>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d001      	beq.n	8005c18 <osThreadNew+0x13c>
          hTask = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c18:	693b      	ldr	r3, [r7, #16]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3730      	adds	r7, #48	; 0x30
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000204 	.word	0x20000204

08005c28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c30:	f3ef 8305 	mrs	r3, IPSR
 8005c34:	613b      	str	r3, [r7, #16]
  return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10f      	bne.n	8005c5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c48:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <osDelay+0x3c>
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <osDelay+0x58>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d103      	bne.n	8005c64 <osDelay+0x3c>
    stat = osErrorISR;
 8005c5c:	f06f 0305 	mvn.w	r3, #5
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e007      	b.n	8005c74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 ff62 	bl	8006b38 <vTaskDelay>
    }
  }

  return (stat);
 8005c74:	697b      	ldr	r3, [r7, #20]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000204 	.word	0x20000204

08005c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a06      	ldr	r2, [pc, #24]	; (8005cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8005c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2280      	movs	r2, #128	; 0x80
 8005ca0:	601a      	str	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000208 	.word	0x20000208
 8005cb4:	20000264 	.word	0x20000264

08005cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4a06      	ldr	r2, [pc, #24]	; (8005ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8005cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd6:	601a      	str	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	20000464 	.word	0x20000464
 8005ce8:	200004c0 	.word	0x200004c0

08005cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f103 0208 	add.w	r2, r3, #8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295
 8005d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f103 0208 	add.w	r2, r3, #8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 0208 	add.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	601a      	str	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d103      	bne.n	8005dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e00c      	b.n	8005dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3308      	adds	r3, #8
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <vListInsert+0x2e>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d2f6      	bcs.n	8005db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6892      	ldr	r2, [r2, #8]
 8005e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6852      	ldr	r2, [r2, #4]
 8005e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d103      	bne.n	8005e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	e7fe      	b.n	8005e7a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005e7c:	f002 f80e 	bl	8007e9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e88:	68f9      	ldr	r1, [r7, #12]
 8005e8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	441a      	add	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	3b01      	subs	r3, #1
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	22ff      	movs	r2, #255	; 0xff
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	22ff      	movs	r2, #255	; 0xff
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d114      	bne.n	8005efc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01a      	beq.n	8005f10 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3310      	adds	r3, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f8de 	bl	80070a0 <xTaskRemoveFromEventList>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d012      	beq.n	8005f10 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eea:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <xQueueGenericReset+0xcc>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	e009      	b.n	8005f10 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3310      	adds	r3, #16
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fef3 	bl	8005cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3324      	adds	r3, #36	; 0x24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff feee 	bl	8005cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f10:	f001 fff2 	bl	8007ef8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f14:	2301      	movs	r3, #1
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08e      	sub	sp, #56	; 0x38
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <xQueueGenericCreateStatic+0x28>
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4a:	e7fe      	b.n	8005f4a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <xQueueGenericCreateStatic+0x42>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
 8005f64:	e7fe      	b.n	8005f64 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <xQueueGenericCreateStatic+0x4e>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <xQueueGenericCreateStatic+0x52>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <xQueueGenericCreateStatic+0x54>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <xQueueGenericCreateStatic+0x6c>
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	e7fe      	b.n	8005f8e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <xQueueGenericCreateStatic+0x78>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <xQueueGenericCreateStatic+0x7c>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <xQueueGenericCreateStatic+0x7e>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <xQueueGenericCreateStatic+0x96>
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fba:	2350      	movs	r3, #80	; 0x50
 8005fbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b50      	cmp	r3, #80	; 0x50
 8005fc2:	d009      	beq.n	8005fd8 <xQueueGenericCreateStatic+0xb4>
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e7fe      	b.n	8005fd6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00d      	beq.n	8006000 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f805 	bl	800600a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3730      	adds	r7, #48	; 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e002      	b.n	800602c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006038:	2101      	movs	r1, #1
 800603a:	69b8      	ldr	r0, [r7, #24]
 800603c:	f7ff ff0a 	bl	8005e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	; 0x38
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <xQueueGenericSend+0x30>
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
 800607e:	e7fe      	b.n	800607e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <xQueueGenericSend+0x3e>
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <xQueueGenericSend+0x42>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <xQueueGenericSend+0x44>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <xQueueGenericSend+0x5c>
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
 80060aa:	e7fe      	b.n	80060aa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d103      	bne.n	80060ba <xQueueGenericSend+0x6a>
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <xQueueGenericSend+0x6e>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueGenericSend+0x70>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <xQueueGenericSend+0x88>
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	e7fe      	b.n	80060d6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060d8:	f001 f998 	bl	800740c <xTaskGetSchedulerState>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <xQueueGenericSend+0x98>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <xQueueGenericSend+0x9c>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <xQueueGenericSend+0x9e>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <xQueueGenericSend+0xb6>
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e7fe      	b.n	8006104 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006106:	f001 fec9 	bl	8007e9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <xQueueGenericSend+0xcc>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d129      	bne.n	8006170 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 f9ff 	bl	8006524 <prvCopyDataToQueue>
 8006126:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b00      	cmp	r3, #0
 800612e:	d010      	beq.n	8006152 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	4618      	mov	r0, r3
 8006136:	f000 ffb3 	bl	80070a0 <xTaskRemoveFromEventList>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d013      	beq.n	8006168 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006140:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <xQueueGenericSend+0x1f0>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	e00a      	b.n	8006168 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006158:	4b39      	ldr	r3, [pc, #228]	; (8006240 <xQueueGenericSend+0x1f0>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006168:	f001 fec6 	bl	8007ef8 <vPortExitCritical>
				return pdPASS;
 800616c:	2301      	movs	r3, #1
 800616e:	e063      	b.n	8006238 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006176:	f001 febf 	bl	8007ef8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
 800617c:	e05c      	b.n	8006238 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006184:	f107 0314 	add.w	r3, r7, #20
 8006188:	4618      	mov	r0, r3
 800618a:	f000 ffeb 	bl	8007164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800618e:	2301      	movs	r3, #1
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006192:	f001 feb1 	bl	8007ef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006196:	f000 fd67 	bl	8006c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800619a:	f001 fe7f 	bl	8007e9c <vPortEnterCritical>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d103      	bne.n	80061b4 <xQueueGenericSend+0x164>
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d103      	bne.n	80061ca <xQueueGenericSend+0x17a>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ca:	f001 fe95 	bl	8007ef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ce:	1d3a      	adds	r2, r7, #4
 80061d0:	f107 0314 	add.w	r3, r7, #20
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 ffda 	bl	8007190 <xTaskCheckForTimeOut>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d124      	bne.n	800622c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e4:	f000 fa96 	bl	8006714 <prvIsQueueFull>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	3310      	adds	r3, #16
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 ff04 	bl	8007004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061fe:	f000 fa21 	bl	8006644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006202:	f000 fd3f 	bl	8006c84 <xTaskResumeAll>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f af7c 	bne.w	8006106 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <xQueueGenericSend+0x1f0>)
 8006210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	e772      	b.n	8006106 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006222:	f000 fa0f 	bl	8006644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006226:	f000 fd2d 	bl	8006c84 <xTaskResumeAll>
 800622a:	e76c      	b.n	8006106 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800622c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622e:	f000 fa09 	bl	8006644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006232:	f000 fd27 	bl	8006c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006236:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006238:	4618      	mov	r0, r3
 800623a:	3738      	adds	r7, #56	; 0x38
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	; 0x38
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <xQueueGenericSendFromISR+0x2c>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
 800626e:	e7fe      	b.n	800626e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <xQueueGenericSendFromISR+0x3a>
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <xQueueGenericSendFromISR+0x3e>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <xQueueGenericSendFromISR+0x40>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <xQueueGenericSendFromISR+0x58>
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	e7fe      	b.n	800629a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d103      	bne.n	80062aa <xQueueGenericSendFromISR+0x66>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <xQueueGenericSendFromISR+0x6a>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <xQueueGenericSendFromISR+0x6c>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <xQueueGenericSendFromISR+0x84>
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e7fe      	b.n	80062c6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c8:	f001 fec4 	bl	8008054 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062cc:	f3ef 8211 	mrs	r2, BASEPRI
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	61ba      	str	r2, [r7, #24]
 80062e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <xQueueGenericSendFromISR+0xb6>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d12c      	bne.n	8006354 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630a:	f000 f90b 	bl	8006524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800630e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d112      	bne.n	800633e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d016      	beq.n	800634e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	4618      	mov	r0, r3
 8006326:	f000 febb 	bl	80070a0 <xTaskRemoveFromEventList>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e007      	b.n	800634e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800633e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006342:	3301      	adds	r3, #1
 8006344:	b2db      	uxtb	r3, r3
 8006346:	b25a      	sxtb	r2, r3
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800634e:	2301      	movs	r3, #1
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006352:	e001      	b.n	8006358 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006354:	2300      	movs	r3, #0
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006364:	4618      	mov	r0, r3
 8006366:	3738      	adds	r7, #56	; 0x38
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08c      	sub	sp, #48	; 0x30
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <xQueueReceive+0x2e>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	623b      	str	r3, [r7, #32]
 8006398:	e7fe      	b.n	8006398 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <xQueueReceive+0x3c>
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <xQueueReceive+0x40>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <xQueueReceive+0x42>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <xQueueReceive+0x5a>
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e7fe      	b.n	80063c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063c6:	f001 f821 	bl	800740c <xTaskGetSchedulerState>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <xQueueReceive+0x6a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <xQueueReceive+0x6e>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueReceive+0x70>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <xQueueReceive+0x88>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e7fe      	b.n	80063f2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063f4:	f001 fd52 	bl	8007e9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01f      	beq.n	8006444 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006408:	f000 f8f6 	bl	80065f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1e5a      	subs	r2, r3, #1
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00f      	beq.n	800643c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	3310      	adds	r3, #16
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fe3d 	bl	80070a0 <xTaskRemoveFromEventList>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800642c:	4b3c      	ldr	r3, [pc, #240]	; (8006520 <xQueueReceive+0x1b4>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800643c:	f001 fd5c 	bl	8007ef8 <vPortExitCritical>
				return pdPASS;
 8006440:	2301      	movs	r3, #1
 8006442:	e069      	b.n	8006518 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800644a:	f001 fd55 	bl	8007ef8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800644e:	2300      	movs	r3, #0
 8006450:	e062      	b.n	8006518 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fe81 	bl	8007164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006466:	f001 fd47 	bl	8007ef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800646a:	f000 fbfd 	bl	8006c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800646e:	f001 fd15 	bl	8007e9c <vPortEnterCritical>
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006478:	b25b      	sxtb	r3, r3
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d103      	bne.n	8006488 <xQueueReceive+0x11c>
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648e:	b25b      	sxtb	r3, r3
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d103      	bne.n	800649e <xQueueReceive+0x132>
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649e:	f001 fd2b 	bl	8007ef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064a2:	1d3a      	adds	r2, r7, #4
 80064a4:	f107 0310 	add.w	r3, r7, #16
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fe70 	bl	8007190 <xTaskCheckForTimeOut>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d123      	bne.n	80064fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b8:	f000 f916 	bl	80066e8 <prvIsQueueEmpty>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd9a 	bl	8007004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d2:	f000 f8b7 	bl	8006644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064d6:	f000 fbd5 	bl	8006c84 <xTaskResumeAll>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d189      	bne.n	80063f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80064e0:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <xQueueReceive+0x1b4>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	e780      	b.n	80063f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f4:	f000 f8a6 	bl	8006644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f8:	f000 fbc4 	bl	8006c84 <xTaskResumeAll>
 80064fc:	e77a      	b.n	80063f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006500:	f000 f8a0 	bl	8006644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006504:	f000 fbbe 	bl	8006c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650a:	f000 f8ed 	bl	80066e8 <prvIsQueueEmpty>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f43f af6f 	beq.w	80063f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006516:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006518:	4618      	mov	r0, r3
 800651a:	3730      	adds	r7, #48	; 0x30
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d14d      	bne.n	80065e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 ff7a 	bl	8007448 <xTaskPriorityDisinherit>
 8006554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	e043      	b.n	80065e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d119      	bne.n	8006598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6858      	ldr	r0, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	461a      	mov	r2, r3
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	f001 ffae 	bl	80084d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	441a      	add	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d32b      	bcc.n	80065e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	e026      	b.n	80065e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68d8      	ldr	r0, [r3, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	461a      	mov	r2, r3
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	f001 ff94 	bl	80084d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	425b      	negs	r3, r3
 80065b2:	441a      	add	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d207      	bcs.n	80065d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	425b      	negs	r3, r3
 80065ce:	441a      	add	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d105      	bne.n	80065e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065ee:	697b      	ldr	r3, [r7, #20]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d018      	beq.n	800663c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	441a      	add	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	d303      	bcc.n	800662c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68d9      	ldr	r1, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	461a      	mov	r2, r3
 8006636:	6838      	ldr	r0, [r7, #0]
 8006638:	f001 ff4a 	bl	80084d0 <memcpy>
	}
}
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800664c:	f001 fc26 	bl	8007e9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006658:	e011      	b.n	800667e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d012      	beq.n	8006688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3324      	adds	r3, #36	; 0x24
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fd1a 	bl	80070a0 <xTaskRemoveFromEventList>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006672:	f000 fded 	bl	8007250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	3b01      	subs	r3, #1
 800667a:	b2db      	uxtb	r3, r3
 800667c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800667e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006682:	2b00      	cmp	r3, #0
 8006684:	dce9      	bgt.n	800665a <prvUnlockQueue+0x16>
 8006686:	e000      	b.n	800668a <prvUnlockQueue+0x46>
					break;
 8006688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006692:	f001 fc31 	bl	8007ef8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006696:	f001 fc01 	bl	8007e9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066a2:	e011      	b.n	80066c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d012      	beq.n	80066d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3310      	adds	r3, #16
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fcf5 	bl	80070a0 <xTaskRemoveFromEventList>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066bc:	f000 fdc8 	bl	8007250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dce9      	bgt.n	80066a4 <prvUnlockQueue+0x60>
 80066d0:	e000      	b.n	80066d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066dc:	f001 fc0c 	bl	8007ef8 <vPortExitCritical>
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066f0:	f001 fbd4 	bl	8007e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e001      	b.n	8006706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006706:	f001 fbf7 	bl	8007ef8 <vPortExitCritical>

	return xReturn;
 800670a:	68fb      	ldr	r3, [r7, #12]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800671c:	f001 fbbe 	bl	8007e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006728:	429a      	cmp	r2, r3
 800672a:	d102      	bne.n	8006732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e001      	b.n	8006736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006736:	f001 fbdf 	bl	8007ef8 <vPortExitCritical>

	return xReturn;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e014      	b.n	800677e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006754:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <vQueueAddToRegistry+0x4c>)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006760:	490b      	ldr	r1, [pc, #44]	; (8006790 <vQueueAddToRegistry+0x4c>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800676a:	4a09      	ldr	r2, [pc, #36]	; (8006790 <vQueueAddToRegistry+0x4c>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	4413      	add	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006776:	e005      	b.n	8006784 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b07      	cmp	r3, #7
 8006782:	d9e7      	bls.n	8006754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	2000220c 	.word	0x2000220c

08006794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067a4:	f001 fb7a 	bl	8007e9c <vPortEnterCritical>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d103      	bne.n	80067be <vQueueWaitForMessageRestricted+0x2a>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d103      	bne.n	80067d4 <vQueueWaitForMessageRestricted+0x40>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d4:	f001 fb90 	bl	8007ef8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	3324      	adds	r3, #36	; 0x24
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fc2f 	bl	800704c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067ee:	6978      	ldr	r0, [r7, #20]
 80067f0:	f7ff ff28 	bl	8006644 <prvUnlockQueue>
	}
 80067f4:	bf00      	nop
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08e      	sub	sp, #56	; 0x38
 8006800:	af04      	add	r7, sp, #16
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <xTaskCreateStatic+0x28>
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	e7fe      	b.n	8006822 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <xTaskCreateStatic+0x42>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e7fe      	b.n	800683c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800683e:	235c      	movs	r3, #92	; 0x5c
 8006840:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b5c      	cmp	r3, #92	; 0x5c
 8006846:	d009      	beq.n	800685c <xTaskCreateStatic+0x60>
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	e7fe      	b.n	800685a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800685c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01e      	beq.n	80068a2 <xTaskCreateStatic+0xa6>
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006872:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800687c:	2300      	movs	r3, #0
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f850 	bl	800693a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800689a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800689c:	f000 f8dc 	bl	8006a58 <prvAddNewTaskToReadyList>
 80068a0:	e001      	b.n	80068a6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068a6:	697b      	ldr	r3, [r7, #20]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	; 0x30
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fc03 	bl	80080d0 <pvPortMalloc>
 80068ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d2:	205c      	movs	r0, #92	; 0x5c
 80068d4:	f001 fbfc 	bl	80080d0 <pvPortMalloc>
 80068d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
 80068e6:	e005      	b.n	80068f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	f001 fcb3 	bl	8008254 <vPortFree>
 80068ee:	e001      	b.n	80068f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d017      	beq.n	800692a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	2300      	movs	r3, #0
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	9302      	str	r3, [sp, #8]
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f80e 	bl	800693a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800691e:	69f8      	ldr	r0, [r7, #28]
 8006920:	f000 f89a 	bl	8006a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e002      	b.n	8006930 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006930:	69bb      	ldr	r3, [r7, #24]
	}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b088      	sub	sp, #32
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	461a      	mov	r2, r3
 8006952:	21a5      	movs	r1, #165	; 0xa5
 8006954:	f001 fdc7 	bl	80084e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006962:	3b01      	subs	r3, #1
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f023 0307 	bic.w	r3, r3, #7
 8006970:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <prvInitialiseNewTask+0x56>
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e7fe      	b.n	800698e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01f      	beq.n	80069d6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006996:	2300      	movs	r3, #0
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e012      	b.n	80069c2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	7819      	ldrb	r1, [r3, #0]
 80069a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	3334      	adds	r3, #52	; 0x34
 80069ac:	460a      	mov	r2, r1
 80069ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3301      	adds	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	2b0f      	cmp	r3, #15
 80069c6:	d9e9      	bls.n	800699c <prvInitialiseNewTask+0x62>
 80069c8:	e000      	b.n	80069cc <prvInitialiseNewTask+0x92>
			{
				break;
 80069ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069d4:	e003      	b.n	80069de <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	2b37      	cmp	r3, #55	; 0x37
 80069e2:	d901      	bls.n	80069e8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069e4:	2337      	movs	r3, #55	; 0x37
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2200      	movs	r2, #0
 80069f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	3304      	adds	r3, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff f994 	bl	8005d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	3318      	adds	r3, #24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff f98f 	bl	8005d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	69b8      	ldr	r0, [r7, #24]
 8006a38:	f001 f90c 	bl	8007c54 <pxPortInitialiseStack>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4e:	bf00      	nop
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a60:	f001 fa1c 	bl	8007e9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a64:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <prvAddNewTaskToReadyList+0xc4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <prvAddNewTaskToReadyList+0xc4>)
 8006a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <prvAddNewTaskToReadyList+0xc8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a76:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <prvAddNewTaskToReadyList+0xc8>)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a7c:	4b27      	ldr	r3, [pc, #156]	; (8006b1c <prvAddNewTaskToReadyList+0xc4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d110      	bne.n	8006aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a84:	f000 fc08 	bl	8007298 <prvInitialiseTaskLists>
 8006a88:	e00d      	b.n	8006aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a8a:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <prvAddNewTaskToReadyList+0xcc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a92:	4b23      	ldr	r3, [pc, #140]	; (8006b20 <prvAddNewTaskToReadyList+0xc8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d802      	bhi.n	8006aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006aa0:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <prvAddNewTaskToReadyList+0xc8>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <prvAddNewTaskToReadyList+0xd0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <prvAddNewTaskToReadyList+0xd0>)
 8006aae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ab0:	4b1d      	ldr	r3, [pc, #116]	; (8006b28 <prvAddNewTaskToReadyList+0xd0>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <prvAddNewTaskToReadyList+0xd4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d903      	bls.n	8006acc <prvAddNewTaskToReadyList+0x74>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <prvAddNewTaskToReadyList+0xd4>)
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <prvAddNewTaskToReadyList+0xd8>)
 8006ada:	441a      	add	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7ff f92f 	bl	8005d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ae8:	f001 fa06 	bl	8007ef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006aec:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <prvAddNewTaskToReadyList+0xcc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00e      	beq.n	8006b12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <prvAddNewTaskToReadyList+0xc8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d207      	bcs.n	8006b12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <prvAddNewTaskToReadyList+0xdc>)
 8006b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000d94 	.word	0x20000d94
 8006b20:	200008c0 	.word	0x200008c0
 8006b24:	20000da0 	.word	0x20000da0
 8006b28:	20000db0 	.word	0x20000db0
 8006b2c:	20000d9c 	.word	0x20000d9c
 8006b30:	200008c4 	.word	0x200008c4
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b4a:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <vTaskDelay+0x60>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <vTaskDelay+0x2e>
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60bb      	str	r3, [r7, #8]
 8006b64:	e7fe      	b.n	8006b64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006b66:	f000 f87f 	bl	8006c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fcd7 	bl	8007520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b72:	f000 f887 	bl	8006c84 <xTaskResumeAll>
 8006b76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d107      	bne.n	8006b8e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <vTaskDelay+0x64>)
 8006b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000dbc 	.word	0x20000dbc
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bae:	463a      	mov	r2, r7
 8006bb0:	1d39      	adds	r1, r7, #4
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff f864 	bl	8005c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	9202      	str	r2, [sp, #8]
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	460a      	mov	r2, r1
 8006bce:	4920      	ldr	r1, [pc, #128]	; (8006c50 <vTaskStartScheduler+0xb0>)
 8006bd0:	4820      	ldr	r0, [pc, #128]	; (8006c54 <vTaskStartScheduler+0xb4>)
 8006bd2:	f7ff fe13 	bl	80067fc <xTaskCreateStatic>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <vTaskStartScheduler+0xb8>)
 8006bda:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bdc:	4b1e      	ldr	r3, [pc, #120]	; (8006c58 <vTaskStartScheduler+0xb8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e001      	b.n	8006bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bf4:	f000 fce8 	bl	80075c8 <xTimerCreateTimerTask>
 8006bf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d115      	bne.n	8006c2c <vTaskStartScheduler+0x8c>
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <vTaskStartScheduler+0xbc>)
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295
 8006c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c1a:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <vTaskStartScheduler+0xc0>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c20:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <vTaskStartScheduler+0xc4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c26:	f001 f89b 	bl	8007d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c2a:	e00d      	b.n	8006c48 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d109      	bne.n	8006c48 <vTaskStartScheduler+0xa8>
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e7fe      	b.n	8006c46 <vTaskStartScheduler+0xa6>
}
 8006c48:	bf00      	nop
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	0800a5ac 	.word	0x0800a5ac
 8006c54:	08007269 	.word	0x08007269
 8006c58:	20000db8 	.word	0x20000db8
 8006c5c:	20000db4 	.word	0x20000db4
 8006c60:	20000da0 	.word	0x20000da0
 8006c64:	20000d98 	.word	0x20000d98

08006c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <vTaskSuspendAll+0x18>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a03      	ldr	r2, [pc, #12]	; (8006c80 <vTaskSuspendAll+0x18>)
 8006c74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c76:	bf00      	nop
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000dbc 	.word	0x20000dbc

08006c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c92:	4b41      	ldr	r3, [pc, #260]	; (8006d98 <xTaskResumeAll+0x114>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <xTaskResumeAll+0x2a>
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	e7fe      	b.n	8006cac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cae:	f001 f8f5 	bl	8007e9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cb2:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <xTaskResumeAll+0x114>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	4a37      	ldr	r2, [pc, #220]	; (8006d98 <xTaskResumeAll+0x114>)
 8006cba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <xTaskResumeAll+0x114>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d162      	bne.n	8006d8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cc4:	4b35      	ldr	r3, [pc, #212]	; (8006d9c <xTaskResumeAll+0x118>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05e      	beq.n	8006d8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ccc:	e02f      	b.n	8006d2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cce:	4b34      	ldr	r3, [pc, #208]	; (8006da0 <xTaskResumeAll+0x11c>)
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3318      	adds	r3, #24
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff f890 	bl	8005e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff f88b 	bl	8005e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <xTaskResumeAll+0x120>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d903      	bls.n	8006cfe <xTaskResumeAll+0x7a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	4a2a      	ldr	r2, [pc, #168]	; (8006da4 <xTaskResumeAll+0x120>)
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <xTaskResumeAll+0x124>)
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3304      	adds	r3, #4
 8006d12:	4619      	mov	r1, r3
 8006d14:	4610      	mov	r0, r2
 8006d16:	f7ff f816 	bl	8005d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	4b23      	ldr	r3, [pc, #140]	; (8006dac <xTaskResumeAll+0x128>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d28:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <xTaskResumeAll+0x12c>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d2e:	4b1c      	ldr	r3, [pc, #112]	; (8006da0 <xTaskResumeAll+0x11c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1cb      	bne.n	8006cce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d3c:	f000 fb46 	bl	80073cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d40:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <xTaskResumeAll+0x130>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d4c:	f000 f846 	bl	8006ddc <xTaskIncrementTick>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d56:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <xTaskResumeAll+0x12c>)
 8006d58:	2201      	movs	r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f1      	bne.n	8006d4c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d68:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <xTaskResumeAll+0x130>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <xTaskResumeAll+0x12c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <xTaskResumeAll+0x134>)
 8006d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d8a:	f001 f8b5 	bl	8007ef8 <vPortExitCritical>

	return xAlreadyYielded;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000dbc 	.word	0x20000dbc
 8006d9c:	20000d94 	.word	0x20000d94
 8006da0:	20000d54 	.word	0x20000d54
 8006da4:	20000d9c 	.word	0x20000d9c
 8006da8:	200008c4 	.word	0x200008c4
 8006dac:	200008c0 	.word	0x200008c0
 8006db0:	20000da8 	.word	0x20000da8
 8006db4:	20000da4 	.word	0x20000da4
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <xTaskGetTickCount+0x1c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dc8:	687b      	ldr	r3, [r7, #4]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000d98 	.word	0x20000d98

08006ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de6:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <xTaskIncrementTick+0x144>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 8088 	bne.w	8006f00 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006df0:	4b4c      	ldr	r3, [pc, #304]	; (8006f24 <xTaskIncrementTick+0x148>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006df8:	4a4a      	ldr	r2, [pc, #296]	; (8006f24 <xTaskIncrementTick+0x148>)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d11f      	bne.n	8006e44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e04:	4b48      	ldr	r3, [pc, #288]	; (8006f28 <xTaskIncrementTick+0x14c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <xTaskIncrementTick+0x46>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	e7fe      	b.n	8006e20 <xTaskIncrementTick+0x44>
 8006e22:	4b41      	ldr	r3, [pc, #260]	; (8006f28 <xTaskIncrementTick+0x14c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <xTaskIncrementTick+0x150>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a3e      	ldr	r2, [pc, #248]	; (8006f28 <xTaskIncrementTick+0x14c>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	4a3e      	ldr	r2, [pc, #248]	; (8006f2c <xTaskIncrementTick+0x150>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <xTaskIncrementTick+0x154>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	4a3c      	ldr	r2, [pc, #240]	; (8006f30 <xTaskIncrementTick+0x154>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	f000 fac4 	bl	80073cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e44:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d349      	bcc.n	8006ee2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <xTaskIncrementTick+0x14c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e58:	4b36      	ldr	r3, [pc, #216]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	601a      	str	r2, [r3, #0]
					break;
 8006e60:	e03f      	b.n	8006ee2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e62:	4b31      	ldr	r3, [pc, #196]	; (8006f28 <xTaskIncrementTick+0x14c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d203      	bcs.n	8006e82 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e7a:	4a2e      	ldr	r2, [pc, #184]	; (8006f34 <xTaskIncrementTick+0x158>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e80:	e02f      	b.n	8006ee2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe ffba 	bl	8005e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3318      	adds	r3, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe ffb1 	bl	8005e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea2:	4b25      	ldr	r3, [pc, #148]	; (8006f38 <xTaskIncrementTick+0x15c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d903      	bls.n	8006eb2 <xTaskIncrementTick+0xd6>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <xTaskIncrementTick+0x15c>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <xTaskIncrementTick+0x160>)
 8006ec0:	441a      	add	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f7fe ff3c 	bl	8005d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <xTaskIncrementTick+0x164>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d3b8      	bcc.n	8006e4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee0:	e7b5      	b.n	8006e4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <xTaskIncrementTick+0x164>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4914      	ldr	r1, [pc, #80]	; (8006f3c <xTaskIncrementTick+0x160>)
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d907      	bls.n	8006f0a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e004      	b.n	8006f0a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <xTaskIncrementTick+0x168>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	4a0f      	ldr	r2, [pc, #60]	; (8006f44 <xTaskIncrementTick+0x168>)
 8006f08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <xTaskIncrementTick+0x16c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f16:	697b      	ldr	r3, [r7, #20]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000dbc 	.word	0x20000dbc
 8006f24:	20000d98 	.word	0x20000d98
 8006f28:	20000d4c 	.word	0x20000d4c
 8006f2c:	20000d50 	.word	0x20000d50
 8006f30:	20000dac 	.word	0x20000dac
 8006f34:	20000db4 	.word	0x20000db4
 8006f38:	20000d9c 	.word	0x20000d9c
 8006f3c:	200008c4 	.word	0x200008c4
 8006f40:	200008c0 	.word	0x200008c0
 8006f44:	20000da4 	.word	0x20000da4
 8006f48:	20000da8 	.word	0x20000da8

08006f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f52:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <vTaskSwitchContext+0xa4>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f5a:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <vTaskSwitchContext+0xa8>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f60:	e040      	b.n	8006fe4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <vTaskSwitchContext+0xa8>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f68:	4b23      	ldr	r3, [pc, #140]	; (8006ff8 <vTaskSwitchContext+0xac>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	e00f      	b.n	8006f90 <vTaskSwitchContext+0x44>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <vTaskSwitchContext+0x3e>
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	e7fe      	b.n	8006f88 <vTaskSwitchContext+0x3c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	491a      	ldr	r1, [pc, #104]	; (8006ffc <vTaskSwitchContext+0xb0>)
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0e5      	beq.n	8006f70 <vTaskSwitchContext+0x24>
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <vTaskSwitchContext+0xb0>)
 8006fb0:	4413      	add	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d104      	bne.n	8006fd4 <vTaskSwitchContext+0x88>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	4a09      	ldr	r2, [pc, #36]	; (8007000 <vTaskSwitchContext+0xb4>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4a06      	ldr	r2, [pc, #24]	; (8006ff8 <vTaskSwitchContext+0xac>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6013      	str	r3, [r2, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	20000dbc 	.word	0x20000dbc
 8006ff4:	20000da8 	.word	0x20000da8
 8006ff8:	20000d9c 	.word	0x20000d9c
 8006ffc:	200008c4 	.word	0x200008c4
 8007000:	200008c0 	.word	0x200008c0

08007004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <vTaskPlaceOnEventList+0x24>
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e7fe      	b.n	8007026 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007028:	4b07      	ldr	r3, [pc, #28]	; (8007048 <vTaskPlaceOnEventList+0x44>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3318      	adds	r3, #24
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe feac 	bl	8005d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007036:	2101      	movs	r1, #1
 8007038:	6838      	ldr	r0, [r7, #0]
 800703a:	f000 fa71 	bl	8007520 <prvAddCurrentTaskToDelayedList>
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200008c0 	.word	0x200008c0

0800704c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <vTaskPlaceOnEventListRestricted+0x26>
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e7fe      	b.n	8007070 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007072:	4b0a      	ldr	r3, [pc, #40]	; (800709c <vTaskPlaceOnEventListRestricted+0x50>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3318      	adds	r3, #24
 8007078:	4619      	mov	r1, r3
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7fe fe63 	bl	8005d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007086:	f04f 33ff 	mov.w	r3, #4294967295
 800708a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	68b8      	ldr	r0, [r7, #8]
 8007090:	f000 fa46 	bl	8007520 <prvAddCurrentTaskToDelayedList>
	}
 8007094:	bf00      	nop
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	200008c0 	.word	0x200008c0

080070a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <xTaskRemoveFromEventList+0x2a>
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e7fe      	b.n	80070c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3318      	adds	r3, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fe96 	bl	8005e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <xTaskRemoveFromEventList+0xac>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11d      	bne.n	8007118 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	3304      	adds	r3, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fe8d 	bl	8005e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	4b19      	ldr	r3, [pc, #100]	; (8007150 <xTaskRemoveFromEventList+0xb0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d903      	bls.n	80070fa <xTaskRemoveFromEventList+0x5a>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	4a16      	ldr	r2, [pc, #88]	; (8007150 <xTaskRemoveFromEventList+0xb0>)
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a13      	ldr	r2, [pc, #76]	; (8007154 <xTaskRemoveFromEventList+0xb4>)
 8007108:	441a      	add	r2, r3
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f7fe fe18 	bl	8005d46 <vListInsertEnd>
 8007116:	e005      	b.n	8007124 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	3318      	adds	r3, #24
 800711c:	4619      	mov	r1, r3
 800711e:	480e      	ldr	r0, [pc, #56]	; (8007158 <xTaskRemoveFromEventList+0xb8>)
 8007120:	f7fe fe11 	bl	8005d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <xTaskRemoveFromEventList+0xbc>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d905      	bls.n	800713e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <xTaskRemoveFromEventList+0xc0>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	e001      	b.n	8007142 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007142:	697b      	ldr	r3, [r7, #20]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000dbc 	.word	0x20000dbc
 8007150:	20000d9c 	.word	0x20000d9c
 8007154:	200008c4 	.word	0x200008c4
 8007158:	20000d54 	.word	0x20000d54
 800715c:	200008c0 	.word	0x200008c0
 8007160:	20000da8 	.word	0x20000da8

08007164 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <vTaskInternalSetTimeOutState+0x24>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <vTaskInternalSetTimeOutState+0x28>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	605a      	str	r2, [r3, #4]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20000dac 	.word	0x20000dac
 800718c:	20000d98 	.word	0x20000d98

08007190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <xTaskCheckForTimeOut+0x24>
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e7fe      	b.n	80071b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <xTaskCheckForTimeOut+0x3e>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e7fe      	b.n	80071cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071ce:	f000 fe65 	bl	8007e9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071d2:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <xTaskCheckForTimeOut+0xb8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d102      	bne.n	80071f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e023      	b.n	800723a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <xTaskCheckForTimeOut+0xbc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d007      	beq.n	800720e <xTaskCheckForTimeOut+0x7e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	429a      	cmp	r2, r3
 8007206:	d302      	bcc.n	800720e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	e015      	b.n	800723a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	d20b      	bcs.n	8007230 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff ff9d 	bl	8007164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e004      	b.n	800723a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800723a:	f000 fe5d 	bl	8007ef8 <vPortExitCritical>

	return xReturn;
 800723e:	69fb      	ldr	r3, [r7, #28]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20000d98 	.word	0x20000d98
 800724c:	20000dac 	.word	0x20000dac

08007250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <vTaskMissedYield+0x14>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	20000da8 	.word	0x20000da8

08007268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007270:	f000 f852 	bl	8007318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <prvIdleTask+0x28>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d9f9      	bls.n	8007270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <prvIdleTask+0x2c>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800728c:	e7f0      	b.n	8007270 <prvIdleTask+0x8>
 800728e:	bf00      	nop
 8007290:	200008c4 	.word	0x200008c4
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	e00c      	b.n	80072be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <prvInitialiseTaskLists+0x60>)
 80072b0:	4413      	add	r3, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fd1a 	bl	8005cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3301      	adds	r3, #1
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b37      	cmp	r3, #55	; 0x37
 80072c2:	d9ef      	bls.n	80072a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072c4:	480d      	ldr	r0, [pc, #52]	; (80072fc <prvInitialiseTaskLists+0x64>)
 80072c6:	f7fe fd11 	bl	8005cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072ca:	480d      	ldr	r0, [pc, #52]	; (8007300 <prvInitialiseTaskLists+0x68>)
 80072cc:	f7fe fd0e 	bl	8005cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072d0:	480c      	ldr	r0, [pc, #48]	; (8007304 <prvInitialiseTaskLists+0x6c>)
 80072d2:	f7fe fd0b 	bl	8005cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072d6:	480c      	ldr	r0, [pc, #48]	; (8007308 <prvInitialiseTaskLists+0x70>)
 80072d8:	f7fe fd08 	bl	8005cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072dc:	480b      	ldr	r0, [pc, #44]	; (800730c <prvInitialiseTaskLists+0x74>)
 80072de:	f7fe fd05 	bl	8005cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072e2:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <prvInitialiseTaskLists+0x78>)
 80072e4:	4a05      	ldr	r2, [pc, #20]	; (80072fc <prvInitialiseTaskLists+0x64>)
 80072e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <prvInitialiseTaskLists+0x7c>)
 80072ea:	4a05      	ldr	r2, [pc, #20]	; (8007300 <prvInitialiseTaskLists+0x68>)
 80072ec:	601a      	str	r2, [r3, #0]
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	200008c4 	.word	0x200008c4
 80072fc:	20000d24 	.word	0x20000d24
 8007300:	20000d38 	.word	0x20000d38
 8007304:	20000d54 	.word	0x20000d54
 8007308:	20000d68 	.word	0x20000d68
 800730c:	20000d80 	.word	0x20000d80
 8007310:	20000d4c 	.word	0x20000d4c
 8007314:	20000d50 	.word	0x20000d50

08007318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800731e:	e019      	b.n	8007354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007320:	f000 fdbc 	bl	8007e9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007324:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <prvCheckTasksWaitingTermination+0x4c>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3304      	adds	r3, #4
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fd65 	bl	8005e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <prvCheckTasksWaitingTermination+0x50>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3b01      	subs	r3, #1
 800733c:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <prvCheckTasksWaitingTermination+0x50>)
 800733e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <prvCheckTasksWaitingTermination+0x54>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3b01      	subs	r3, #1
 8007346:	4a09      	ldr	r2, [pc, #36]	; (800736c <prvCheckTasksWaitingTermination+0x54>)
 8007348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800734a:	f000 fdd5 	bl	8007ef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f80e 	bl	8007370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <prvCheckTasksWaitingTermination+0x54>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e1      	bne.n	8007320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000d68 	.word	0x20000d68
 8007368:	20000d94 	.word	0x20000d94
 800736c:	20000d7c 	.word	0x20000d7c

08007370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800737e:	2b00      	cmp	r3, #0
 8007380:	d108      	bne.n	8007394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	4618      	mov	r0, r3
 8007388:	f000 ff64 	bl	8008254 <vPortFree>
				vPortFree( pxTCB );
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 ff61 	bl	8008254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007392:	e017      	b.n	80073c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800739a:	2b01      	cmp	r3, #1
 800739c:	d103      	bne.n	80073a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 ff58 	bl	8008254 <vPortFree>
	}
 80073a4:	e00e      	b.n	80073c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d009      	beq.n	80073c4 <prvDeleteTCB+0x54>
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	e7fe      	b.n	80073c2 <prvDeleteTCB+0x52>
	}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <prvResetNextTaskUnblockTime+0x38>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <prvResetNextTaskUnblockTime+0x3c>)
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073e4:	e008      	b.n	80073f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <prvResetNextTaskUnblockTime+0x38>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4a04      	ldr	r2, [pc, #16]	; (8007408 <prvResetNextTaskUnblockTime+0x3c>)
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	20000d4c 	.word	0x20000d4c
 8007408:	20000db4 	.word	0x20000db4

0800740c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <xTaskGetSchedulerState+0x34>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800741a:	2301      	movs	r3, #1
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	e008      	b.n	8007432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <xTaskGetSchedulerState+0x38>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007428:	2302      	movs	r3, #2
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	e001      	b.n	8007432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007432:	687b      	ldr	r3, [r7, #4]
	}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	20000da0 	.word	0x20000da0
 8007444:	20000dbc 	.word	0x20000dbc

08007448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d054      	beq.n	8007508 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800745e:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <xTaskPriorityDisinherit+0xcc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d009      	beq.n	800747c <xTaskPriorityDisinherit+0x34>
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	e7fe      	b.n	800747a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <xTaskPriorityDisinherit+0x50>
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60bb      	str	r3, [r7, #8]
 8007496:	e7fe      	b.n	8007496 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	1e5a      	subs	r2, r3, #1
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d02c      	beq.n	8007508 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d128      	bne.n	8007508 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fca0 	bl	8005e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <xTaskPriorityDisinherit+0xd0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d903      	bls.n	80074e8 <xTaskPriorityDisinherit+0xa0>
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4a0c      	ldr	r2, [pc, #48]	; (8007518 <xTaskPriorityDisinherit+0xd0>)
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4a09      	ldr	r2, [pc, #36]	; (800751c <xTaskPriorityDisinherit+0xd4>)
 80074f6:	441a      	add	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f7fe fc21 	bl	8005d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007508:	697b      	ldr	r3, [r7, #20]
	}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	200008c0 	.word	0x200008c0
 8007518:	20000d9c 	.word	0x20000d9c
 800751c:	200008c4 	.word	0x200008c4

08007520 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800752a:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007530:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fc62 	bl	8005e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d10a      	bne.n	800755a <prvAddCurrentTaskToDelayedList+0x3a>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800754a:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4819      	ldr	r0, [pc, #100]	; (80075b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007554:	f7fe fbf7 	bl	8005d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007558:	e026      	b.n	80075a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4413      	add	r3, r2
 8007560:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007562:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	429a      	cmp	r2, r3
 8007570:	d209      	bcs.n	8007586 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7fe fc05 	bl	8005d8e <vListInsert>
}
 8007584:	e010      	b.n	80075a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007586:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7fe fbfb 	bl	8005d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d202      	bcs.n	80075a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075a2:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6013      	str	r3, [r2, #0]
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000d98 	.word	0x20000d98
 80075b4:	200008c0 	.word	0x200008c0
 80075b8:	20000d80 	.word	0x20000d80
 80075bc:	20000d50 	.word	0x20000d50
 80075c0:	20000d4c 	.word	0x20000d4c
 80075c4:	20000db4 	.word	0x20000db4

080075c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075d2:	f000 faff 	bl	8007bd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075d6:	4b1c      	ldr	r3, [pc, #112]	; (8007648 <xTimerCreateTimerTask+0x80>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d021      	beq.n	8007622 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075e6:	1d3a      	adds	r2, r7, #4
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	f107 030c 	add.w	r3, r7, #12
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fb61 	bl	8005cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	9202      	str	r2, [sp, #8]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	2302      	movs	r3, #2
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	460a      	mov	r2, r1
 8007608:	4910      	ldr	r1, [pc, #64]	; (800764c <xTimerCreateTimerTask+0x84>)
 800760a:	4811      	ldr	r0, [pc, #68]	; (8007650 <xTimerCreateTimerTask+0x88>)
 800760c:	f7ff f8f6 	bl	80067fc <xTaskCreateStatic>
 8007610:	4602      	mov	r2, r0
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <xTimerCreateTimerTask+0x8c>)
 8007614:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <xTimerCreateTimerTask+0x8c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800761e:	2301      	movs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <xTimerCreateTimerTask+0x74>
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	e7fe      	b.n	800763a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800763c:	697b      	ldr	r3, [r7, #20]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000df0 	.word	0x20000df0
 800764c:	0800a5b4 	.word	0x0800a5b4
 8007650:	08007789 	.word	0x08007789
 8007654:	20000df4 	.word	0x20000df4

08007658 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007666:	2300      	movs	r3, #0
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <xTimerGenericCommand+0x2c>
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	623b      	str	r3, [r7, #32]
 8007682:	e7fe      	b.n	8007682 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <xTimerGenericCommand+0x94>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d02a      	beq.n	80076e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b05      	cmp	r3, #5
 800769c:	dc18      	bgt.n	80076d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800769e:	f7ff feb5 	bl	800740c <xTaskGetSchedulerState>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d109      	bne.n	80076bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076a8:	4b10      	ldr	r3, [pc, #64]	; (80076ec <xTimerGenericCommand+0x94>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	f107 0110 	add.w	r1, r7, #16
 80076b0:	2300      	movs	r3, #0
 80076b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b4:	f7fe fccc 	bl	8006050 <xQueueGenericSend>
 80076b8:	6278      	str	r0, [r7, #36]	; 0x24
 80076ba:	e012      	b.n	80076e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076bc:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <xTimerGenericCommand+0x94>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	f107 0110 	add.w	r1, r7, #16
 80076c4:	2300      	movs	r3, #0
 80076c6:	2200      	movs	r2, #0
 80076c8:	f7fe fcc2 	bl	8006050 <xQueueGenericSend>
 80076cc:	6278      	str	r0, [r7, #36]	; 0x24
 80076ce:	e008      	b.n	80076e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <xTimerGenericCommand+0x94>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	f107 0110 	add.w	r1, r7, #16
 80076d8:	2300      	movs	r3, #0
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	f7fe fdb2 	bl	8006244 <xQueueGenericSendFromISR>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3728      	adds	r7, #40	; 0x28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000df0 	.word	0x20000df0

080076f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fa:	4b22      	ldr	r3, [pc, #136]	; (8007784 <prvProcessExpiredTimer+0x94>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fb79 	bl	8005e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d021      	beq.n	8007760 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	18d1      	adds	r1, r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	6978      	ldr	r0, [r7, #20]
 800772a:	f000 f8d1 	bl	80078d0 <prvInsertTimerInActiveList>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01e      	beq.n	8007772 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007734:	2300      	movs	r3, #0
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	2300      	movs	r3, #0
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	2100      	movs	r1, #0
 800773e:	6978      	ldr	r0, [r7, #20]
 8007740:	f7ff ff8a 	bl	8007658 <xTimerGenericCommand>
 8007744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d112      	bne.n	8007772 <prvProcessExpiredTimer+0x82>
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e7fe      	b.n	800775e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	b2da      	uxtb	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	6978      	ldr	r0, [r7, #20]
 8007778:	4798      	blx	r3
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000de8 	.word	0x20000de8

08007788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f857 	bl	8007848 <prvGetNextExpireTime>
 800779a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f803 	bl	80077ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077a6:	f000 f8d5 	bl	8007954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077aa:	e7f1      	b.n	8007790 <prvTimerTask+0x8>

080077ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077b6:	f7ff fa57 	bl	8006c68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f866 	bl	8007890 <prvSampleTimeNow>
 80077c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d130      	bne.n	800782e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <prvProcessTimerOrBlockTask+0x3c>
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d806      	bhi.n	80077e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077da:	f7ff fa53 	bl	8006c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff85 	bl	80076f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077e6:	e024      	b.n	8007832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <prvProcessTimerOrBlockTask+0x90>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <prvProcessTimerOrBlockTask+0x50>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <prvProcessTimerOrBlockTask+0x52>
 80077fc:	2300      	movs	r3, #0
 80077fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <prvProcessTimerOrBlockTask+0x94>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	f7fe ffc1 	bl	8006794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007812:	f7ff fa37 	bl	8006c84 <xTaskResumeAll>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <prvProcessTimerOrBlockTask+0x98>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
}
 800782c:	e001      	b.n	8007832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800782e:	f7ff fa29 	bl	8006c84 <xTaskResumeAll>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000dec 	.word	0x20000dec
 8007840:	20000df0 	.word	0x20000df0
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007850:	4b0e      	ldr	r3, [pc, #56]	; (800788c <prvGetNextExpireTime+0x44>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <prvGetNextExpireTime+0x16>
 800785a:	2201      	movs	r2, #1
 800785c:	e000      	b.n	8007860 <prvGetNextExpireTime+0x18>
 800785e:	2200      	movs	r2, #0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <prvGetNextExpireTime+0x44>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e001      	b.n	800787c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800787c:	68fb      	ldr	r3, [r7, #12]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20000de8 	.word	0x20000de8

08007890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007898:	f7ff fa90 	bl	8006dbc <xTaskGetTickCount>
 800789c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <prvSampleTimeNow+0x3c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d205      	bcs.n	80078b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078a8:	f000 f930 	bl	8007b0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	e002      	b.n	80078ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078ba:	4a04      	ldr	r2, [pc, #16]	; (80078cc <prvSampleTimeNow+0x3c>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078c0:	68fb      	ldr	r3, [r7, #12]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000df8 	.word	0x20000df8

080078d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d812      	bhi.n	800791c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	d302      	bcc.n	800790a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007904:	2301      	movs	r3, #1
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	e01b      	b.n	8007942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <prvInsertTimerInActiveList+0x7c>)
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7fe fa3a 	bl	8005d8e <vListInsert>
 800791a:	e012      	b.n	8007942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d206      	bcs.n	8007932 <prvInsertTimerInActiveList+0x62>
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d302      	bcc.n	8007932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e007      	b.n	8007942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <prvInsertTimerInActiveList+0x80>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3304      	adds	r3, #4
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f7fe fa26 	bl	8005d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007942:	697b      	ldr	r3, [r7, #20]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000dec 	.word	0x20000dec
 8007950:	20000de8 	.word	0x20000de8

08007954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08e      	sub	sp, #56	; 0x38
 8007958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800795a:	e0c6      	b.n	8007aea <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da17      	bge.n	8007992 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007962:	1d3b      	adds	r3, r7, #4
 8007964:	3304      	adds	r3, #4
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <prvProcessReceivedCommands+0x2e>
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	e7fe      	b.n	8007980 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007988:	6850      	ldr	r0, [r2, #4]
 800798a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798c:	6892      	ldr	r2, [r2, #8]
 800798e:	4611      	mov	r1, r2
 8007990:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f2c0 80a7 	blt.w	8007ae8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	3304      	adds	r3, #4
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fa28 	bl	8005e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079b0:	463b      	mov	r3, r7
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff ff6c 	bl	8007890 <prvSampleTimeNow>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b09      	cmp	r3, #9
 80079be:	f200 8094 	bhi.w	8007aea <prvProcessReceivedCommands+0x196>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <prvProcessReceivedCommands+0x74>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	08007a63 	.word	0x08007a63
 80079d8:	08007a77 	.word	0x08007a77
 80079dc:	08007abf 	.word	0x08007abf
 80079e0:	080079f1 	.word	0x080079f1
 80079e4:	080079f1 	.word	0x080079f1
 80079e8:	08007a63 	.word	0x08007a63
 80079ec:	08007a77 	.word	0x08007a77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	18d1      	adds	r1, r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a10:	f7ff ff5e 	bl	80078d0 <prvInsertTimerInActiveList>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d067      	beq.n	8007aea <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d05c      	beq.n	8007aea <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	441a      	add	r2, r3
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a42:	f7ff fe09 	bl	8007658 <xTimerGenericCommand>
 8007a46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d14d      	bne.n	8007aea <prvProcessReceivedCommands+0x196>
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	61bb      	str	r3, [r7, #24]
 8007a60:	e7fe      	b.n	8007a60 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007a74:	e039      	b.n	8007aea <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a7c:	f043 0301 	orr.w	r3, r3, #1
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d109      	bne.n	8007aaa <prvProcessReceivedCommands+0x156>
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e7fe      	b.n	8007aa8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	18d1      	adds	r1, r2, r3
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab8:	f7ff ff0a 	bl	80078d0 <prvInsertTimerInActiveList>
					break;
 8007abc:	e015      	b.n	8007aea <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ace:	f000 fbc1 	bl	8008254 <vPortFree>
 8007ad2:	e00a      	b.n	8007aea <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ada:	f023 0301 	bic.w	r3, r3, #1
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ae6:	e000      	b.n	8007aea <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ae8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <prvProcessReceivedCommands+0x1b4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1d39      	adds	r1, r7, #4
 8007af0:	2200      	movs	r2, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fc3a 	bl	800636c <xQueueReceive>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f47f af2e 	bne.w	800795c <prvProcessReceivedCommands+0x8>
	}
}
 8007b00:	bf00      	nop
 8007b02:	3730      	adds	r7, #48	; 0x30
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	20000df0 	.word	0x20000df0

08007b0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b12:	e047      	b.n	8007ba4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b14:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <prvSwitchTimerLists+0xc0>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1e:	4b2b      	ldr	r3, [pc, #172]	; (8007bcc <prvSwitchTimerLists+0xc0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe f967 	bl	8005e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d02d      	beq.n	8007ba4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4413      	add	r3, r2
 8007b50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d90e      	bls.n	8007b78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b66:	4b19      	ldr	r3, [pc, #100]	; (8007bcc <prvSwitchTimerLists+0xc0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7fe f90c 	bl	8005d8e <vListInsert>
 8007b76:	e015      	b.n	8007ba4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	2100      	movs	r1, #0
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fd68 	bl	8007658 <xTimerGenericCommand>
 8007b88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <prvSwitchTimerLists+0x98>
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	e7fe      	b.n	8007ba2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ba4:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <prvSwitchTimerLists+0xc0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1b2      	bne.n	8007b14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <prvSwitchTimerLists+0xc0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <prvSwitchTimerLists+0xc4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a04      	ldr	r2, [pc, #16]	; (8007bcc <prvSwitchTimerLists+0xc0>)
 8007bba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bbc:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <prvSwitchTimerLists+0xc4>)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	6013      	str	r3, [r2, #0]
}
 8007bc2:	bf00      	nop
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000de8 	.word	0x20000de8
 8007bd0:	20000dec 	.word	0x20000dec

08007bd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007bda:	f000 f95f 	bl	8007e9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007bde:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <prvCheckForValidListAndQueue+0x60>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d120      	bne.n	8007c28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007be6:	4814      	ldr	r0, [pc, #80]	; (8007c38 <prvCheckForValidListAndQueue+0x64>)
 8007be8:	f7fe f880 	bl	8005cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007bec:	4813      	ldr	r0, [pc, #76]	; (8007c3c <prvCheckForValidListAndQueue+0x68>)
 8007bee:	f7fe f87d 	bl	8005cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007bf2:	4b13      	ldr	r3, [pc, #76]	; (8007c40 <prvCheckForValidListAndQueue+0x6c>)
 8007bf4:	4a10      	ldr	r2, [pc, #64]	; (8007c38 <prvCheckForValidListAndQueue+0x64>)
 8007bf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007bf8:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <prvCheckForValidListAndQueue+0x70>)
 8007bfa:	4a10      	ldr	r2, [pc, #64]	; (8007c3c <prvCheckForValidListAndQueue+0x68>)
 8007bfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <prvCheckForValidListAndQueue+0x74>)
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <prvCheckForValidListAndQueue+0x78>)
 8007c06:	2110      	movs	r1, #16
 8007c08:	200a      	movs	r0, #10
 8007c0a:	f7fe f98b 	bl	8005f24 <xQueueGenericCreateStatic>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <prvCheckForValidListAndQueue+0x60>)
 8007c12:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <prvCheckForValidListAndQueue+0x60>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <prvCheckForValidListAndQueue+0x60>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	490b      	ldr	r1, [pc, #44]	; (8007c50 <prvCheckForValidListAndQueue+0x7c>)
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fd8e 	bl	8006744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c28:	f000 f966 	bl	8007ef8 <vPortExitCritical>
}
 8007c2c:	bf00      	nop
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000df0 	.word	0x20000df0
 8007c38:	20000dc0 	.word	0x20000dc0
 8007c3c:	20000dd4 	.word	0x20000dd4
 8007c40:	20000de8 	.word	0x20000de8
 8007c44:	20000dec 	.word	0x20000dec
 8007c48:	20000e9c 	.word	0x20000e9c
 8007c4c:	20000dfc 	.word	0x20000dfc
 8007c50:	0800a5bc 	.word	0x0800a5bc

08007c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3b04      	subs	r3, #4
 8007c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3b04      	subs	r3, #4
 8007c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f023 0201 	bic.w	r2, r3, #1
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3b04      	subs	r3, #4
 8007c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c84:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <pxPortInitialiseStack+0x64>)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3b14      	subs	r3, #20
 8007c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f06f 0202 	mvn.w	r2, #2
 8007ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3b20      	subs	r3, #32
 8007ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	08007cbd 	.word	0x08007cbd

08007cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cc6:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <prvTaskExitError+0x50>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cce:	d009      	beq.n	8007ce4 <prvTaskExitError+0x28>
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e7fe      	b.n	8007ce2 <prvTaskExitError+0x26>
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cf6:	bf00      	nop
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0fc      	beq.n	8007cf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cfe:	bf00      	nop
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	2000000c 	.word	0x2000000c

08007d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <pxCurrentTCBConst2>)
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	6808      	ldr	r0, [r1, #0]
 8007d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	f380 8809 	msr	PSP, r0
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8811 	msr	BASEPRI, r0
 8007d2a:	4770      	bx	lr
 8007d2c:	f3af 8000 	nop.w

08007d30 <pxCurrentTCBConst2>:
 8007d30:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <prvPortStartFirstTask+0x24>)
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f380 8808 	msr	MSP, r0
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8814 	msr	CONTROL, r0
 8007d4a:	b662      	cpsie	i
 8007d4c:	b661      	cpsie	f
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	df00      	svc	0
 8007d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d5a:	bf00      	nop
 8007d5c:	e000ed08 	.word	0xe000ed08

08007d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d66:	4b44      	ldr	r3, [pc, #272]	; (8007e78 <xPortStartScheduler+0x118>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a44      	ldr	r2, [pc, #272]	; (8007e7c <xPortStartScheduler+0x11c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d109      	bne.n	8007d84 <xPortStartScheduler+0x24>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	e7fe      	b.n	8007d82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d84:	4b3c      	ldr	r3, [pc, #240]	; (8007e78 <xPortStartScheduler+0x118>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a3d      	ldr	r2, [pc, #244]	; (8007e80 <xPortStartScheduler+0x120>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d109      	bne.n	8007da2 <xPortStartScheduler+0x42>
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e7fe      	b.n	8007da0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007da2:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <xPortStartScheduler+0x124>)
 8007da4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4b30      	ldr	r3, [pc, #192]	; (8007e88 <xPortStartScheduler+0x128>)
 8007dc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dca:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007dcc:	2207      	movs	r2, #7
 8007dce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dd0:	e009      	b.n	8007de6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007dd2:	4b2e      	ldr	r3, [pc, #184]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	4a2c      	ldr	r2, [pc, #176]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007dda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d0ef      	beq.n	8007dd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007df2:	4b26      	ldr	r3, [pc, #152]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1c3 0307 	rsb	r3, r3, #7
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d009      	beq.n	8007e12 <xPortStartScheduler+0xb2>
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60bb      	str	r3, [r7, #8]
 8007e10:	e7fe      	b.n	8007e10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e24:	4a19      	ldr	r2, [pc, #100]	; (8007e8c <xPortStartScheduler+0x12c>)
 8007e26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e3c:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <xPortStartScheduler+0x130>)
 8007e42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e48:	f000 f8d6 	bl	8007ff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e4c:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <xPortStartScheduler+0x134>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e52:	f000 f8f5 	bl	8008040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <xPortStartScheduler+0x138>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <xPortStartScheduler+0x138>)
 8007e5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e62:	f7ff ff69 	bl	8007d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e66:	f7ff f871 	bl	8006f4c <vTaskSwitchContext>
	prvTaskExitError();
 8007e6a:	f7ff ff27 	bl	8007cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed00 	.word	0xe000ed00
 8007e7c:	410fc271 	.word	0x410fc271
 8007e80:	410fc270 	.word	0x410fc270
 8007e84:	e000e400 	.word	0xe000e400
 8007e88:	20000eec 	.word	0x20000eec
 8007e8c:	20000ef0 	.word	0x20000ef0
 8007e90:	e000ed20 	.word	0xe000ed20
 8007e94:	2000000c 	.word	0x2000000c
 8007e98:	e000ef34 	.word	0xe000ef34

08007e9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <vPortEnterCritical+0x54>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <vPortEnterCritical+0x54>)
 8007ebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <vPortEnterCritical+0x54>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10e      	bne.n	8007ee4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <vPortEnterCritical+0x58>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <vPortEnterCritical+0x48>
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	e7fe      	b.n	8007ee2 <vPortEnterCritical+0x46>
	}
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	2000000c 	.word	0x2000000c
 8007ef4:	e000ed04 	.word	0xe000ed04

08007ef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <vPortExitCritical+0x22>
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	607b      	str	r3, [r7, #4]
 8007f18:	e7fe      	b.n	8007f18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f24:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <vPortExitCritical+0x4c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <vPortExitCritical+0x3e>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	2000000c 	.word	0x2000000c
	...

08007f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f50:	f3ef 8009 	mrs	r0, PSP
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <pxCurrentTCBConst>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	f01e 0f10 	tst.w	lr, #16
 8007f60:	bf08      	it	eq
 8007f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	6010      	str	r0, [r2, #0]
 8007f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f74:	f380 8811 	msr	BASEPRI, r0
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f7fe ffe4 	bl	8006f4c <vTaskSwitchContext>
 8007f84:	f04f 0000 	mov.w	r0, #0
 8007f88:	f380 8811 	msr	BASEPRI, r0
 8007f8c:	bc09      	pop	{r0, r3}
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	6808      	ldr	r0, [r1, #0]
 8007f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f96:	f01e 0f10 	tst.w	lr, #16
 8007f9a:	bf08      	it	eq
 8007f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fa0:	f380 8809 	msr	PSP, r0
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst>:
 8007fb0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop

08007fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fd0:	f7fe ff04 	bl	8006ddc <xTaskIncrementTick>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <SysTick_Handler+0x3c>)
 8007fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <vPortSetupTimerInterrupt+0x34>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <vPortSetupTimerInterrupt+0x38>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <vPortSetupTimerInterrupt+0x3c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a0a      	ldr	r2, [pc, #40]	; (8008038 <vPortSetupTimerInterrupt+0x40>)
 800800e:	fba2 2303 	umull	r2, r3, r2, r3
 8008012:	099b      	lsrs	r3, r3, #6
 8008014:	4a09      	ldr	r2, [pc, #36]	; (800803c <vPortSetupTimerInterrupt+0x44>)
 8008016:	3b01      	subs	r3, #1
 8008018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800801a:	4b04      	ldr	r3, [pc, #16]	; (800802c <vPortSetupTimerInterrupt+0x34>)
 800801c:	2207      	movs	r2, #7
 800801e:	601a      	str	r2, [r3, #0]
}
 8008020:	bf00      	nop
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	e000e010 	.word	0xe000e010
 8008030:	e000e018 	.word	0xe000e018
 8008034:	20000000 	.word	0x20000000
 8008038:	10624dd3 	.word	0x10624dd3
 800803c:	e000e014 	.word	0xe000e014

08008040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008050 <vPortEnableVFP+0x10>
 8008044:	6801      	ldr	r1, [r0, #0]
 8008046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800804a:	6001      	str	r1, [r0, #0]
 800804c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800804e:	bf00      	nop
 8008050:	e000ed88 	.word	0xe000ed88

08008054 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800805a:	f3ef 8305 	mrs	r3, IPSR
 800805e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b0f      	cmp	r3, #15
 8008064:	d913      	bls.n	800808e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <vPortValidateInterruptPriority+0x6c>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008070:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <vPortValidateInterruptPriority+0x70>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	7afa      	ldrb	r2, [r7, #11]
 8008076:	429a      	cmp	r2, r3
 8008078:	d209      	bcs.n	800808e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	e7fe      	b.n	800808c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800808e:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <vPortValidateInterruptPriority+0x74>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008096:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <vPortValidateInterruptPriority+0x78>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d909      	bls.n	80080b2 <vPortValidateInterruptPriority+0x5e>
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	e7fe      	b.n	80080b0 <vPortValidateInterruptPriority+0x5c>
	}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e3f0 	.word	0xe000e3f0
 80080c4:	20000eec 	.word	0x20000eec
 80080c8:	e000ed0c 	.word	0xe000ed0c
 80080cc:	20000ef0 	.word	0x20000ef0

080080d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	; 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080dc:	f7fe fdc4 	bl	8006c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080e0:	4b57      	ldr	r3, [pc, #348]	; (8008240 <pvPortMalloc+0x170>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e8:	f000 f90c 	bl	8008304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080ec:	4b55      	ldr	r3, [pc, #340]	; (8008244 <pvPortMalloc+0x174>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 808c 	bne.w	8008212 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01c      	beq.n	800813a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d013      	beq.n	800813a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f023 0307 	bic.w	r3, r3, #7
 8008118:	3308      	adds	r3, #8
 800811a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <pvPortMalloc+0x6a>
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e7fe      	b.n	8008138 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d068      	beq.n	8008212 <pvPortMalloc+0x142>
 8008140:	4b41      	ldr	r3, [pc, #260]	; (8008248 <pvPortMalloc+0x178>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d863      	bhi.n	8008212 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800814a:	4b40      	ldr	r3, [pc, #256]	; (800824c <pvPortMalloc+0x17c>)
 800814c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800814e:	4b3f      	ldr	r3, [pc, #252]	; (800824c <pvPortMalloc+0x17c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008154:	e004      	b.n	8008160 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d903      	bls.n	8008172 <pvPortMalloc+0xa2>
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f1      	bne.n	8008156 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008172:	4b33      	ldr	r3, [pc, #204]	; (8008240 <pvPortMalloc+0x170>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	429a      	cmp	r2, r3
 800817a:	d04a      	beq.n	8008212 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2208      	movs	r2, #8
 8008182:	4413      	add	r3, r2
 8008184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	1ad2      	subs	r2, r2, r3
 8008196:	2308      	movs	r3, #8
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	429a      	cmp	r2, r3
 800819c:	d91e      	bls.n	80081dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4413      	add	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <pvPortMalloc+0xf4>
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	e7fe      	b.n	80081c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	1ad2      	subs	r2, r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081d6:	69b8      	ldr	r0, [r7, #24]
 80081d8:	f000 f8f6 	bl	80083c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081dc:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <pvPortMalloc+0x178>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <pvPortMalloc+0x178>)
 80081e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ea:	4b17      	ldr	r3, [pc, #92]	; (8008248 <pvPortMalloc+0x178>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b18      	ldr	r3, [pc, #96]	; (8008250 <pvPortMalloc+0x180>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d203      	bcs.n	80081fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <pvPortMalloc+0x178>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a15      	ldr	r2, [pc, #84]	; (8008250 <pvPortMalloc+0x180>)
 80081fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <pvPortMalloc+0x174>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	431a      	orrs	r2, r3
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008212:	f7fe fd37 	bl	8006c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <pvPortMalloc+0x164>
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e7fe      	b.n	8008232 <pvPortMalloc+0x162>
	return pvReturn;
 8008234:	69fb      	ldr	r3, [r7, #28]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20001ab4 	.word	0x20001ab4
 8008244:	20001ac0 	.word	0x20001ac0
 8008248:	20001ab8 	.word	0x20001ab8
 800824c:	20001aac 	.word	0x20001aac
 8008250:	20001abc 	.word	0x20001abc

08008254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d046      	beq.n	80082f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008266:	2308      	movs	r3, #8
 8008268:	425b      	negs	r3, r3
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	4b20      	ldr	r3, [pc, #128]	; (80082fc <vPortFree+0xa8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4013      	ands	r3, r2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <vPortFree+0x42>
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e7fe      	b.n	8008294 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <vPortFree+0x5e>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	e7fe      	b.n	80082b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <vPortFree+0xa8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d019      	beq.n	80082f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d115      	bne.n	80082f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <vPortFree+0xa8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	401a      	ands	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082d8:	f7fe fcc6 	bl	8006c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <vPortFree+0xac>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	4a06      	ldr	r2, [pc, #24]	; (8008300 <vPortFree+0xac>)
 80082e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f000 f86c 	bl	80083c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082f0:	f7fe fcc8 	bl	8006c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082f4:	bf00      	nop
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20001ac0 	.word	0x20001ac0
 8008300:	20001ab8 	.word	0x20001ab8

08008304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800830a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800830e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <prvHeapInit+0xac>)
 8008312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3307      	adds	r3, #7
 8008322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0307 	bic.w	r3, r3, #7
 800832a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <prvHeapInit+0xac>)
 8008334:	4413      	add	r3, r2
 8008336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800833c:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <prvHeapInit+0xb0>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <prvHeapInit+0xb0>)
 8008344:	2200      	movs	r2, #0
 8008346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008350:	2208      	movs	r2, #8
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <prvHeapInit+0xb4>)
 8008364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <prvHeapInit+0xb4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <prvHeapInit+0xb4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <prvHeapInit+0xb4>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <prvHeapInit+0xb8>)
 8008392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <prvHeapInit+0xbc>)
 800839a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <prvHeapInit+0xc0>)
 800839e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000ef4 	.word	0x20000ef4
 80083b4:	20001aac 	.word	0x20001aac
 80083b8:	20001ab4 	.word	0x20001ab4
 80083bc:	20001abc 	.word	0x20001abc
 80083c0:	20001ab8 	.word	0x20001ab8
 80083c4:	20001ac0 	.word	0x20001ac0

080083c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083d0:	4b28      	ldr	r3, [pc, #160]	; (8008474 <prvInsertBlockIntoFreeList+0xac>)
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e002      	b.n	80083dc <prvInsertBlockIntoFreeList+0x14>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d8f7      	bhi.n	80083d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d108      	bne.n	800840a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	441a      	add	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d118      	bne.n	8008450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <prvInsertBlockIntoFreeList+0xb0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d00d      	beq.n	8008446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	441a      	add	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e008      	b.n	8008458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvInsertBlockIntoFreeList+0xb0>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e003      	b.n	8008458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d002      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20001aac 	.word	0x20001aac
 8008478:	20001ab4 	.word	0x20001ab4

0800847c <__errno>:
 800847c:	4b01      	ldr	r3, [pc, #4]	; (8008484 <__errno+0x8>)
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000010 	.word	0x20000010

08008488 <__libc_init_array>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4e0d      	ldr	r6, [pc, #52]	; (80084c0 <__libc_init_array+0x38>)
 800848c:	4c0d      	ldr	r4, [pc, #52]	; (80084c4 <__libc_init_array+0x3c>)
 800848e:	1ba4      	subs	r4, r4, r6
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	2500      	movs	r5, #0
 8008494:	42a5      	cmp	r5, r4
 8008496:	d109      	bne.n	80084ac <__libc_init_array+0x24>
 8008498:	4e0b      	ldr	r6, [pc, #44]	; (80084c8 <__libc_init_array+0x40>)
 800849a:	4c0c      	ldr	r4, [pc, #48]	; (80084cc <__libc_init_array+0x44>)
 800849c:	f002 f85e 	bl	800a55c <_init>
 80084a0:	1ba4      	subs	r4, r4, r6
 80084a2:	10a4      	asrs	r4, r4, #2
 80084a4:	2500      	movs	r5, #0
 80084a6:	42a5      	cmp	r5, r4
 80084a8:	d105      	bne.n	80084b6 <__libc_init_array+0x2e>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084b0:	4798      	blx	r3
 80084b2:	3501      	adds	r5, #1
 80084b4:	e7ee      	b.n	8008494 <__libc_init_array+0xc>
 80084b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084ba:	4798      	blx	r3
 80084bc:	3501      	adds	r5, #1
 80084be:	e7f2      	b.n	80084a6 <__libc_init_array+0x1e>
 80084c0:	0800a8d0 	.word	0x0800a8d0
 80084c4:	0800a8d0 	.word	0x0800a8d0
 80084c8:	0800a8d0 	.word	0x0800a8d0
 80084cc:	0800a8d4 	.word	0x0800a8d4

080084d0 <memcpy>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	1e43      	subs	r3, r0, #1
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d100      	bne.n	80084dc <memcpy+0xc>
 80084da:	bd10      	pop	{r4, pc}
 80084dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e4:	e7f7      	b.n	80084d6 <memcpy+0x6>

080084e6 <memset>:
 80084e6:	4402      	add	r2, r0
 80084e8:	4603      	mov	r3, r0
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d100      	bne.n	80084f0 <memset+0xa>
 80084ee:	4770      	bx	lr
 80084f0:	f803 1b01 	strb.w	r1, [r3], #1
 80084f4:	e7f9      	b.n	80084ea <memset+0x4>

080084f6 <__cvt>:
 80084f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084fa:	ec55 4b10 	vmov	r4, r5, d0
 80084fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008500:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008504:	2d00      	cmp	r5, #0
 8008506:	460e      	mov	r6, r1
 8008508:	4691      	mov	r9, r2
 800850a:	4619      	mov	r1, r3
 800850c:	bfb8      	it	lt
 800850e:	4622      	movlt	r2, r4
 8008510:	462b      	mov	r3, r5
 8008512:	f027 0720 	bic.w	r7, r7, #32
 8008516:	bfbb      	ittet	lt
 8008518:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800851c:	461d      	movlt	r5, r3
 800851e:	2300      	movge	r3, #0
 8008520:	232d      	movlt	r3, #45	; 0x2d
 8008522:	bfb8      	it	lt
 8008524:	4614      	movlt	r4, r2
 8008526:	2f46      	cmp	r7, #70	; 0x46
 8008528:	700b      	strb	r3, [r1, #0]
 800852a:	d004      	beq.n	8008536 <__cvt+0x40>
 800852c:	2f45      	cmp	r7, #69	; 0x45
 800852e:	d100      	bne.n	8008532 <__cvt+0x3c>
 8008530:	3601      	adds	r6, #1
 8008532:	2102      	movs	r1, #2
 8008534:	e000      	b.n	8008538 <__cvt+0x42>
 8008536:	2103      	movs	r1, #3
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	ab02      	add	r3, sp, #8
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	4632      	mov	r2, r6
 8008542:	4653      	mov	r3, sl
 8008544:	ec45 4b10 	vmov	d0, r4, r5
 8008548:	f000 fcde 	bl	8008f08 <_dtoa_r>
 800854c:	2f47      	cmp	r7, #71	; 0x47
 800854e:	4680      	mov	r8, r0
 8008550:	d102      	bne.n	8008558 <__cvt+0x62>
 8008552:	f019 0f01 	tst.w	r9, #1
 8008556:	d026      	beq.n	80085a6 <__cvt+0xb0>
 8008558:	2f46      	cmp	r7, #70	; 0x46
 800855a:	eb08 0906 	add.w	r9, r8, r6
 800855e:	d111      	bne.n	8008584 <__cvt+0x8e>
 8008560:	f898 3000 	ldrb.w	r3, [r8]
 8008564:	2b30      	cmp	r3, #48	; 0x30
 8008566:	d10a      	bne.n	800857e <__cvt+0x88>
 8008568:	2200      	movs	r2, #0
 800856a:	2300      	movs	r3, #0
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f8 fac2 	bl	8000af8 <__aeabi_dcmpeq>
 8008574:	b918      	cbnz	r0, 800857e <__cvt+0x88>
 8008576:	f1c6 0601 	rsb	r6, r6, #1
 800857a:	f8ca 6000 	str.w	r6, [sl]
 800857e:	f8da 3000 	ldr.w	r3, [sl]
 8008582:	4499      	add	r9, r3
 8008584:	2200      	movs	r2, #0
 8008586:	2300      	movs	r3, #0
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	f7f8 fab4 	bl	8000af8 <__aeabi_dcmpeq>
 8008590:	b938      	cbnz	r0, 80085a2 <__cvt+0xac>
 8008592:	2230      	movs	r2, #48	; 0x30
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	454b      	cmp	r3, r9
 8008598:	d205      	bcs.n	80085a6 <__cvt+0xb0>
 800859a:	1c59      	adds	r1, r3, #1
 800859c:	9103      	str	r1, [sp, #12]
 800859e:	701a      	strb	r2, [r3, #0]
 80085a0:	e7f8      	b.n	8008594 <__cvt+0x9e>
 80085a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085aa:	eba3 0308 	sub.w	r3, r3, r8
 80085ae:	4640      	mov	r0, r8
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	b004      	add	sp, #16
 80085b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080085b8 <__exponent>:
 80085b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ba:	2900      	cmp	r1, #0
 80085bc:	4604      	mov	r4, r0
 80085be:	bfba      	itte	lt
 80085c0:	4249      	neglt	r1, r1
 80085c2:	232d      	movlt	r3, #45	; 0x2d
 80085c4:	232b      	movge	r3, #43	; 0x2b
 80085c6:	2909      	cmp	r1, #9
 80085c8:	f804 2b02 	strb.w	r2, [r4], #2
 80085cc:	7043      	strb	r3, [r0, #1]
 80085ce:	dd20      	ble.n	8008612 <__exponent+0x5a>
 80085d0:	f10d 0307 	add.w	r3, sp, #7
 80085d4:	461f      	mov	r7, r3
 80085d6:	260a      	movs	r6, #10
 80085d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80085dc:	fb06 1115 	mls	r1, r6, r5, r1
 80085e0:	3130      	adds	r1, #48	; 0x30
 80085e2:	2d09      	cmp	r5, #9
 80085e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80085ec:	4629      	mov	r1, r5
 80085ee:	dc09      	bgt.n	8008604 <__exponent+0x4c>
 80085f0:	3130      	adds	r1, #48	; 0x30
 80085f2:	3b02      	subs	r3, #2
 80085f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80085f8:	42bb      	cmp	r3, r7
 80085fa:	4622      	mov	r2, r4
 80085fc:	d304      	bcc.n	8008608 <__exponent+0x50>
 80085fe:	1a10      	subs	r0, r2, r0
 8008600:	b003      	add	sp, #12
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008604:	4613      	mov	r3, r2
 8008606:	e7e7      	b.n	80085d8 <__exponent+0x20>
 8008608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800860c:	f804 2b01 	strb.w	r2, [r4], #1
 8008610:	e7f2      	b.n	80085f8 <__exponent+0x40>
 8008612:	2330      	movs	r3, #48	; 0x30
 8008614:	4419      	add	r1, r3
 8008616:	7083      	strb	r3, [r0, #2]
 8008618:	1d02      	adds	r2, r0, #4
 800861a:	70c1      	strb	r1, [r0, #3]
 800861c:	e7ef      	b.n	80085fe <__exponent+0x46>
	...

08008620 <_printf_float>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	b08d      	sub	sp, #52	; 0x34
 8008626:	460c      	mov	r4, r1
 8008628:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800862c:	4616      	mov	r6, r2
 800862e:	461f      	mov	r7, r3
 8008630:	4605      	mov	r5, r0
 8008632:	f001 fa21 	bl	8009a78 <_localeconv_r>
 8008636:	6803      	ldr	r3, [r0, #0]
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	4618      	mov	r0, r3
 800863c:	f7f7 fde0 	bl	8000200 <strlen>
 8008640:	2300      	movs	r3, #0
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	f8d8 3000 	ldr.w	r3, [r8]
 8008648:	9005      	str	r0, [sp, #20]
 800864a:	3307      	adds	r3, #7
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	f103 0208 	add.w	r2, r3, #8
 8008654:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008658:	f8d4 b000 	ldr.w	fp, [r4]
 800865c:	f8c8 2000 	str.w	r2, [r8]
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008668:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800866c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008670:	9307      	str	r3, [sp, #28]
 8008672:	f8cd 8018 	str.w	r8, [sp, #24]
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	4ba7      	ldr	r3, [pc, #668]	; (8008918 <_printf_float+0x2f8>)
 800867c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008680:	f7f8 fa6c 	bl	8000b5c <__aeabi_dcmpun>
 8008684:	bb70      	cbnz	r0, 80086e4 <_printf_float+0xc4>
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	4ba3      	ldr	r3, [pc, #652]	; (8008918 <_printf_float+0x2f8>)
 800868c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008690:	f7f8 fa46 	bl	8000b20 <__aeabi_dcmple>
 8008694:	bb30      	cbnz	r0, 80086e4 <_printf_float+0xc4>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f8 fa35 	bl	8000b0c <__aeabi_dcmplt>
 80086a2:	b110      	cbz	r0, 80086aa <_printf_float+0x8a>
 80086a4:	232d      	movs	r3, #45	; 0x2d
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086aa:	4a9c      	ldr	r2, [pc, #624]	; (800891c <_printf_float+0x2fc>)
 80086ac:	4b9c      	ldr	r3, [pc, #624]	; (8008920 <_printf_float+0x300>)
 80086ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086b2:	bf8c      	ite	hi
 80086b4:	4690      	movhi	r8, r2
 80086b6:	4698      	movls	r8, r3
 80086b8:	2303      	movs	r3, #3
 80086ba:	f02b 0204 	bic.w	r2, fp, #4
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	9700      	str	r7, [sp, #0]
 80086c8:	4633      	mov	r3, r6
 80086ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f9e6 	bl	8008aa0 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 808d 	bne.w	80087f4 <_printf_float+0x1d4>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b00d      	add	sp, #52	; 0x34
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f8 fa36 	bl	8000b5c <__aeabi_dcmpun>
 80086f0:	b110      	cbz	r0, 80086f8 <_printf_float+0xd8>
 80086f2:	4a8c      	ldr	r2, [pc, #560]	; (8008924 <_printf_float+0x304>)
 80086f4:	4b8c      	ldr	r3, [pc, #560]	; (8008928 <_printf_float+0x308>)
 80086f6:	e7da      	b.n	80086ae <_printf_float+0x8e>
 80086f8:	6861      	ldr	r1, [r4, #4]
 80086fa:	1c4b      	adds	r3, r1, #1
 80086fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008700:	a80a      	add	r0, sp, #40	; 0x28
 8008702:	d13e      	bne.n	8008782 <_printf_float+0x162>
 8008704:	2306      	movs	r3, #6
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	2300      	movs	r3, #0
 800870a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800870e:	ab09      	add	r3, sp, #36	; 0x24
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	ec49 8b10 	vmov	d0, r8, r9
 8008716:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800871a:	6022      	str	r2, [r4, #0]
 800871c:	f8cd a004 	str.w	sl, [sp, #4]
 8008720:	6861      	ldr	r1, [r4, #4]
 8008722:	4628      	mov	r0, r5
 8008724:	f7ff fee7 	bl	80084f6 <__cvt>
 8008728:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800872c:	2b47      	cmp	r3, #71	; 0x47
 800872e:	4680      	mov	r8, r0
 8008730:	d109      	bne.n	8008746 <_printf_float+0x126>
 8008732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008734:	1cd8      	adds	r0, r3, #3
 8008736:	db02      	blt.n	800873e <_printf_float+0x11e>
 8008738:	6862      	ldr	r2, [r4, #4]
 800873a:	4293      	cmp	r3, r2
 800873c:	dd47      	ble.n	80087ce <_printf_float+0x1ae>
 800873e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008742:	fa5f fa8a 	uxtb.w	sl, sl
 8008746:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800874a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800874c:	d824      	bhi.n	8008798 <_printf_float+0x178>
 800874e:	3901      	subs	r1, #1
 8008750:	4652      	mov	r2, sl
 8008752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008756:	9109      	str	r1, [sp, #36]	; 0x24
 8008758:	f7ff ff2e 	bl	80085b8 <__exponent>
 800875c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800875e:	1813      	adds	r3, r2, r0
 8008760:	2a01      	cmp	r2, #1
 8008762:	4681      	mov	r9, r0
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	dc02      	bgt.n	800876e <_printf_float+0x14e>
 8008768:	6822      	ldr	r2, [r4, #0]
 800876a:	07d1      	lsls	r1, r2, #31
 800876c:	d501      	bpl.n	8008772 <_printf_float+0x152>
 800876e:	3301      	adds	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0a5      	beq.n	80086c6 <_printf_float+0xa6>
 800877a:	232d      	movs	r3, #45	; 0x2d
 800877c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008780:	e7a1      	b.n	80086c6 <_printf_float+0xa6>
 8008782:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008786:	f000 8177 	beq.w	8008a78 <_printf_float+0x458>
 800878a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800878e:	d1bb      	bne.n	8008708 <_printf_float+0xe8>
 8008790:	2900      	cmp	r1, #0
 8008792:	d1b9      	bne.n	8008708 <_printf_float+0xe8>
 8008794:	2301      	movs	r3, #1
 8008796:	e7b6      	b.n	8008706 <_printf_float+0xe6>
 8008798:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800879c:	d119      	bne.n	80087d2 <_printf_float+0x1b2>
 800879e:	2900      	cmp	r1, #0
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	dd0c      	ble.n	80087be <_printf_float+0x19e>
 80087a4:	6121      	str	r1, [r4, #16]
 80087a6:	b913      	cbnz	r3, 80087ae <_printf_float+0x18e>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	07d2      	lsls	r2, r2, #31
 80087ac:	d502      	bpl.n	80087b4 <_printf_float+0x194>
 80087ae:	3301      	adds	r3, #1
 80087b0:	440b      	add	r3, r1
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	e7d9      	b.n	8008772 <_printf_float+0x152>
 80087be:	b913      	cbnz	r3, 80087c6 <_printf_float+0x1a6>
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	07d0      	lsls	r0, r2, #31
 80087c4:	d501      	bpl.n	80087ca <_printf_float+0x1aa>
 80087c6:	3302      	adds	r3, #2
 80087c8:	e7f3      	b.n	80087b2 <_printf_float+0x192>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e7f1      	b.n	80087b2 <_printf_float+0x192>
 80087ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80087d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80087d6:	4293      	cmp	r3, r2
 80087d8:	db05      	blt.n	80087e6 <_printf_float+0x1c6>
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	07d1      	lsls	r1, r2, #31
 80087e0:	d5e8      	bpl.n	80087b4 <_printf_float+0x194>
 80087e2:	3301      	adds	r3, #1
 80087e4:	e7e5      	b.n	80087b2 <_printf_float+0x192>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfd4      	ite	le
 80087ea:	f1c3 0302 	rsble	r3, r3, #2
 80087ee:	2301      	movgt	r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	e7de      	b.n	80087b2 <_printf_float+0x192>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	055a      	lsls	r2, r3, #21
 80087f8:	d407      	bmi.n	800880a <_printf_float+0x1ea>
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	4642      	mov	r2, r8
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	d12b      	bne.n	8008860 <_printf_float+0x240>
 8008808:	e767      	b.n	80086da <_printf_float+0xba>
 800880a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800880e:	f240 80dc 	bls.w	80089ca <_printf_float+0x3aa>
 8008812:	2200      	movs	r2, #0
 8008814:	2300      	movs	r3, #0
 8008816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881a:	f7f8 f96d 	bl	8000af8 <__aeabi_dcmpeq>
 800881e:	2800      	cmp	r0, #0
 8008820:	d033      	beq.n	800888a <_printf_float+0x26a>
 8008822:	2301      	movs	r3, #1
 8008824:	4a41      	ldr	r2, [pc, #260]	; (800892c <_printf_float+0x30c>)
 8008826:	4631      	mov	r1, r6
 8008828:	4628      	mov	r0, r5
 800882a:	47b8      	blx	r7
 800882c:	3001      	adds	r0, #1
 800882e:	f43f af54 	beq.w	80086da <_printf_float+0xba>
 8008832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008836:	429a      	cmp	r2, r3
 8008838:	db02      	blt.n	8008840 <_printf_float+0x220>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	07d8      	lsls	r0, r3, #31
 800883e:	d50f      	bpl.n	8008860 <_printf_float+0x240>
 8008840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	f43f af45 	beq.w	80086da <_printf_float+0xba>
 8008850:	f04f 0800 	mov.w	r8, #0
 8008854:	f104 091a 	add.w	r9, r4, #26
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	3b01      	subs	r3, #1
 800885c:	4543      	cmp	r3, r8
 800885e:	dc09      	bgt.n	8008874 <_printf_float+0x254>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	079b      	lsls	r3, r3, #30
 8008864:	f100 8103 	bmi.w	8008a6e <_printf_float+0x44e>
 8008868:	68e0      	ldr	r0, [r4, #12]
 800886a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800886c:	4298      	cmp	r0, r3
 800886e:	bfb8      	it	lt
 8008870:	4618      	movlt	r0, r3
 8008872:	e734      	b.n	80086de <_printf_float+0xbe>
 8008874:	2301      	movs	r3, #1
 8008876:	464a      	mov	r2, r9
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f af2b 	beq.w	80086da <_printf_float+0xba>
 8008884:	f108 0801 	add.w	r8, r8, #1
 8008888:	e7e6      	b.n	8008858 <_printf_float+0x238>
 800888a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	dc2b      	bgt.n	80088e8 <_printf_float+0x2c8>
 8008890:	2301      	movs	r3, #1
 8008892:	4a26      	ldr	r2, [pc, #152]	; (800892c <_printf_float+0x30c>)
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f af1d 	beq.w	80086da <_printf_float+0xba>
 80088a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a2:	b923      	cbnz	r3, 80088ae <_printf_float+0x28e>
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	b913      	cbnz	r3, 80088ae <_printf_float+0x28e>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07d9      	lsls	r1, r3, #31
 80088ac:	d5d8      	bpl.n	8008860 <_printf_float+0x240>
 80088ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f af0e 	beq.w	80086da <_printf_float+0xba>
 80088be:	f04f 0900 	mov.w	r9, #0
 80088c2:	f104 0a1a 	add.w	sl, r4, #26
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	425b      	negs	r3, r3
 80088ca:	454b      	cmp	r3, r9
 80088cc:	dc01      	bgt.n	80088d2 <_printf_float+0x2b2>
 80088ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d0:	e794      	b.n	80087fc <_printf_float+0x1dc>
 80088d2:	2301      	movs	r3, #1
 80088d4:	4652      	mov	r2, sl
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	f43f aefc 	beq.w	80086da <_printf_float+0xba>
 80088e2:	f109 0901 	add.w	r9, r9, #1
 80088e6:	e7ee      	b.n	80088c6 <_printf_float+0x2a6>
 80088e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088ec:	429a      	cmp	r2, r3
 80088ee:	bfa8      	it	ge
 80088f0:	461a      	movge	r2, r3
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	4691      	mov	r9, r2
 80088f6:	dd07      	ble.n	8008908 <_printf_float+0x2e8>
 80088f8:	4613      	mov	r3, r2
 80088fa:	4631      	mov	r1, r6
 80088fc:	4642      	mov	r2, r8
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f aee9 	beq.w	80086da <_printf_float+0xba>
 8008908:	f104 031a 	add.w	r3, r4, #26
 800890c:	f04f 0b00 	mov.w	fp, #0
 8008910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008914:	9306      	str	r3, [sp, #24]
 8008916:	e015      	b.n	8008944 <_printf_float+0x324>
 8008918:	7fefffff 	.word	0x7fefffff
 800891c:	0800a670 	.word	0x0800a670
 8008920:	0800a66c 	.word	0x0800a66c
 8008924:	0800a678 	.word	0x0800a678
 8008928:	0800a674 	.word	0x0800a674
 800892c:	0800a67c 	.word	0x0800a67c
 8008930:	2301      	movs	r3, #1
 8008932:	9a06      	ldr	r2, [sp, #24]
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	f43f aecd 	beq.w	80086da <_printf_float+0xba>
 8008940:	f10b 0b01 	add.w	fp, fp, #1
 8008944:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008948:	ebaa 0309 	sub.w	r3, sl, r9
 800894c:	455b      	cmp	r3, fp
 800894e:	dcef      	bgt.n	8008930 <_printf_float+0x310>
 8008950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008954:	429a      	cmp	r2, r3
 8008956:	44d0      	add	r8, sl
 8008958:	db15      	blt.n	8008986 <_printf_float+0x366>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	07da      	lsls	r2, r3, #31
 800895e:	d412      	bmi.n	8008986 <_printf_float+0x366>
 8008960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008962:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008964:	eba3 020a 	sub.w	r2, r3, sl
 8008968:	eba3 0a01 	sub.w	sl, r3, r1
 800896c:	4592      	cmp	sl, r2
 800896e:	bfa8      	it	ge
 8008970:	4692      	movge	sl, r2
 8008972:	f1ba 0f00 	cmp.w	sl, #0
 8008976:	dc0e      	bgt.n	8008996 <_printf_float+0x376>
 8008978:	f04f 0800 	mov.w	r8, #0
 800897c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008980:	f104 091a 	add.w	r9, r4, #26
 8008984:	e019      	b.n	80089ba <_printf_float+0x39a>
 8008986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	d1e5      	bne.n	8008960 <_printf_float+0x340>
 8008994:	e6a1      	b.n	80086da <_printf_float+0xba>
 8008996:	4653      	mov	r3, sl
 8008998:	4642      	mov	r2, r8
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	47b8      	blx	r7
 80089a0:	3001      	adds	r0, #1
 80089a2:	d1e9      	bne.n	8008978 <_printf_float+0x358>
 80089a4:	e699      	b.n	80086da <_printf_float+0xba>
 80089a6:	2301      	movs	r3, #1
 80089a8:	464a      	mov	r2, r9
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	f43f ae92 	beq.w	80086da <_printf_float+0xba>
 80089b6:	f108 0801 	add.w	r8, r8, #1
 80089ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	eba3 030a 	sub.w	r3, r3, sl
 80089c4:	4543      	cmp	r3, r8
 80089c6:	dcee      	bgt.n	80089a6 <_printf_float+0x386>
 80089c8:	e74a      	b.n	8008860 <_printf_float+0x240>
 80089ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089cc:	2a01      	cmp	r2, #1
 80089ce:	dc01      	bgt.n	80089d4 <_printf_float+0x3b4>
 80089d0:	07db      	lsls	r3, r3, #31
 80089d2:	d53a      	bpl.n	8008a4a <_printf_float+0x42a>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4642      	mov	r2, r8
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f ae7b 	beq.w	80086da <_printf_float+0xba>
 80089e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f108 0801 	add.w	r8, r8, #1
 80089f4:	f43f ae71 	beq.w	80086da <_printf_float+0xba>
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	2200      	movs	r2, #0
 80089fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8008a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a04:	2300      	movs	r3, #0
 8008a06:	f7f8 f877 	bl	8000af8 <__aeabi_dcmpeq>
 8008a0a:	b9c8      	cbnz	r0, 8008a40 <_printf_float+0x420>
 8008a0c:	4653      	mov	r3, sl
 8008a0e:	4642      	mov	r2, r8
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	d10e      	bne.n	8008a38 <_printf_float+0x418>
 8008a1a:	e65e      	b.n	80086da <_printf_float+0xba>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f ae57 	beq.w	80086da <_printf_float+0xba>
 8008a2c:	f108 0801 	add.w	r8, r8, #1
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	3b01      	subs	r3, #1
 8008a34:	4543      	cmp	r3, r8
 8008a36:	dcf1      	bgt.n	8008a1c <_printf_float+0x3fc>
 8008a38:	464b      	mov	r3, r9
 8008a3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a3e:	e6de      	b.n	80087fe <_printf_float+0x1de>
 8008a40:	f04f 0800 	mov.w	r8, #0
 8008a44:	f104 0a1a 	add.w	sl, r4, #26
 8008a48:	e7f2      	b.n	8008a30 <_printf_float+0x410>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e7df      	b.n	8008a0e <_printf_float+0x3ee>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	464a      	mov	r2, r9
 8008a52:	4631      	mov	r1, r6
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b8      	blx	r7
 8008a58:	3001      	adds	r0, #1
 8008a5a:	f43f ae3e 	beq.w	80086da <_printf_float+0xba>
 8008a5e:	f108 0801 	add.w	r8, r8, #1
 8008a62:	68e3      	ldr	r3, [r4, #12]
 8008a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	4543      	cmp	r3, r8
 8008a6a:	dcf0      	bgt.n	8008a4e <_printf_float+0x42e>
 8008a6c:	e6fc      	b.n	8008868 <_printf_float+0x248>
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	f104 0919 	add.w	r9, r4, #25
 8008a76:	e7f4      	b.n	8008a62 <_printf_float+0x442>
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	f43f ae8b 	beq.w	8008794 <_printf_float+0x174>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a84:	ab09      	add	r3, sp, #36	; 0x24
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	ec49 8b10 	vmov	d0, r8, r9
 8008a8c:	6022      	str	r2, [r4, #0]
 8008a8e:	f8cd a004 	str.w	sl, [sp, #4]
 8008a92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a96:	4628      	mov	r0, r5
 8008a98:	f7ff fd2d 	bl	80084f6 <__cvt>
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	e648      	b.n	8008732 <_printf_float+0x112>

08008aa0 <_printf_common>:
 8008aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa4:	4691      	mov	r9, r2
 8008aa6:	461f      	mov	r7, r3
 8008aa8:	688a      	ldr	r2, [r1, #8]
 8008aaa:	690b      	ldr	r3, [r1, #16]
 8008aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bfb8      	it	lt
 8008ab4:	4613      	movlt	r3, r2
 8008ab6:	f8c9 3000 	str.w	r3, [r9]
 8008aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	b112      	cbz	r2, 8008aca <_printf_common+0x2a>
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f8c9 3000 	str.w	r3, [r9]
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	0699      	lsls	r1, r3, #26
 8008ace:	bf42      	ittt	mi
 8008ad0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ad4:	3302      	addmi	r3, #2
 8008ad6:	f8c9 3000 	strmi.w	r3, [r9]
 8008ada:	6825      	ldr	r5, [r4, #0]
 8008adc:	f015 0506 	ands.w	r5, r5, #6
 8008ae0:	d107      	bne.n	8008af2 <_printf_common+0x52>
 8008ae2:	f104 0a19 	add.w	sl, r4, #25
 8008ae6:	68e3      	ldr	r3, [r4, #12]
 8008ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	42ab      	cmp	r3, r5
 8008af0:	dc28      	bgt.n	8008b44 <_printf_common+0xa4>
 8008af2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	3300      	adds	r3, #0
 8008afa:	bf18      	it	ne
 8008afc:	2301      	movne	r3, #1
 8008afe:	0692      	lsls	r2, r2, #26
 8008b00:	d42d      	bmi.n	8008b5e <_printf_common+0xbe>
 8008b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b06:	4639      	mov	r1, r7
 8008b08:	4630      	mov	r0, r6
 8008b0a:	47c0      	blx	r8
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d020      	beq.n	8008b52 <_printf_common+0xb2>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	68e5      	ldr	r5, [r4, #12]
 8008b14:	f8d9 2000 	ldr.w	r2, [r9]
 8008b18:	f003 0306 	and.w	r3, r3, #6
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	bf08      	it	eq
 8008b20:	1aad      	subeq	r5, r5, r2
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	bf0c      	ite	eq
 8008b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b2c:	2500      	movne	r5, #0
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bfc4      	itt	gt
 8008b32:	1a9b      	subgt	r3, r3, r2
 8008b34:	18ed      	addgt	r5, r5, r3
 8008b36:	f04f 0900 	mov.w	r9, #0
 8008b3a:	341a      	adds	r4, #26
 8008b3c:	454d      	cmp	r5, r9
 8008b3e:	d11a      	bne.n	8008b76 <_printf_common+0xd6>
 8008b40:	2000      	movs	r0, #0
 8008b42:	e008      	b.n	8008b56 <_printf_common+0xb6>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4652      	mov	r2, sl
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	47c0      	blx	r8
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d103      	bne.n	8008b5a <_printf_common+0xba>
 8008b52:	f04f 30ff 	mov.w	r0, #4294967295
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	3501      	adds	r5, #1
 8008b5c:	e7c3      	b.n	8008ae6 <_printf_common+0x46>
 8008b5e:	18e1      	adds	r1, r4, r3
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	2030      	movs	r0, #48	; 0x30
 8008b64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b68:	4422      	add	r2, r4
 8008b6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b72:	3302      	adds	r3, #2
 8008b74:	e7c5      	b.n	8008b02 <_printf_common+0x62>
 8008b76:	2301      	movs	r3, #1
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	47c0      	blx	r8
 8008b80:	3001      	adds	r0, #1
 8008b82:	d0e6      	beq.n	8008b52 <_printf_common+0xb2>
 8008b84:	f109 0901 	add.w	r9, r9, #1
 8008b88:	e7d8      	b.n	8008b3c <_printf_common+0x9c>
	...

08008b8c <_printf_i>:
 8008b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b94:	460c      	mov	r4, r1
 8008b96:	7e09      	ldrb	r1, [r1, #24]
 8008b98:	b085      	sub	sp, #20
 8008b9a:	296e      	cmp	r1, #110	; 0x6e
 8008b9c:	4617      	mov	r7, r2
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	4698      	mov	r8, r3
 8008ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ba4:	f000 80b3 	beq.w	8008d0e <_printf_i+0x182>
 8008ba8:	d822      	bhi.n	8008bf0 <_printf_i+0x64>
 8008baa:	2963      	cmp	r1, #99	; 0x63
 8008bac:	d036      	beq.n	8008c1c <_printf_i+0x90>
 8008bae:	d80a      	bhi.n	8008bc6 <_printf_i+0x3a>
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	f000 80b9 	beq.w	8008d28 <_printf_i+0x19c>
 8008bb6:	2958      	cmp	r1, #88	; 0x58
 8008bb8:	f000 8083 	beq.w	8008cc2 <_printf_i+0x136>
 8008bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bc4:	e032      	b.n	8008c2c <_printf_i+0xa0>
 8008bc6:	2964      	cmp	r1, #100	; 0x64
 8008bc8:	d001      	beq.n	8008bce <_printf_i+0x42>
 8008bca:	2969      	cmp	r1, #105	; 0x69
 8008bcc:	d1f6      	bne.n	8008bbc <_printf_i+0x30>
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	6813      	ldr	r3, [r2, #0]
 8008bd2:	0605      	lsls	r5, r0, #24
 8008bd4:	f103 0104 	add.w	r1, r3, #4
 8008bd8:	d52a      	bpl.n	8008c30 <_printf_i+0xa4>
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6011      	str	r1, [r2, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da03      	bge.n	8008bea <_printf_i+0x5e>
 8008be2:	222d      	movs	r2, #45	; 0x2d
 8008be4:	425b      	negs	r3, r3
 8008be6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008bea:	486f      	ldr	r0, [pc, #444]	; (8008da8 <_printf_i+0x21c>)
 8008bec:	220a      	movs	r2, #10
 8008bee:	e039      	b.n	8008c64 <_printf_i+0xd8>
 8008bf0:	2973      	cmp	r1, #115	; 0x73
 8008bf2:	f000 809d 	beq.w	8008d30 <_printf_i+0x1a4>
 8008bf6:	d808      	bhi.n	8008c0a <_printf_i+0x7e>
 8008bf8:	296f      	cmp	r1, #111	; 0x6f
 8008bfa:	d020      	beq.n	8008c3e <_printf_i+0xb2>
 8008bfc:	2970      	cmp	r1, #112	; 0x70
 8008bfe:	d1dd      	bne.n	8008bbc <_printf_i+0x30>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	f043 0320 	orr.w	r3, r3, #32
 8008c06:	6023      	str	r3, [r4, #0]
 8008c08:	e003      	b.n	8008c12 <_printf_i+0x86>
 8008c0a:	2975      	cmp	r1, #117	; 0x75
 8008c0c:	d017      	beq.n	8008c3e <_printf_i+0xb2>
 8008c0e:	2978      	cmp	r1, #120	; 0x78
 8008c10:	d1d4      	bne.n	8008bbc <_printf_i+0x30>
 8008c12:	2378      	movs	r3, #120	; 0x78
 8008c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c18:	4864      	ldr	r0, [pc, #400]	; (8008dac <_printf_i+0x220>)
 8008c1a:	e055      	b.n	8008cc8 <_printf_i+0x13c>
 8008c1c:	6813      	ldr	r3, [r2, #0]
 8008c1e:	1d19      	adds	r1, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6011      	str	r1, [r2, #0]
 8008c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e08c      	b.n	8008d4a <_printf_i+0x1be>
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6011      	str	r1, [r2, #0]
 8008c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c38:	bf18      	it	ne
 8008c3a:	b21b      	sxthne	r3, r3
 8008c3c:	e7cf      	b.n	8008bde <_printf_i+0x52>
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	6825      	ldr	r5, [r4, #0]
 8008c42:	1d18      	adds	r0, r3, #4
 8008c44:	6010      	str	r0, [r2, #0]
 8008c46:	0628      	lsls	r0, r5, #24
 8008c48:	d501      	bpl.n	8008c4e <_printf_i+0xc2>
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	e002      	b.n	8008c54 <_printf_i+0xc8>
 8008c4e:	0668      	lsls	r0, r5, #25
 8008c50:	d5fb      	bpl.n	8008c4a <_printf_i+0xbe>
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	4854      	ldr	r0, [pc, #336]	; (8008da8 <_printf_i+0x21c>)
 8008c56:	296f      	cmp	r1, #111	; 0x6f
 8008c58:	bf14      	ite	ne
 8008c5a:	220a      	movne	r2, #10
 8008c5c:	2208      	moveq	r2, #8
 8008c5e:	2100      	movs	r1, #0
 8008c60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c64:	6865      	ldr	r5, [r4, #4]
 8008c66:	60a5      	str	r5, [r4, #8]
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	f2c0 8095 	blt.w	8008d98 <_printf_i+0x20c>
 8008c6e:	6821      	ldr	r1, [r4, #0]
 8008c70:	f021 0104 	bic.w	r1, r1, #4
 8008c74:	6021      	str	r1, [r4, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d13d      	bne.n	8008cf6 <_printf_i+0x16a>
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	f040 808e 	bne.w	8008d9c <_printf_i+0x210>
 8008c80:	4665      	mov	r5, ip
 8008c82:	2a08      	cmp	r2, #8
 8008c84:	d10b      	bne.n	8008c9e <_printf_i+0x112>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07db      	lsls	r3, r3, #31
 8008c8a:	d508      	bpl.n	8008c9e <_printf_i+0x112>
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	6862      	ldr	r2, [r4, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	bfde      	ittt	le
 8008c94:	2330      	movle	r3, #48	; 0x30
 8008c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c9e:	ebac 0305 	sub.w	r3, ip, r5
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	f8cd 8000 	str.w	r8, [sp]
 8008ca8:	463b      	mov	r3, r7
 8008caa:	aa03      	add	r2, sp, #12
 8008cac:	4621      	mov	r1, r4
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7ff fef6 	bl	8008aa0 <_printf_common>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d14d      	bne.n	8008d54 <_printf_i+0x1c8>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	b005      	add	sp, #20
 8008cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc2:	4839      	ldr	r0, [pc, #228]	; (8008da8 <_printf_i+0x21c>)
 8008cc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cc8:	6813      	ldr	r3, [r2, #0]
 8008cca:	6821      	ldr	r1, [r4, #0]
 8008ccc:	1d1d      	adds	r5, r3, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6015      	str	r5, [r2, #0]
 8008cd2:	060a      	lsls	r2, r1, #24
 8008cd4:	d50b      	bpl.n	8008cee <_printf_i+0x162>
 8008cd6:	07ca      	lsls	r2, r1, #31
 8008cd8:	bf44      	itt	mi
 8008cda:	f041 0120 	orrmi.w	r1, r1, #32
 8008cde:	6021      	strmi	r1, [r4, #0]
 8008ce0:	b91b      	cbnz	r3, 8008cea <_printf_i+0x15e>
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	f022 0220 	bic.w	r2, r2, #32
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	2210      	movs	r2, #16
 8008cec:	e7b7      	b.n	8008c5e <_printf_i+0xd2>
 8008cee:	064d      	lsls	r5, r1, #25
 8008cf0:	bf48      	it	mi
 8008cf2:	b29b      	uxthmi	r3, r3
 8008cf4:	e7ef      	b.n	8008cd6 <_printf_i+0x14a>
 8008cf6:	4665      	mov	r5, ip
 8008cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cfc:	fb02 3311 	mls	r3, r2, r1, r3
 8008d00:	5cc3      	ldrb	r3, [r0, r3]
 8008d02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d06:	460b      	mov	r3, r1
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d1f5      	bne.n	8008cf8 <_printf_i+0x16c>
 8008d0c:	e7b9      	b.n	8008c82 <_printf_i+0xf6>
 8008d0e:	6813      	ldr	r3, [r2, #0]
 8008d10:	6825      	ldr	r5, [r4, #0]
 8008d12:	6961      	ldr	r1, [r4, #20]
 8008d14:	1d18      	adds	r0, r3, #4
 8008d16:	6010      	str	r0, [r2, #0]
 8008d18:	0628      	lsls	r0, r5, #24
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	d501      	bpl.n	8008d22 <_printf_i+0x196>
 8008d1e:	6019      	str	r1, [r3, #0]
 8008d20:	e002      	b.n	8008d28 <_printf_i+0x19c>
 8008d22:	066a      	lsls	r2, r5, #25
 8008d24:	d5fb      	bpl.n	8008d1e <_printf_i+0x192>
 8008d26:	8019      	strh	r1, [r3, #0]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	4665      	mov	r5, ip
 8008d2e:	e7b9      	b.n	8008ca4 <_printf_i+0x118>
 8008d30:	6813      	ldr	r3, [r2, #0]
 8008d32:	1d19      	adds	r1, r3, #4
 8008d34:	6011      	str	r1, [r2, #0]
 8008d36:	681d      	ldr	r5, [r3, #0]
 8008d38:	6862      	ldr	r2, [r4, #4]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f7f7 fa67 	bl	8000210 <memchr>
 8008d42:	b108      	cbz	r0, 8008d48 <_printf_i+0x1bc>
 8008d44:	1b40      	subs	r0, r0, r5
 8008d46:	6060      	str	r0, [r4, #4]
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	6123      	str	r3, [r4, #16]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d52:	e7a7      	b.n	8008ca4 <_printf_i+0x118>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	462a      	mov	r2, r5
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	47c0      	blx	r8
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d0aa      	beq.n	8008cb8 <_printf_i+0x12c>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	079b      	lsls	r3, r3, #30
 8008d66:	d413      	bmi.n	8008d90 <_printf_i+0x204>
 8008d68:	68e0      	ldr	r0, [r4, #12]
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	bfb8      	it	lt
 8008d70:	4618      	movlt	r0, r3
 8008d72:	e7a3      	b.n	8008cbc <_printf_i+0x130>
 8008d74:	2301      	movs	r3, #1
 8008d76:	464a      	mov	r2, r9
 8008d78:	4639      	mov	r1, r7
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	47c0      	blx	r8
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d09a      	beq.n	8008cb8 <_printf_i+0x12c>
 8008d82:	3501      	adds	r5, #1
 8008d84:	68e3      	ldr	r3, [r4, #12]
 8008d86:	9a03      	ldr	r2, [sp, #12]
 8008d88:	1a9b      	subs	r3, r3, r2
 8008d8a:	42ab      	cmp	r3, r5
 8008d8c:	dcf2      	bgt.n	8008d74 <_printf_i+0x1e8>
 8008d8e:	e7eb      	b.n	8008d68 <_printf_i+0x1dc>
 8008d90:	2500      	movs	r5, #0
 8008d92:	f104 0919 	add.w	r9, r4, #25
 8008d96:	e7f5      	b.n	8008d84 <_printf_i+0x1f8>
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1ac      	bne.n	8008cf6 <_printf_i+0x16a>
 8008d9c:	7803      	ldrb	r3, [r0, #0]
 8008d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da6:	e76c      	b.n	8008c82 <_printf_i+0xf6>
 8008da8:	0800a67e 	.word	0x0800a67e
 8008dac:	0800a68f 	.word	0x0800a68f

08008db0 <siprintf>:
 8008db0:	b40e      	push	{r1, r2, r3}
 8008db2:	b500      	push	{lr}
 8008db4:	b09c      	sub	sp, #112	; 0x70
 8008db6:	ab1d      	add	r3, sp, #116	; 0x74
 8008db8:	9002      	str	r0, [sp, #8]
 8008dba:	9006      	str	r0, [sp, #24]
 8008dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dc0:	4809      	ldr	r0, [pc, #36]	; (8008de8 <siprintf+0x38>)
 8008dc2:	9107      	str	r1, [sp, #28]
 8008dc4:	9104      	str	r1, [sp, #16]
 8008dc6:	4909      	ldr	r1, [pc, #36]	; (8008dec <siprintf+0x3c>)
 8008dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	a902      	add	r1, sp, #8
 8008dd4:	f001 fa52 	bl	800a27c <_svfiprintf_r>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	b01c      	add	sp, #112	; 0x70
 8008de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de4:	b003      	add	sp, #12
 8008de6:	4770      	bx	lr
 8008de8:	20000010 	.word	0x20000010
 8008dec:	ffff0208 	.word	0xffff0208

08008df0 <quorem>:
 8008df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	6903      	ldr	r3, [r0, #16]
 8008df6:	690c      	ldr	r4, [r1, #16]
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	f2c0 8082 	blt.w	8008f04 <quorem+0x114>
 8008e00:	3c01      	subs	r4, #1
 8008e02:	f101 0714 	add.w	r7, r1, #20
 8008e06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008e0a:	f100 0614 	add.w	r6, r0, #20
 8008e0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008e12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e16:	eb06 030c 	add.w	r3, r6, ip
 8008e1a:	3501      	adds	r5, #1
 8008e1c:	eb07 090c 	add.w	r9, r7, ip
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e26:	b395      	cbz	r5, 8008e8e <quorem+0x9e>
 8008e28:	f04f 0a00 	mov.w	sl, #0
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	46b6      	mov	lr, r6
 8008e30:	46d3      	mov	fp, sl
 8008e32:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e36:	b293      	uxth	r3, r2
 8008e38:	fb05 a303 	mla	r3, r5, r3, sl
 8008e3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	ebab 0303 	sub.w	r3, fp, r3
 8008e46:	0c12      	lsrs	r2, r2, #16
 8008e48:	f8de b000 	ldr.w	fp, [lr]
 8008e4c:	fb05 a202 	mla	r2, r5, r2, sl
 8008e50:	fa13 f38b 	uxtah	r3, r3, fp
 8008e54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e58:	fa1f fb82 	uxth.w	fp, r2
 8008e5c:	f8de 2000 	ldr.w	r2, [lr]
 8008e60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e6e:	4581      	cmp	r9, r0
 8008e70:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e74:	f84e 3b04 	str.w	r3, [lr], #4
 8008e78:	d2db      	bcs.n	8008e32 <quorem+0x42>
 8008e7a:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e7e:	b933      	cbnz	r3, 8008e8e <quorem+0x9e>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	3b04      	subs	r3, #4
 8008e84:	429e      	cmp	r6, r3
 8008e86:	461a      	mov	r2, r3
 8008e88:	d330      	bcc.n	8008eec <quorem+0xfc>
 8008e8a:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f001 f81e 	bl	8009ed0 <__mcmp>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	db25      	blt.n	8008ee4 <quorem+0xf4>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f04f 0c00 	mov.w	ip, #0
 8008ea0:	f857 2b04 	ldr.w	r2, [r7], #4
 8008ea4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ea8:	b293      	uxth	r3, r2
 8008eaa:	ebac 0303 	sub.w	r3, ip, r3
 8008eae:	0c12      	lsrs	r2, r2, #16
 8008eb0:	fa13 f38e 	uxtah	r3, r3, lr
 8008eb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008eb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ec2:	45b9      	cmp	r9, r7
 8008ec4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ec8:	f840 3b04 	str.w	r3, [r0], #4
 8008ecc:	d2e8      	bcs.n	8008ea0 <quorem+0xb0>
 8008ece:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008ed2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008ed6:	b92a      	cbnz	r2, 8008ee4 <quorem+0xf4>
 8008ed8:	3b04      	subs	r3, #4
 8008eda:	429e      	cmp	r6, r3
 8008edc:	461a      	mov	r2, r3
 8008ede:	d30b      	bcc.n	8008ef8 <quorem+0x108>
 8008ee0:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	b003      	add	sp, #12
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	3b04      	subs	r3, #4
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	d1ca      	bne.n	8008e8a <quorem+0x9a>
 8008ef4:	3c01      	subs	r4, #1
 8008ef6:	e7c5      	b.n	8008e84 <quorem+0x94>
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	d1ef      	bne.n	8008ee0 <quorem+0xf0>
 8008f00:	3c01      	subs	r4, #1
 8008f02:	e7ea      	b.n	8008eda <quorem+0xea>
 8008f04:	2000      	movs	r0, #0
 8008f06:	e7ee      	b.n	8008ee6 <quorem+0xf6>

08008f08 <_dtoa_r>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	ec57 6b10 	vmov	r6, r7, d0
 8008f10:	b097      	sub	sp, #92	; 0x5c
 8008f12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f14:	9106      	str	r1, [sp, #24]
 8008f16:	4604      	mov	r4, r0
 8008f18:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f1a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f20:	e9cd 6700 	strd	r6, r7, [sp]
 8008f24:	b93d      	cbnz	r5, 8008f36 <_dtoa_r+0x2e>
 8008f26:	2010      	movs	r0, #16
 8008f28:	f000 fdb4 	bl	8009a94 <malloc>
 8008f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f32:	6005      	str	r5, [r0, #0]
 8008f34:	60c5      	str	r5, [r0, #12]
 8008f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f38:	6819      	ldr	r1, [r3, #0]
 8008f3a:	b151      	cbz	r1, 8008f52 <_dtoa_r+0x4a>
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	604a      	str	r2, [r1, #4]
 8008f40:	2301      	movs	r3, #1
 8008f42:	4093      	lsls	r3, r2
 8008f44:	608b      	str	r3, [r1, #8]
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fde0 	bl	8009b0c <_Bfree>
 8008f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	1e3b      	subs	r3, r7, #0
 8008f54:	bfbb      	ittet	lt
 8008f56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f5a:	9301      	strlt	r3, [sp, #4]
 8008f5c:	2300      	movge	r3, #0
 8008f5e:	2201      	movlt	r2, #1
 8008f60:	bfac      	ite	ge
 8008f62:	f8c8 3000 	strge.w	r3, [r8]
 8008f66:	f8c8 2000 	strlt.w	r2, [r8]
 8008f6a:	4baf      	ldr	r3, [pc, #700]	; (8009228 <_dtoa_r+0x320>)
 8008f6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f70:	ea33 0308 	bics.w	r3, r3, r8
 8008f74:	d114      	bne.n	8008fa0 <_dtoa_r+0x98>
 8008f76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	9b00      	ldr	r3, [sp, #0]
 8008f80:	b923      	cbnz	r3, 8008f8c <_dtoa_r+0x84>
 8008f82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f000 8542 	beq.w	8009a10 <_dtoa_r+0xb08>
 8008f8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800923c <_dtoa_r+0x334>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 8544 	beq.w	8009a20 <_dtoa_r+0xb18>
 8008f98:	f10b 0303 	add.w	r3, fp, #3
 8008f9c:	f000 bd3e 	b.w	8009a1c <_dtoa_r+0xb14>
 8008fa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4630      	mov	r0, r6
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8008fb0:	4681      	mov	r9, r0
 8008fb2:	b168      	cbz	r0, 8008fd0 <_dtoa_r+0xc8>
 8008fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8524 	beq.w	8009a0a <_dtoa_r+0xb02>
 8008fc2:	4b9a      	ldr	r3, [pc, #616]	; (800922c <_dtoa_r+0x324>)
 8008fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	f000 bd28 	b.w	8009a20 <_dtoa_r+0xb18>
 8008fd0:	aa14      	add	r2, sp, #80	; 0x50
 8008fd2:	a915      	add	r1, sp, #84	; 0x54
 8008fd4:	ec47 6b10 	vmov	d0, r6, r7
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fff0 	bl	8009fbe <__d2b>
 8008fde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fe2:	9004      	str	r0, [sp, #16]
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	d07c      	beq.n	80090e2 <_dtoa_r+0x1da>
 8008fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008ff0:	46b2      	mov	sl, r6
 8008ff2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008ff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ffa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b8b      	ldr	r3, [pc, #556]	; (8009230 <_dtoa_r+0x328>)
 8009002:	4650      	mov	r0, sl
 8009004:	4659      	mov	r1, fp
 8009006:	f7f7 f957 	bl	80002b8 <__aeabi_dsub>
 800900a:	a381      	add	r3, pc, #516	; (adr r3, 8009210 <_dtoa_r+0x308>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f7f7 fb0a 	bl	8000628 <__aeabi_dmul>
 8009014:	a380      	add	r3, pc, #512	; (adr r3, 8009218 <_dtoa_r+0x310>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 f94f 	bl	80002bc <__adddf3>
 800901e:	4606      	mov	r6, r0
 8009020:	4628      	mov	r0, r5
 8009022:	460f      	mov	r7, r1
 8009024:	f7f7 fa96 	bl	8000554 <__aeabi_i2d>
 8009028:	a37d      	add	r3, pc, #500	; (adr r3, 8009220 <_dtoa_r+0x318>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 fafb 	bl	8000628 <__aeabi_dmul>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4630      	mov	r0, r6
 8009038:	4639      	mov	r1, r7
 800903a:	f7f7 f93f 	bl	80002bc <__adddf3>
 800903e:	4606      	mov	r6, r0
 8009040:	460f      	mov	r7, r1
 8009042:	f7f7 fda1 	bl	8000b88 <__aeabi_d2iz>
 8009046:	2200      	movs	r2, #0
 8009048:	4682      	mov	sl, r0
 800904a:	2300      	movs	r3, #0
 800904c:	4630      	mov	r0, r6
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 fd5c 	bl	8000b0c <__aeabi_dcmplt>
 8009054:	b148      	cbz	r0, 800906a <_dtoa_r+0x162>
 8009056:	4650      	mov	r0, sl
 8009058:	f7f7 fa7c 	bl	8000554 <__aeabi_i2d>
 800905c:	4632      	mov	r2, r6
 800905e:	463b      	mov	r3, r7
 8009060:	f7f7 fd4a 	bl	8000af8 <__aeabi_dcmpeq>
 8009064:	b908      	cbnz	r0, 800906a <_dtoa_r+0x162>
 8009066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800906a:	f1ba 0f16 	cmp.w	sl, #22
 800906e:	d859      	bhi.n	8009124 <_dtoa_r+0x21c>
 8009070:	4970      	ldr	r1, [pc, #448]	; (8009234 <_dtoa_r+0x32c>)
 8009072:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800907a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907e:	f7f7 fd63 	bl	8000b48 <__aeabi_dcmpgt>
 8009082:	2800      	cmp	r0, #0
 8009084:	d050      	beq.n	8009128 <_dtoa_r+0x220>
 8009086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908a:	2300      	movs	r3, #0
 800908c:	930f      	str	r3, [sp, #60]	; 0x3c
 800908e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009090:	1b5d      	subs	r5, r3, r5
 8009092:	f1b5 0801 	subs.w	r8, r5, #1
 8009096:	bf49      	itett	mi
 8009098:	f1c5 0301 	rsbmi	r3, r5, #1
 800909c:	2300      	movpl	r3, #0
 800909e:	9305      	strmi	r3, [sp, #20]
 80090a0:	f04f 0800 	movmi.w	r8, #0
 80090a4:	bf58      	it	pl
 80090a6:	9305      	strpl	r3, [sp, #20]
 80090a8:	f1ba 0f00 	cmp.w	sl, #0
 80090ac:	db3e      	blt.n	800912c <_dtoa_r+0x224>
 80090ae:	2300      	movs	r3, #0
 80090b0:	44d0      	add	r8, sl
 80090b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	9b06      	ldr	r3, [sp, #24]
 80090ba:	2b09      	cmp	r3, #9
 80090bc:	f200 8090 	bhi.w	80091e0 <_dtoa_r+0x2d8>
 80090c0:	2b05      	cmp	r3, #5
 80090c2:	bfc4      	itt	gt
 80090c4:	3b04      	subgt	r3, #4
 80090c6:	9306      	strgt	r3, [sp, #24]
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	f1a3 0302 	sub.w	r3, r3, #2
 80090ce:	bfcc      	ite	gt
 80090d0:	2500      	movgt	r5, #0
 80090d2:	2501      	movle	r5, #1
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	f200 808f 	bhi.w	80091f8 <_dtoa_r+0x2f0>
 80090da:	e8df f003 	tbb	[pc, r3]
 80090de:	7f7d      	.short	0x7f7d
 80090e0:	7131      	.short	0x7131
 80090e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80090e6:	441d      	add	r5, r3
 80090e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80090ec:	2820      	cmp	r0, #32
 80090ee:	dd13      	ble.n	8009118 <_dtoa_r+0x210>
 80090f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	fa08 f800 	lsl.w	r8, r8, r0
 80090fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80090fe:	fa23 f000 	lsr.w	r0, r3, r0
 8009102:	ea48 0000 	orr.w	r0, r8, r0
 8009106:	f7f7 fa15 	bl	8000534 <__aeabi_ui2d>
 800910a:	2301      	movs	r3, #1
 800910c:	4682      	mov	sl, r0
 800910e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009112:	3d01      	subs	r5, #1
 8009114:	9313      	str	r3, [sp, #76]	; 0x4c
 8009116:	e772      	b.n	8008ffe <_dtoa_r+0xf6>
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	f1c0 0020 	rsb	r0, r0, #32
 800911e:	fa03 f000 	lsl.w	r0, r3, r0
 8009122:	e7f0      	b.n	8009106 <_dtoa_r+0x1fe>
 8009124:	2301      	movs	r3, #1
 8009126:	e7b1      	b.n	800908c <_dtoa_r+0x184>
 8009128:	900f      	str	r0, [sp, #60]	; 0x3c
 800912a:	e7b0      	b.n	800908e <_dtoa_r+0x186>
 800912c:	9b05      	ldr	r3, [sp, #20]
 800912e:	eba3 030a 	sub.w	r3, r3, sl
 8009132:	9305      	str	r3, [sp, #20]
 8009134:	f1ca 0300 	rsb	r3, sl, #0
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	2300      	movs	r3, #0
 800913c:	930e      	str	r3, [sp, #56]	; 0x38
 800913e:	e7bb      	b.n	80090b8 <_dtoa_r+0x1b0>
 8009140:	2301      	movs	r3, #1
 8009142:	930a      	str	r3, [sp, #40]	; 0x28
 8009144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009146:	2b00      	cmp	r3, #0
 8009148:	dd59      	ble.n	80091fe <_dtoa_r+0x2f6>
 800914a:	9302      	str	r3, [sp, #8]
 800914c:	4699      	mov	r9, r3
 800914e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009150:	2200      	movs	r2, #0
 8009152:	6072      	str	r2, [r6, #4]
 8009154:	2204      	movs	r2, #4
 8009156:	f102 0014 	add.w	r0, r2, #20
 800915a:	4298      	cmp	r0, r3
 800915c:	6871      	ldr	r1, [r6, #4]
 800915e:	d953      	bls.n	8009208 <_dtoa_r+0x300>
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fc9f 	bl	8009aa4 <_Balloc>
 8009166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009168:	6030      	str	r0, [r6, #0]
 800916a:	f1b9 0f0e 	cmp.w	r9, #14
 800916e:	f8d3 b000 	ldr.w	fp, [r3]
 8009172:	f200 80e6 	bhi.w	8009342 <_dtoa_r+0x43a>
 8009176:	2d00      	cmp	r5, #0
 8009178:	f000 80e3 	beq.w	8009342 <_dtoa_r+0x43a>
 800917c:	ed9d 7b00 	vldr	d7, [sp]
 8009180:	f1ba 0f00 	cmp.w	sl, #0
 8009184:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009188:	dd74      	ble.n	8009274 <_dtoa_r+0x36c>
 800918a:	4a2a      	ldr	r2, [pc, #168]	; (8009234 <_dtoa_r+0x32c>)
 800918c:	f00a 030f 	and.w	r3, sl, #15
 8009190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009194:	ed93 7b00 	vldr	d7, [r3]
 8009198:	ea4f 162a 	mov.w	r6, sl, asr #4
 800919c:	06f0      	lsls	r0, r6, #27
 800919e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80091a2:	d565      	bpl.n	8009270 <_dtoa_r+0x368>
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <_dtoa_r+0x330>)
 80091a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091ae:	f7f7 fb65 	bl	800087c <__aeabi_ddiv>
 80091b2:	e9cd 0100 	strd	r0, r1, [sp]
 80091b6:	f006 060f 	and.w	r6, r6, #15
 80091ba:	2503      	movs	r5, #3
 80091bc:	4f1e      	ldr	r7, [pc, #120]	; (8009238 <_dtoa_r+0x330>)
 80091be:	e04c      	b.n	800925a <_dtoa_r+0x352>
 80091c0:	2301      	movs	r3, #1
 80091c2:	930a      	str	r3, [sp, #40]	; 0x28
 80091c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c6:	4453      	add	r3, sl
 80091c8:	f103 0901 	add.w	r9, r3, #1
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	464b      	mov	r3, r9
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	bfb8      	it	lt
 80091d4:	2301      	movlt	r3, #1
 80091d6:	e7ba      	b.n	800914e <_dtoa_r+0x246>
 80091d8:	2300      	movs	r3, #0
 80091da:	e7b2      	b.n	8009142 <_dtoa_r+0x23a>
 80091dc:	2300      	movs	r3, #0
 80091de:	e7f0      	b.n	80091c2 <_dtoa_r+0x2ba>
 80091e0:	2501      	movs	r5, #1
 80091e2:	2300      	movs	r3, #0
 80091e4:	9306      	str	r3, [sp, #24]
 80091e6:	950a      	str	r5, [sp, #40]	; 0x28
 80091e8:	f04f 33ff 	mov.w	r3, #4294967295
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	4699      	mov	r9, r3
 80091f0:	2200      	movs	r2, #0
 80091f2:	2312      	movs	r3, #18
 80091f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80091f6:	e7aa      	b.n	800914e <_dtoa_r+0x246>
 80091f8:	2301      	movs	r3, #1
 80091fa:	930a      	str	r3, [sp, #40]	; 0x28
 80091fc:	e7f4      	b.n	80091e8 <_dtoa_r+0x2e0>
 80091fe:	2301      	movs	r3, #1
 8009200:	9302      	str	r3, [sp, #8]
 8009202:	4699      	mov	r9, r3
 8009204:	461a      	mov	r2, r3
 8009206:	e7f5      	b.n	80091f4 <_dtoa_r+0x2ec>
 8009208:	3101      	adds	r1, #1
 800920a:	6071      	str	r1, [r6, #4]
 800920c:	0052      	lsls	r2, r2, #1
 800920e:	e7a2      	b.n	8009156 <_dtoa_r+0x24e>
 8009210:	636f4361 	.word	0x636f4361
 8009214:	3fd287a7 	.word	0x3fd287a7
 8009218:	8b60c8b3 	.word	0x8b60c8b3
 800921c:	3fc68a28 	.word	0x3fc68a28
 8009220:	509f79fb 	.word	0x509f79fb
 8009224:	3fd34413 	.word	0x3fd34413
 8009228:	7ff00000 	.word	0x7ff00000
 800922c:	0800a67d 	.word	0x0800a67d
 8009230:	3ff80000 	.word	0x3ff80000
 8009234:	0800a6d8 	.word	0x0800a6d8
 8009238:	0800a6b0 	.word	0x0800a6b0
 800923c:	0800a6a9 	.word	0x0800a6a9
 8009240:	07f1      	lsls	r1, r6, #31
 8009242:	d508      	bpl.n	8009256 <_dtoa_r+0x34e>
 8009244:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924c:	f7f7 f9ec 	bl	8000628 <__aeabi_dmul>
 8009250:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009254:	3501      	adds	r5, #1
 8009256:	1076      	asrs	r6, r6, #1
 8009258:	3708      	adds	r7, #8
 800925a:	2e00      	cmp	r6, #0
 800925c:	d1f0      	bne.n	8009240 <_dtoa_r+0x338>
 800925e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009266:	f7f7 fb09 	bl	800087c <__aeabi_ddiv>
 800926a:	e9cd 0100 	strd	r0, r1, [sp]
 800926e:	e01a      	b.n	80092a6 <_dtoa_r+0x39e>
 8009270:	2502      	movs	r5, #2
 8009272:	e7a3      	b.n	80091bc <_dtoa_r+0x2b4>
 8009274:	f000 80a0 	beq.w	80093b8 <_dtoa_r+0x4b0>
 8009278:	f1ca 0600 	rsb	r6, sl, #0
 800927c:	4b9f      	ldr	r3, [pc, #636]	; (80094fc <_dtoa_r+0x5f4>)
 800927e:	4fa0      	ldr	r7, [pc, #640]	; (8009500 <_dtoa_r+0x5f8>)
 8009280:	f006 020f 	and.w	r2, r6, #15
 8009284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009290:	f7f7 f9ca 	bl	8000628 <__aeabi_dmul>
 8009294:	e9cd 0100 	strd	r0, r1, [sp]
 8009298:	1136      	asrs	r6, r6, #4
 800929a:	2300      	movs	r3, #0
 800929c:	2502      	movs	r5, #2
 800929e:	2e00      	cmp	r6, #0
 80092a0:	d17f      	bne.n	80093a2 <_dtoa_r+0x49a>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e1      	bne.n	800926a <_dtoa_r+0x362>
 80092a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 8087 	beq.w	80093bc <_dtoa_r+0x4b4>
 80092ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80092b2:	2200      	movs	r2, #0
 80092b4:	4b93      	ldr	r3, [pc, #588]	; (8009504 <_dtoa_r+0x5fc>)
 80092b6:	4630      	mov	r0, r6
 80092b8:	4639      	mov	r1, r7
 80092ba:	f7f7 fc27 	bl	8000b0c <__aeabi_dcmplt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d07c      	beq.n	80093bc <_dtoa_r+0x4b4>
 80092c2:	f1b9 0f00 	cmp.w	r9, #0
 80092c6:	d079      	beq.n	80093bc <_dtoa_r+0x4b4>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dd35      	ble.n	800933a <_dtoa_r+0x432>
 80092ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80092d2:	9308      	str	r3, [sp, #32]
 80092d4:	4639      	mov	r1, r7
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b8b      	ldr	r3, [pc, #556]	; (8009508 <_dtoa_r+0x600>)
 80092da:	4630      	mov	r0, r6
 80092dc:	f7f7 f9a4 	bl	8000628 <__aeabi_dmul>
 80092e0:	e9cd 0100 	strd	r0, r1, [sp]
 80092e4:	9f02      	ldr	r7, [sp, #8]
 80092e6:	3501      	adds	r5, #1
 80092e8:	4628      	mov	r0, r5
 80092ea:	f7f7 f933 	bl	8000554 <__aeabi_i2d>
 80092ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f2:	f7f7 f999 	bl	8000628 <__aeabi_dmul>
 80092f6:	2200      	movs	r2, #0
 80092f8:	4b84      	ldr	r3, [pc, #528]	; (800950c <_dtoa_r+0x604>)
 80092fa:	f7f6 ffdf 	bl	80002bc <__adddf3>
 80092fe:	4605      	mov	r5, r0
 8009300:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009304:	2f00      	cmp	r7, #0
 8009306:	d15d      	bne.n	80093c4 <_dtoa_r+0x4bc>
 8009308:	2200      	movs	r2, #0
 800930a:	4b81      	ldr	r3, [pc, #516]	; (8009510 <_dtoa_r+0x608>)
 800930c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009310:	f7f6 ffd2 	bl	80002b8 <__aeabi_dsub>
 8009314:	462a      	mov	r2, r5
 8009316:	4633      	mov	r3, r6
 8009318:	e9cd 0100 	strd	r0, r1, [sp]
 800931c:	f7f7 fc14 	bl	8000b48 <__aeabi_dcmpgt>
 8009320:	2800      	cmp	r0, #0
 8009322:	f040 8288 	bne.w	8009836 <_dtoa_r+0x92e>
 8009326:	462a      	mov	r2, r5
 8009328:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800932c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009330:	f7f7 fbec 	bl	8000b0c <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	f040 827c 	bne.w	8009832 <_dtoa_r+0x92a>
 800933a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800933e:	e9cd 2300 	strd	r2, r3, [sp]
 8009342:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009344:	2b00      	cmp	r3, #0
 8009346:	f2c0 8150 	blt.w	80095ea <_dtoa_r+0x6e2>
 800934a:	f1ba 0f0e 	cmp.w	sl, #14
 800934e:	f300 814c 	bgt.w	80095ea <_dtoa_r+0x6e2>
 8009352:	4b6a      	ldr	r3, [pc, #424]	; (80094fc <_dtoa_r+0x5f4>)
 8009354:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009358:	ed93 7b00 	vldr	d7, [r3]
 800935c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800935e:	2b00      	cmp	r3, #0
 8009360:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009364:	f280 80d8 	bge.w	8009518 <_dtoa_r+0x610>
 8009368:	f1b9 0f00 	cmp.w	r9, #0
 800936c:	f300 80d4 	bgt.w	8009518 <_dtoa_r+0x610>
 8009370:	f040 825e 	bne.w	8009830 <_dtoa_r+0x928>
 8009374:	2200      	movs	r2, #0
 8009376:	4b66      	ldr	r3, [pc, #408]	; (8009510 <_dtoa_r+0x608>)
 8009378:	ec51 0b17 	vmov	r0, r1, d7
 800937c:	f7f7 f954 	bl	8000628 <__aeabi_dmul>
 8009380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009384:	f7f7 fbd6 	bl	8000b34 <__aeabi_dcmpge>
 8009388:	464f      	mov	r7, r9
 800938a:	464e      	mov	r6, r9
 800938c:	2800      	cmp	r0, #0
 800938e:	f040 8234 	bne.w	80097fa <_dtoa_r+0x8f2>
 8009392:	2331      	movs	r3, #49	; 0x31
 8009394:	f10b 0501 	add.w	r5, fp, #1
 8009398:	f88b 3000 	strb.w	r3, [fp]
 800939c:	f10a 0a01 	add.w	sl, sl, #1
 80093a0:	e22f      	b.n	8009802 <_dtoa_r+0x8fa>
 80093a2:	07f2      	lsls	r2, r6, #31
 80093a4:	d505      	bpl.n	80093b2 <_dtoa_r+0x4aa>
 80093a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093aa:	f7f7 f93d 	bl	8000628 <__aeabi_dmul>
 80093ae:	3501      	adds	r5, #1
 80093b0:	2301      	movs	r3, #1
 80093b2:	1076      	asrs	r6, r6, #1
 80093b4:	3708      	adds	r7, #8
 80093b6:	e772      	b.n	800929e <_dtoa_r+0x396>
 80093b8:	2502      	movs	r5, #2
 80093ba:	e774      	b.n	80092a6 <_dtoa_r+0x39e>
 80093bc:	f8cd a020 	str.w	sl, [sp, #32]
 80093c0:	464f      	mov	r7, r9
 80093c2:	e791      	b.n	80092e8 <_dtoa_r+0x3e0>
 80093c4:	4b4d      	ldr	r3, [pc, #308]	; (80094fc <_dtoa_r+0x5f4>)
 80093c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d047      	beq.n	8009464 <_dtoa_r+0x55c>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	2000      	movs	r0, #0
 80093da:	494e      	ldr	r1, [pc, #312]	; (8009514 <_dtoa_r+0x60c>)
 80093dc:	f7f7 fa4e 	bl	800087c <__aeabi_ddiv>
 80093e0:	462a      	mov	r2, r5
 80093e2:	4633      	mov	r3, r6
 80093e4:	f7f6 ff68 	bl	80002b8 <__aeabi_dsub>
 80093e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093ec:	465d      	mov	r5, fp
 80093ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f2:	f7f7 fbc9 	bl	8000b88 <__aeabi_d2iz>
 80093f6:	4606      	mov	r6, r0
 80093f8:	f7f7 f8ac 	bl	8000554 <__aeabi_i2d>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009404:	f7f6 ff58 	bl	80002b8 <__aeabi_dsub>
 8009408:	3630      	adds	r6, #48	; 0x30
 800940a:	f805 6b01 	strb.w	r6, [r5], #1
 800940e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009412:	e9cd 0100 	strd	r0, r1, [sp]
 8009416:	f7f7 fb79 	bl	8000b0c <__aeabi_dcmplt>
 800941a:	2800      	cmp	r0, #0
 800941c:	d163      	bne.n	80094e6 <_dtoa_r+0x5de>
 800941e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009422:	2000      	movs	r0, #0
 8009424:	4937      	ldr	r1, [pc, #220]	; (8009504 <_dtoa_r+0x5fc>)
 8009426:	f7f6 ff47 	bl	80002b8 <__aeabi_dsub>
 800942a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800942e:	f7f7 fb6d 	bl	8000b0c <__aeabi_dcmplt>
 8009432:	2800      	cmp	r0, #0
 8009434:	f040 80b7 	bne.w	80095a6 <_dtoa_r+0x69e>
 8009438:	eba5 030b 	sub.w	r3, r5, fp
 800943c:	429f      	cmp	r7, r3
 800943e:	f77f af7c 	ble.w	800933a <_dtoa_r+0x432>
 8009442:	2200      	movs	r2, #0
 8009444:	4b30      	ldr	r3, [pc, #192]	; (8009508 <_dtoa_r+0x600>)
 8009446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800944a:	f7f7 f8ed 	bl	8000628 <__aeabi_dmul>
 800944e:	2200      	movs	r2, #0
 8009450:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009454:	4b2c      	ldr	r3, [pc, #176]	; (8009508 <_dtoa_r+0x600>)
 8009456:	e9dd 0100 	ldrd	r0, r1, [sp]
 800945a:	f7f7 f8e5 	bl	8000628 <__aeabi_dmul>
 800945e:	e9cd 0100 	strd	r0, r1, [sp]
 8009462:	e7c4      	b.n	80093ee <_dtoa_r+0x4e6>
 8009464:	462a      	mov	r2, r5
 8009466:	4633      	mov	r3, r6
 8009468:	f7f7 f8de 	bl	8000628 <__aeabi_dmul>
 800946c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009470:	eb0b 0507 	add.w	r5, fp, r7
 8009474:	465e      	mov	r6, fp
 8009476:	e9dd 0100 	ldrd	r0, r1, [sp]
 800947a:	f7f7 fb85 	bl	8000b88 <__aeabi_d2iz>
 800947e:	4607      	mov	r7, r0
 8009480:	f7f7 f868 	bl	8000554 <__aeabi_i2d>
 8009484:	3730      	adds	r7, #48	; 0x30
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800948e:	f7f6 ff13 	bl	80002b8 <__aeabi_dsub>
 8009492:	f806 7b01 	strb.w	r7, [r6], #1
 8009496:	42ae      	cmp	r6, r5
 8009498:	e9cd 0100 	strd	r0, r1, [sp]
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	d126      	bne.n	80094f0 <_dtoa_r+0x5e8>
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <_dtoa_r+0x60c>)
 80094a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094a8:	f7f6 ff08 	bl	80002bc <__adddf3>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094b4:	f7f7 fb48 	bl	8000b48 <__aeabi_dcmpgt>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d174      	bne.n	80095a6 <_dtoa_r+0x69e>
 80094bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094c0:	2000      	movs	r0, #0
 80094c2:	4914      	ldr	r1, [pc, #80]	; (8009514 <_dtoa_r+0x60c>)
 80094c4:	f7f6 fef8 	bl	80002b8 <__aeabi_dsub>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094d0:	f7f7 fb1c 	bl	8000b0c <__aeabi_dcmplt>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f af30 	beq.w	800933a <_dtoa_r+0x432>
 80094da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094de:	2b30      	cmp	r3, #48	; 0x30
 80094e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80094e4:	d002      	beq.n	80094ec <_dtoa_r+0x5e4>
 80094e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80094ea:	e04a      	b.n	8009582 <_dtoa_r+0x67a>
 80094ec:	4615      	mov	r5, r2
 80094ee:	e7f4      	b.n	80094da <_dtoa_r+0x5d2>
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <_dtoa_r+0x600>)
 80094f2:	f7f7 f899 	bl	8000628 <__aeabi_dmul>
 80094f6:	e9cd 0100 	strd	r0, r1, [sp]
 80094fa:	e7bc      	b.n	8009476 <_dtoa_r+0x56e>
 80094fc:	0800a6d8 	.word	0x0800a6d8
 8009500:	0800a6b0 	.word	0x0800a6b0
 8009504:	3ff00000 	.word	0x3ff00000
 8009508:	40240000 	.word	0x40240000
 800950c:	401c0000 	.word	0x401c0000
 8009510:	40140000 	.word	0x40140000
 8009514:	3fe00000 	.word	0x3fe00000
 8009518:	e9dd 6700 	ldrd	r6, r7, [sp]
 800951c:	465d      	mov	r5, fp
 800951e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009522:	4630      	mov	r0, r6
 8009524:	4639      	mov	r1, r7
 8009526:	f7f7 f9a9 	bl	800087c <__aeabi_ddiv>
 800952a:	f7f7 fb2d 	bl	8000b88 <__aeabi_d2iz>
 800952e:	4680      	mov	r8, r0
 8009530:	f7f7 f810 	bl	8000554 <__aeabi_i2d>
 8009534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009538:	f7f7 f876 	bl	8000628 <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009548:	f7f6 feb6 	bl	80002b8 <__aeabi_dsub>
 800954c:	f805 6b01 	strb.w	r6, [r5], #1
 8009550:	eba5 060b 	sub.w	r6, r5, fp
 8009554:	45b1      	cmp	r9, r6
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	d139      	bne.n	80095d0 <_dtoa_r+0x6c8>
 800955c:	f7f6 feae 	bl	80002bc <__adddf3>
 8009560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009564:	4606      	mov	r6, r0
 8009566:	460f      	mov	r7, r1
 8009568:	f7f7 faee 	bl	8000b48 <__aeabi_dcmpgt>
 800956c:	b9c8      	cbnz	r0, 80095a2 <_dtoa_r+0x69a>
 800956e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009572:	4630      	mov	r0, r6
 8009574:	4639      	mov	r1, r7
 8009576:	f7f7 fabf 	bl	8000af8 <__aeabi_dcmpeq>
 800957a:	b110      	cbz	r0, 8009582 <_dtoa_r+0x67a>
 800957c:	f018 0f01 	tst.w	r8, #1
 8009580:	d10f      	bne.n	80095a2 <_dtoa_r+0x69a>
 8009582:	9904      	ldr	r1, [sp, #16]
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fac1 	bl	8009b0c <_Bfree>
 800958a:	2300      	movs	r3, #0
 800958c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800958e:	702b      	strb	r3, [r5, #0]
 8009590:	f10a 0301 	add.w	r3, sl, #1
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 8241 	beq.w	8009a20 <_dtoa_r+0xb18>
 800959e:	601d      	str	r5, [r3, #0]
 80095a0:	e23e      	b.n	8009a20 <_dtoa_r+0xb18>
 80095a2:	f8cd a020 	str.w	sl, [sp, #32]
 80095a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095aa:	2a39      	cmp	r2, #57	; 0x39
 80095ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80095b0:	d108      	bne.n	80095c4 <_dtoa_r+0x6bc>
 80095b2:	459b      	cmp	fp, r3
 80095b4:	d10a      	bne.n	80095cc <_dtoa_r+0x6c4>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	3301      	adds	r3, #1
 80095ba:	9308      	str	r3, [sp, #32]
 80095bc:	2330      	movs	r3, #48	; 0x30
 80095be:	f88b 3000 	strb.w	r3, [fp]
 80095c2:	465b      	mov	r3, fp
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	3201      	adds	r2, #1
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	e78c      	b.n	80094e6 <_dtoa_r+0x5de>
 80095cc:	461d      	mov	r5, r3
 80095ce:	e7ea      	b.n	80095a6 <_dtoa_r+0x69e>
 80095d0:	2200      	movs	r2, #0
 80095d2:	4b9b      	ldr	r3, [pc, #620]	; (8009840 <_dtoa_r+0x938>)
 80095d4:	f7f7 f828 	bl	8000628 <__aeabi_dmul>
 80095d8:	2200      	movs	r2, #0
 80095da:	2300      	movs	r3, #0
 80095dc:	4606      	mov	r6, r0
 80095de:	460f      	mov	r7, r1
 80095e0:	f7f7 fa8a 	bl	8000af8 <__aeabi_dcmpeq>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d09a      	beq.n	800951e <_dtoa_r+0x616>
 80095e8:	e7cb      	b.n	8009582 <_dtoa_r+0x67a>
 80095ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	f000 808b 	beq.w	8009708 <_dtoa_r+0x800>
 80095f2:	9a06      	ldr	r2, [sp, #24]
 80095f4:	2a01      	cmp	r2, #1
 80095f6:	dc6e      	bgt.n	80096d6 <_dtoa_r+0x7ce>
 80095f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d067      	beq.n	80096ce <_dtoa_r+0x7c6>
 80095fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009602:	9f07      	ldr	r7, [sp, #28]
 8009604:	9d05      	ldr	r5, [sp, #20]
 8009606:	9a05      	ldr	r2, [sp, #20]
 8009608:	2101      	movs	r1, #1
 800960a:	441a      	add	r2, r3
 800960c:	4620      	mov	r0, r4
 800960e:	9205      	str	r2, [sp, #20]
 8009610:	4498      	add	r8, r3
 8009612:	f000 fb1b 	bl	8009c4c <__i2b>
 8009616:	4606      	mov	r6, r0
 8009618:	2d00      	cmp	r5, #0
 800961a:	dd0c      	ble.n	8009636 <_dtoa_r+0x72e>
 800961c:	f1b8 0f00 	cmp.w	r8, #0
 8009620:	dd09      	ble.n	8009636 <_dtoa_r+0x72e>
 8009622:	4545      	cmp	r5, r8
 8009624:	9a05      	ldr	r2, [sp, #20]
 8009626:	462b      	mov	r3, r5
 8009628:	bfa8      	it	ge
 800962a:	4643      	movge	r3, r8
 800962c:	1ad2      	subs	r2, r2, r3
 800962e:	9205      	str	r2, [sp, #20]
 8009630:	1aed      	subs	r5, r5, r3
 8009632:	eba8 0803 	sub.w	r8, r8, r3
 8009636:	9b07      	ldr	r3, [sp, #28]
 8009638:	b1eb      	cbz	r3, 8009676 <_dtoa_r+0x76e>
 800963a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963c:	2b00      	cmp	r3, #0
 800963e:	d067      	beq.n	8009710 <_dtoa_r+0x808>
 8009640:	b18f      	cbz	r7, 8009666 <_dtoa_r+0x75e>
 8009642:	4631      	mov	r1, r6
 8009644:	463a      	mov	r2, r7
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fba0 	bl	8009d8c <__pow5mult>
 800964c:	9a04      	ldr	r2, [sp, #16]
 800964e:	4601      	mov	r1, r0
 8009650:	4606      	mov	r6, r0
 8009652:	4620      	mov	r0, r4
 8009654:	f000 fb03 	bl	8009c5e <__multiply>
 8009658:	9904      	ldr	r1, [sp, #16]
 800965a:	9008      	str	r0, [sp, #32]
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fa55 	bl	8009b0c <_Bfree>
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	9b07      	ldr	r3, [sp, #28]
 8009668:	1bda      	subs	r2, r3, r7
 800966a:	d004      	beq.n	8009676 <_dtoa_r+0x76e>
 800966c:	9904      	ldr	r1, [sp, #16]
 800966e:	4620      	mov	r0, r4
 8009670:	f000 fb8c 	bl	8009d8c <__pow5mult>
 8009674:	9004      	str	r0, [sp, #16]
 8009676:	2101      	movs	r1, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fae7 	bl	8009c4c <__i2b>
 800967e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009680:	4607      	mov	r7, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 81d0 	beq.w	8009a28 <_dtoa_r+0xb20>
 8009688:	461a      	mov	r2, r3
 800968a:	4601      	mov	r1, r0
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fb7d 	bl	8009d8c <__pow5mult>
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	2b01      	cmp	r3, #1
 8009696:	4607      	mov	r7, r0
 8009698:	dc40      	bgt.n	800971c <_dtoa_r+0x814>
 800969a:	9b00      	ldr	r3, [sp, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d139      	bne.n	8009714 <_dtoa_r+0x80c>
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d136      	bne.n	8009718 <_dtoa_r+0x810>
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096b0:	0d1b      	lsrs	r3, r3, #20
 80096b2:	051b      	lsls	r3, r3, #20
 80096b4:	b12b      	cbz	r3, 80096c2 <_dtoa_r+0x7ba>
 80096b6:	9b05      	ldr	r3, [sp, #20]
 80096b8:	3301      	adds	r3, #1
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	f108 0801 	add.w	r8, r8, #1
 80096c0:	2301      	movs	r3, #1
 80096c2:	9307      	str	r3, [sp, #28]
 80096c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d12a      	bne.n	8009720 <_dtoa_r+0x818>
 80096ca:	2001      	movs	r0, #1
 80096cc:	e030      	b.n	8009730 <_dtoa_r+0x828>
 80096ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096d4:	e795      	b.n	8009602 <_dtoa_r+0x6fa>
 80096d6:	9b07      	ldr	r3, [sp, #28]
 80096d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80096dc:	42bb      	cmp	r3, r7
 80096de:	bfbf      	itttt	lt
 80096e0:	9b07      	ldrlt	r3, [sp, #28]
 80096e2:	9707      	strlt	r7, [sp, #28]
 80096e4:	1afa      	sublt	r2, r7, r3
 80096e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80096e8:	bfbb      	ittet	lt
 80096ea:	189b      	addlt	r3, r3, r2
 80096ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80096ee:	1bdf      	subge	r7, r3, r7
 80096f0:	2700      	movlt	r7, #0
 80096f2:	f1b9 0f00 	cmp.w	r9, #0
 80096f6:	bfb5      	itete	lt
 80096f8:	9b05      	ldrlt	r3, [sp, #20]
 80096fa:	9d05      	ldrge	r5, [sp, #20]
 80096fc:	eba3 0509 	sublt.w	r5, r3, r9
 8009700:	464b      	movge	r3, r9
 8009702:	bfb8      	it	lt
 8009704:	2300      	movlt	r3, #0
 8009706:	e77e      	b.n	8009606 <_dtoa_r+0x6fe>
 8009708:	9f07      	ldr	r7, [sp, #28]
 800970a:	9d05      	ldr	r5, [sp, #20]
 800970c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800970e:	e783      	b.n	8009618 <_dtoa_r+0x710>
 8009710:	9a07      	ldr	r2, [sp, #28]
 8009712:	e7ab      	b.n	800966c <_dtoa_r+0x764>
 8009714:	2300      	movs	r3, #0
 8009716:	e7d4      	b.n	80096c2 <_dtoa_r+0x7ba>
 8009718:	9b00      	ldr	r3, [sp, #0]
 800971a:	e7d2      	b.n	80096c2 <_dtoa_r+0x7ba>
 800971c:	2300      	movs	r3, #0
 800971e:	9307      	str	r3, [sp, #28]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009726:	6918      	ldr	r0, [r3, #16]
 8009728:	f000 fa42 	bl	8009bb0 <__hi0bits>
 800972c:	f1c0 0020 	rsb	r0, r0, #32
 8009730:	4440      	add	r0, r8
 8009732:	f010 001f 	ands.w	r0, r0, #31
 8009736:	d047      	beq.n	80097c8 <_dtoa_r+0x8c0>
 8009738:	f1c0 0320 	rsb	r3, r0, #32
 800973c:	2b04      	cmp	r3, #4
 800973e:	dd3b      	ble.n	80097b8 <_dtoa_r+0x8b0>
 8009740:	9b05      	ldr	r3, [sp, #20]
 8009742:	f1c0 001c 	rsb	r0, r0, #28
 8009746:	4403      	add	r3, r0
 8009748:	9305      	str	r3, [sp, #20]
 800974a:	4405      	add	r5, r0
 800974c:	4480      	add	r8, r0
 800974e:	9b05      	ldr	r3, [sp, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	dd05      	ble.n	8009760 <_dtoa_r+0x858>
 8009754:	461a      	mov	r2, r3
 8009756:	9904      	ldr	r1, [sp, #16]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fb65 	bl	8009e28 <__lshift>
 800975e:	9004      	str	r0, [sp, #16]
 8009760:	f1b8 0f00 	cmp.w	r8, #0
 8009764:	dd05      	ble.n	8009772 <_dtoa_r+0x86a>
 8009766:	4639      	mov	r1, r7
 8009768:	4642      	mov	r2, r8
 800976a:	4620      	mov	r0, r4
 800976c:	f000 fb5c 	bl	8009e28 <__lshift>
 8009770:	4607      	mov	r7, r0
 8009772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009774:	b353      	cbz	r3, 80097cc <_dtoa_r+0x8c4>
 8009776:	4639      	mov	r1, r7
 8009778:	9804      	ldr	r0, [sp, #16]
 800977a:	f000 fba9 	bl	8009ed0 <__mcmp>
 800977e:	2800      	cmp	r0, #0
 8009780:	da24      	bge.n	80097cc <_dtoa_r+0x8c4>
 8009782:	2300      	movs	r3, #0
 8009784:	220a      	movs	r2, #10
 8009786:	9904      	ldr	r1, [sp, #16]
 8009788:	4620      	mov	r0, r4
 800978a:	f000 f9d6 	bl	8009b3a <__multadd>
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	9004      	str	r0, [sp, #16]
 8009792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 814d 	beq.w	8009a36 <_dtoa_r+0xb2e>
 800979c:	2300      	movs	r3, #0
 800979e:	4631      	mov	r1, r6
 80097a0:	220a      	movs	r2, #10
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f9c9 	bl	8009b3a <__multadd>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	4606      	mov	r6, r0
 80097ae:	dc4f      	bgt.n	8009850 <_dtoa_r+0x948>
 80097b0:	9b06      	ldr	r3, [sp, #24]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	dd4c      	ble.n	8009850 <_dtoa_r+0x948>
 80097b6:	e011      	b.n	80097dc <_dtoa_r+0x8d4>
 80097b8:	d0c9      	beq.n	800974e <_dtoa_r+0x846>
 80097ba:	9a05      	ldr	r2, [sp, #20]
 80097bc:	331c      	adds	r3, #28
 80097be:	441a      	add	r2, r3
 80097c0:	9205      	str	r2, [sp, #20]
 80097c2:	441d      	add	r5, r3
 80097c4:	4498      	add	r8, r3
 80097c6:	e7c2      	b.n	800974e <_dtoa_r+0x846>
 80097c8:	4603      	mov	r3, r0
 80097ca:	e7f6      	b.n	80097ba <_dtoa_r+0x8b2>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	dc38      	bgt.n	8009844 <_dtoa_r+0x93c>
 80097d2:	9b06      	ldr	r3, [sp, #24]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	dd35      	ble.n	8009844 <_dtoa_r+0x93c>
 80097d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80097dc:	9b02      	ldr	r3, [sp, #8]
 80097de:	b963      	cbnz	r3, 80097fa <_dtoa_r+0x8f2>
 80097e0:	4639      	mov	r1, r7
 80097e2:	2205      	movs	r2, #5
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 f9a8 	bl	8009b3a <__multadd>
 80097ea:	4601      	mov	r1, r0
 80097ec:	4607      	mov	r7, r0
 80097ee:	9804      	ldr	r0, [sp, #16]
 80097f0:	f000 fb6e 	bl	8009ed0 <__mcmp>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f73f adcc 	bgt.w	8009392 <_dtoa_r+0x48a>
 80097fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097fc:	465d      	mov	r5, fp
 80097fe:	ea6f 0a03 	mvn.w	sl, r3
 8009802:	f04f 0900 	mov.w	r9, #0
 8009806:	4639      	mov	r1, r7
 8009808:	4620      	mov	r0, r4
 800980a:	f000 f97f 	bl	8009b0c <_Bfree>
 800980e:	2e00      	cmp	r6, #0
 8009810:	f43f aeb7 	beq.w	8009582 <_dtoa_r+0x67a>
 8009814:	f1b9 0f00 	cmp.w	r9, #0
 8009818:	d005      	beq.n	8009826 <_dtoa_r+0x91e>
 800981a:	45b1      	cmp	r9, r6
 800981c:	d003      	beq.n	8009826 <_dtoa_r+0x91e>
 800981e:	4649      	mov	r1, r9
 8009820:	4620      	mov	r0, r4
 8009822:	f000 f973 	bl	8009b0c <_Bfree>
 8009826:	4631      	mov	r1, r6
 8009828:	4620      	mov	r0, r4
 800982a:	f000 f96f 	bl	8009b0c <_Bfree>
 800982e:	e6a8      	b.n	8009582 <_dtoa_r+0x67a>
 8009830:	2700      	movs	r7, #0
 8009832:	463e      	mov	r6, r7
 8009834:	e7e1      	b.n	80097fa <_dtoa_r+0x8f2>
 8009836:	f8dd a020 	ldr.w	sl, [sp, #32]
 800983a:	463e      	mov	r6, r7
 800983c:	e5a9      	b.n	8009392 <_dtoa_r+0x48a>
 800983e:	bf00      	nop
 8009840:	40240000 	.word	0x40240000
 8009844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009846:	f8cd 9008 	str.w	r9, [sp, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80fa 	beq.w	8009a44 <_dtoa_r+0xb3c>
 8009850:	2d00      	cmp	r5, #0
 8009852:	dd05      	ble.n	8009860 <_dtoa_r+0x958>
 8009854:	4631      	mov	r1, r6
 8009856:	462a      	mov	r2, r5
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fae5 	bl	8009e28 <__lshift>
 800985e:	4606      	mov	r6, r0
 8009860:	9b07      	ldr	r3, [sp, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d04c      	beq.n	8009900 <_dtoa_r+0x9f8>
 8009866:	6871      	ldr	r1, [r6, #4]
 8009868:	4620      	mov	r0, r4
 800986a:	f000 f91b 	bl	8009aa4 <_Balloc>
 800986e:	6932      	ldr	r2, [r6, #16]
 8009870:	3202      	adds	r2, #2
 8009872:	4605      	mov	r5, r0
 8009874:	0092      	lsls	r2, r2, #2
 8009876:	f106 010c 	add.w	r1, r6, #12
 800987a:	300c      	adds	r0, #12
 800987c:	f7fe fe28 	bl	80084d0 <memcpy>
 8009880:	2201      	movs	r2, #1
 8009882:	4629      	mov	r1, r5
 8009884:	4620      	mov	r0, r4
 8009886:	f000 facf 	bl	8009e28 <__lshift>
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	f8cd b014 	str.w	fp, [sp, #20]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	46b1      	mov	r9, r6
 8009896:	9307      	str	r3, [sp, #28]
 8009898:	4606      	mov	r6, r0
 800989a:	4639      	mov	r1, r7
 800989c:	9804      	ldr	r0, [sp, #16]
 800989e:	f7ff faa7 	bl	8008df0 <quorem>
 80098a2:	4649      	mov	r1, r9
 80098a4:	4605      	mov	r5, r0
 80098a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80098aa:	9804      	ldr	r0, [sp, #16]
 80098ac:	f000 fb10 	bl	8009ed0 <__mcmp>
 80098b0:	4632      	mov	r2, r6
 80098b2:	9000      	str	r0, [sp, #0]
 80098b4:	4639      	mov	r1, r7
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 fb24 	bl	8009f04 <__mdiff>
 80098bc:	68c3      	ldr	r3, [r0, #12]
 80098be:	4602      	mov	r2, r0
 80098c0:	bb03      	cbnz	r3, 8009904 <_dtoa_r+0x9fc>
 80098c2:	4601      	mov	r1, r0
 80098c4:	9008      	str	r0, [sp, #32]
 80098c6:	9804      	ldr	r0, [sp, #16]
 80098c8:	f000 fb02 	bl	8009ed0 <__mcmp>
 80098cc:	9a08      	ldr	r2, [sp, #32]
 80098ce:	4603      	mov	r3, r0
 80098d0:	4611      	mov	r1, r2
 80098d2:	4620      	mov	r0, r4
 80098d4:	9308      	str	r3, [sp, #32]
 80098d6:	f000 f919 	bl	8009b0c <_Bfree>
 80098da:	9b08      	ldr	r3, [sp, #32]
 80098dc:	b9a3      	cbnz	r3, 8009908 <_dtoa_r+0xa00>
 80098de:	9a06      	ldr	r2, [sp, #24]
 80098e0:	b992      	cbnz	r2, 8009908 <_dtoa_r+0xa00>
 80098e2:	9a07      	ldr	r2, [sp, #28]
 80098e4:	b982      	cbnz	r2, 8009908 <_dtoa_r+0xa00>
 80098e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098ea:	d029      	beq.n	8009940 <_dtoa_r+0xa38>
 80098ec:	9b00      	ldr	r3, [sp, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd01      	ble.n	80098f6 <_dtoa_r+0x9ee>
 80098f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	1c5d      	adds	r5, r3, #1
 80098fa:	f883 8000 	strb.w	r8, [r3]
 80098fe:	e782      	b.n	8009806 <_dtoa_r+0x8fe>
 8009900:	4630      	mov	r0, r6
 8009902:	e7c2      	b.n	800988a <_dtoa_r+0x982>
 8009904:	2301      	movs	r3, #1
 8009906:	e7e3      	b.n	80098d0 <_dtoa_r+0x9c8>
 8009908:	9a00      	ldr	r2, [sp, #0]
 800990a:	2a00      	cmp	r2, #0
 800990c:	db04      	blt.n	8009918 <_dtoa_r+0xa10>
 800990e:	d125      	bne.n	800995c <_dtoa_r+0xa54>
 8009910:	9a06      	ldr	r2, [sp, #24]
 8009912:	bb1a      	cbnz	r2, 800995c <_dtoa_r+0xa54>
 8009914:	9a07      	ldr	r2, [sp, #28]
 8009916:	bb0a      	cbnz	r2, 800995c <_dtoa_r+0xa54>
 8009918:	2b00      	cmp	r3, #0
 800991a:	ddec      	ble.n	80098f6 <_dtoa_r+0x9ee>
 800991c:	2201      	movs	r2, #1
 800991e:	9904      	ldr	r1, [sp, #16]
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fa81 	bl	8009e28 <__lshift>
 8009926:	4639      	mov	r1, r7
 8009928:	9004      	str	r0, [sp, #16]
 800992a:	f000 fad1 	bl	8009ed0 <__mcmp>
 800992e:	2800      	cmp	r0, #0
 8009930:	dc03      	bgt.n	800993a <_dtoa_r+0xa32>
 8009932:	d1e0      	bne.n	80098f6 <_dtoa_r+0x9ee>
 8009934:	f018 0f01 	tst.w	r8, #1
 8009938:	d0dd      	beq.n	80098f6 <_dtoa_r+0x9ee>
 800993a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800993e:	d1d8      	bne.n	80098f2 <_dtoa_r+0x9ea>
 8009940:	9b05      	ldr	r3, [sp, #20]
 8009942:	9a05      	ldr	r2, [sp, #20]
 8009944:	1c5d      	adds	r5, r3, #1
 8009946:	2339      	movs	r3, #57	; 0x39
 8009948:	7013      	strb	r3, [r2, #0]
 800994a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800994e:	2b39      	cmp	r3, #57	; 0x39
 8009950:	f105 32ff 	add.w	r2, r5, #4294967295
 8009954:	d04f      	beq.n	80099f6 <_dtoa_r+0xaee>
 8009956:	3301      	adds	r3, #1
 8009958:	7013      	strb	r3, [r2, #0]
 800995a:	e754      	b.n	8009806 <_dtoa_r+0x8fe>
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f102 0501 	add.w	r5, r2, #1
 8009964:	dd06      	ble.n	8009974 <_dtoa_r+0xa6c>
 8009966:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800996a:	d0e9      	beq.n	8009940 <_dtoa_r+0xa38>
 800996c:	f108 0801 	add.w	r8, r8, #1
 8009970:	9b05      	ldr	r3, [sp, #20]
 8009972:	e7c2      	b.n	80098fa <_dtoa_r+0x9f2>
 8009974:	9a02      	ldr	r2, [sp, #8]
 8009976:	f805 8c01 	strb.w	r8, [r5, #-1]
 800997a:	eba5 030b 	sub.w	r3, r5, fp
 800997e:	4293      	cmp	r3, r2
 8009980:	d021      	beq.n	80099c6 <_dtoa_r+0xabe>
 8009982:	2300      	movs	r3, #0
 8009984:	220a      	movs	r2, #10
 8009986:	9904      	ldr	r1, [sp, #16]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 f8d6 	bl	8009b3a <__multadd>
 800998e:	45b1      	cmp	r9, r6
 8009990:	9004      	str	r0, [sp, #16]
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	f04f 020a 	mov.w	r2, #10
 800999a:	4649      	mov	r1, r9
 800999c:	4620      	mov	r0, r4
 800999e:	d105      	bne.n	80099ac <_dtoa_r+0xaa4>
 80099a0:	f000 f8cb 	bl	8009b3a <__multadd>
 80099a4:	4681      	mov	r9, r0
 80099a6:	4606      	mov	r6, r0
 80099a8:	9505      	str	r5, [sp, #20]
 80099aa:	e776      	b.n	800989a <_dtoa_r+0x992>
 80099ac:	f000 f8c5 	bl	8009b3a <__multadd>
 80099b0:	4631      	mov	r1, r6
 80099b2:	4681      	mov	r9, r0
 80099b4:	2300      	movs	r3, #0
 80099b6:	220a      	movs	r2, #10
 80099b8:	4620      	mov	r0, r4
 80099ba:	f000 f8be 	bl	8009b3a <__multadd>
 80099be:	4606      	mov	r6, r0
 80099c0:	e7f2      	b.n	80099a8 <_dtoa_r+0xaa0>
 80099c2:	f04f 0900 	mov.w	r9, #0
 80099c6:	2201      	movs	r2, #1
 80099c8:	9904      	ldr	r1, [sp, #16]
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 fa2c 	bl	8009e28 <__lshift>
 80099d0:	4639      	mov	r1, r7
 80099d2:	9004      	str	r0, [sp, #16]
 80099d4:	f000 fa7c 	bl	8009ed0 <__mcmp>
 80099d8:	2800      	cmp	r0, #0
 80099da:	dcb6      	bgt.n	800994a <_dtoa_r+0xa42>
 80099dc:	d102      	bne.n	80099e4 <_dtoa_r+0xadc>
 80099de:	f018 0f01 	tst.w	r8, #1
 80099e2:	d1b2      	bne.n	800994a <_dtoa_r+0xa42>
 80099e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099e8:	2b30      	cmp	r3, #48	; 0x30
 80099ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80099ee:	f47f af0a 	bne.w	8009806 <_dtoa_r+0x8fe>
 80099f2:	4615      	mov	r5, r2
 80099f4:	e7f6      	b.n	80099e4 <_dtoa_r+0xadc>
 80099f6:	4593      	cmp	fp, r2
 80099f8:	d105      	bne.n	8009a06 <_dtoa_r+0xafe>
 80099fa:	2331      	movs	r3, #49	; 0x31
 80099fc:	f10a 0a01 	add.w	sl, sl, #1
 8009a00:	f88b 3000 	strb.w	r3, [fp]
 8009a04:	e6ff      	b.n	8009806 <_dtoa_r+0x8fe>
 8009a06:	4615      	mov	r5, r2
 8009a08:	e79f      	b.n	800994a <_dtoa_r+0xa42>
 8009a0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009a70 <_dtoa_r+0xb68>
 8009a0e:	e007      	b.n	8009a20 <_dtoa_r+0xb18>
 8009a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009a74 <_dtoa_r+0xb6c>
 8009a16:	b11b      	cbz	r3, 8009a20 <_dtoa_r+0xb18>
 8009a18:	f10b 0308 	add.w	r3, fp, #8
 8009a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4658      	mov	r0, fp
 8009a22:	b017      	add	sp, #92	; 0x5c
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a28:	9b06      	ldr	r3, [sp, #24]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	f77f ae35 	ble.w	800969a <_dtoa_r+0x792>
 8009a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	e649      	b.n	80096ca <_dtoa_r+0x7c2>
 8009a36:	9b02      	ldr	r3, [sp, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc03      	bgt.n	8009a44 <_dtoa_r+0xb3c>
 8009a3c:	9b06      	ldr	r3, [sp, #24]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	f73f aecc 	bgt.w	80097dc <_dtoa_r+0x8d4>
 8009a44:	465d      	mov	r5, fp
 8009a46:	4639      	mov	r1, r7
 8009a48:	9804      	ldr	r0, [sp, #16]
 8009a4a:	f7ff f9d1 	bl	8008df0 <quorem>
 8009a4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a52:	f805 8b01 	strb.w	r8, [r5], #1
 8009a56:	9a02      	ldr	r2, [sp, #8]
 8009a58:	eba5 030b 	sub.w	r3, r5, fp
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	ddb0      	ble.n	80099c2 <_dtoa_r+0xaba>
 8009a60:	2300      	movs	r3, #0
 8009a62:	220a      	movs	r2, #10
 8009a64:	9904      	ldr	r1, [sp, #16]
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 f867 	bl	8009b3a <__multadd>
 8009a6c:	9004      	str	r0, [sp, #16]
 8009a6e:	e7ea      	b.n	8009a46 <_dtoa_r+0xb3e>
 8009a70:	0800a67c 	.word	0x0800a67c
 8009a74:	0800a6a0 	.word	0x0800a6a0

08009a78 <_localeconv_r>:
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <_localeconv_r+0x14>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6a18      	ldr	r0, [r3, #32]
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <_localeconv_r+0x18>)
 8009a80:	2800      	cmp	r0, #0
 8009a82:	bf08      	it	eq
 8009a84:	4618      	moveq	r0, r3
 8009a86:	30f0      	adds	r0, #240	; 0xf0
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	20000010 	.word	0x20000010
 8009a90:	20000074 	.word	0x20000074

08009a94 <malloc>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <malloc+0xc>)
 8009a96:	4601      	mov	r1, r0
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	f000 bb3b 	b.w	800a114 <_malloc_r>
 8009a9e:	bf00      	nop
 8009aa0:	20000010 	.word	0x20000010

08009aa4 <_Balloc>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460e      	mov	r6, r1
 8009aac:	b93d      	cbnz	r5, 8009abe <_Balloc+0x1a>
 8009aae:	2010      	movs	r0, #16
 8009ab0:	f7ff fff0 	bl	8009a94 <malloc>
 8009ab4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ab6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009aba:	6005      	str	r5, [r0, #0]
 8009abc:	60c5      	str	r5, [r0, #12]
 8009abe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009ac0:	68eb      	ldr	r3, [r5, #12]
 8009ac2:	b183      	cbz	r3, 8009ae6 <_Balloc+0x42>
 8009ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009acc:	b9b8      	cbnz	r0, 8009afe <_Balloc+0x5a>
 8009ace:	2101      	movs	r1, #1
 8009ad0:	fa01 f506 	lsl.w	r5, r1, r6
 8009ad4:	1d6a      	adds	r2, r5, #5
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fabf 	bl	800a05c <_calloc_r>
 8009ade:	b160      	cbz	r0, 8009afa <_Balloc+0x56>
 8009ae0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009ae4:	e00e      	b.n	8009b04 <_Balloc+0x60>
 8009ae6:	2221      	movs	r2, #33	; 0x21
 8009ae8:	2104      	movs	r1, #4
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 fab6 	bl	800a05c <_calloc_r>
 8009af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009af2:	60e8      	str	r0, [r5, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e4      	bne.n	8009ac4 <_Balloc+0x20>
 8009afa:	2000      	movs	r0, #0
 8009afc:	bd70      	pop	{r4, r5, r6, pc}
 8009afe:	6802      	ldr	r2, [r0, #0]
 8009b00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009b04:	2300      	movs	r3, #0
 8009b06:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b0a:	e7f7      	b.n	8009afc <_Balloc+0x58>

08009b0c <_Bfree>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b10:	4606      	mov	r6, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	b93c      	cbnz	r4, 8009b26 <_Bfree+0x1a>
 8009b16:	2010      	movs	r0, #16
 8009b18:	f7ff ffbc 	bl	8009a94 <malloc>
 8009b1c:	6270      	str	r0, [r6, #36]	; 0x24
 8009b1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b22:	6004      	str	r4, [r0, #0]
 8009b24:	60c4      	str	r4, [r0, #12]
 8009b26:	b13d      	cbz	r5, 8009b38 <_Bfree+0x2c>
 8009b28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b2a:	686a      	ldr	r2, [r5, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b32:	6029      	str	r1, [r5, #0]
 8009b34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009b38:	bd70      	pop	{r4, r5, r6, pc}

08009b3a <__multadd>:
 8009b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3e:	690d      	ldr	r5, [r1, #16]
 8009b40:	461f      	mov	r7, r3
 8009b42:	4606      	mov	r6, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	f101 0c14 	add.w	ip, r1, #20
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f8dc 0000 	ldr.w	r0, [ip]
 8009b50:	b281      	uxth	r1, r0
 8009b52:	fb02 7101 	mla	r1, r2, r1, r7
 8009b56:	0c0f      	lsrs	r7, r1, #16
 8009b58:	0c00      	lsrs	r0, r0, #16
 8009b5a:	fb02 7000 	mla	r0, r2, r0, r7
 8009b5e:	b289      	uxth	r1, r1
 8009b60:	3301      	adds	r3, #1
 8009b62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009b66:	429d      	cmp	r5, r3
 8009b68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009b6c:	f84c 1b04 	str.w	r1, [ip], #4
 8009b70:	dcec      	bgt.n	8009b4c <__multadd+0x12>
 8009b72:	b1d7      	cbz	r7, 8009baa <__multadd+0x70>
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	42ab      	cmp	r3, r5
 8009b78:	dc12      	bgt.n	8009ba0 <__multadd+0x66>
 8009b7a:	6861      	ldr	r1, [r4, #4]
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	3101      	adds	r1, #1
 8009b80:	f7ff ff90 	bl	8009aa4 <_Balloc>
 8009b84:	6922      	ldr	r2, [r4, #16]
 8009b86:	3202      	adds	r2, #2
 8009b88:	f104 010c 	add.w	r1, r4, #12
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	0092      	lsls	r2, r2, #2
 8009b90:	300c      	adds	r0, #12
 8009b92:	f7fe fc9d 	bl	80084d0 <memcpy>
 8009b96:	4621      	mov	r1, r4
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7ff ffb7 	bl	8009b0c <_Bfree>
 8009b9e:	4644      	mov	r4, r8
 8009ba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	615f      	str	r7, [r3, #20]
 8009ba8:	6125      	str	r5, [r4, #16]
 8009baa:	4620      	mov	r0, r4
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bb0 <__hi0bits>:
 8009bb0:	0c02      	lsrs	r2, r0, #16
 8009bb2:	0412      	lsls	r2, r2, #16
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	b9b2      	cbnz	r2, 8009be6 <__hi0bits+0x36>
 8009bb8:	0403      	lsls	r3, r0, #16
 8009bba:	2010      	movs	r0, #16
 8009bbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009bc0:	bf04      	itt	eq
 8009bc2:	021b      	lsleq	r3, r3, #8
 8009bc4:	3008      	addeq	r0, #8
 8009bc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009bca:	bf04      	itt	eq
 8009bcc:	011b      	lsleq	r3, r3, #4
 8009bce:	3004      	addeq	r0, #4
 8009bd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009bd4:	bf04      	itt	eq
 8009bd6:	009b      	lsleq	r3, r3, #2
 8009bd8:	3002      	addeq	r0, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	db06      	blt.n	8009bec <__hi0bits+0x3c>
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	d503      	bpl.n	8009bea <__hi0bits+0x3a>
 8009be2:	3001      	adds	r0, #1
 8009be4:	4770      	bx	lr
 8009be6:	2000      	movs	r0, #0
 8009be8:	e7e8      	b.n	8009bbc <__hi0bits+0xc>
 8009bea:	2020      	movs	r0, #32
 8009bec:	4770      	bx	lr

08009bee <__lo0bits>:
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	f013 0207 	ands.w	r2, r3, #7
 8009bf4:	4601      	mov	r1, r0
 8009bf6:	d00b      	beq.n	8009c10 <__lo0bits+0x22>
 8009bf8:	07da      	lsls	r2, r3, #31
 8009bfa:	d423      	bmi.n	8009c44 <__lo0bits+0x56>
 8009bfc:	0798      	lsls	r0, r3, #30
 8009bfe:	bf49      	itett	mi
 8009c00:	085b      	lsrmi	r3, r3, #1
 8009c02:	089b      	lsrpl	r3, r3, #2
 8009c04:	2001      	movmi	r0, #1
 8009c06:	600b      	strmi	r3, [r1, #0]
 8009c08:	bf5c      	itt	pl
 8009c0a:	600b      	strpl	r3, [r1, #0]
 8009c0c:	2002      	movpl	r0, #2
 8009c0e:	4770      	bx	lr
 8009c10:	b298      	uxth	r0, r3
 8009c12:	b9a8      	cbnz	r0, 8009c40 <__lo0bits+0x52>
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	2010      	movs	r0, #16
 8009c18:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c1c:	bf04      	itt	eq
 8009c1e:	0a1b      	lsreq	r3, r3, #8
 8009c20:	3008      	addeq	r0, #8
 8009c22:	071a      	lsls	r2, r3, #28
 8009c24:	bf04      	itt	eq
 8009c26:	091b      	lsreq	r3, r3, #4
 8009c28:	3004      	addeq	r0, #4
 8009c2a:	079a      	lsls	r2, r3, #30
 8009c2c:	bf04      	itt	eq
 8009c2e:	089b      	lsreq	r3, r3, #2
 8009c30:	3002      	addeq	r0, #2
 8009c32:	07da      	lsls	r2, r3, #31
 8009c34:	d402      	bmi.n	8009c3c <__lo0bits+0x4e>
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	d006      	beq.n	8009c48 <__lo0bits+0x5a>
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	600b      	str	r3, [r1, #0]
 8009c3e:	4770      	bx	lr
 8009c40:	4610      	mov	r0, r2
 8009c42:	e7e9      	b.n	8009c18 <__lo0bits+0x2a>
 8009c44:	2000      	movs	r0, #0
 8009c46:	4770      	bx	lr
 8009c48:	2020      	movs	r0, #32
 8009c4a:	4770      	bx	lr

08009c4c <__i2b>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	460c      	mov	r4, r1
 8009c50:	2101      	movs	r1, #1
 8009c52:	f7ff ff27 	bl	8009aa4 <_Balloc>
 8009c56:	2201      	movs	r2, #1
 8009c58:	6144      	str	r4, [r0, #20]
 8009c5a:	6102      	str	r2, [r0, #16]
 8009c5c:	bd10      	pop	{r4, pc}

08009c5e <__multiply>:
 8009c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c62:	4614      	mov	r4, r2
 8009c64:	690a      	ldr	r2, [r1, #16]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	bfb8      	it	lt
 8009c6c:	460b      	movlt	r3, r1
 8009c6e:	4688      	mov	r8, r1
 8009c70:	bfbc      	itt	lt
 8009c72:	46a0      	movlt	r8, r4
 8009c74:	461c      	movlt	r4, r3
 8009c76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c86:	eb07 0609 	add.w	r6, r7, r9
 8009c8a:	42b3      	cmp	r3, r6
 8009c8c:	bfb8      	it	lt
 8009c8e:	3101      	addlt	r1, #1
 8009c90:	f7ff ff08 	bl	8009aa4 <_Balloc>
 8009c94:	f100 0514 	add.w	r5, r0, #20
 8009c98:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4573      	cmp	r3, lr
 8009ca2:	d316      	bcc.n	8009cd2 <__multiply+0x74>
 8009ca4:	f104 0214 	add.w	r2, r4, #20
 8009ca8:	f108 0114 	add.w	r1, r8, #20
 8009cac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009cb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	9201      	str	r2, [sp, #4]
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d80c      	bhi.n	8009cd8 <__multiply+0x7a>
 8009cbe:	2e00      	cmp	r6, #0
 8009cc0:	dd03      	ble.n	8009cca <__multiply+0x6c>
 8009cc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d05d      	beq.n	8009d86 <__multiply+0x128>
 8009cca:	6106      	str	r6, [r0, #16]
 8009ccc:	b003      	add	sp, #12
 8009cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd2:	f843 2b04 	str.w	r2, [r3], #4
 8009cd6:	e7e3      	b.n	8009ca0 <__multiply+0x42>
 8009cd8:	f8b2 b000 	ldrh.w	fp, [r2]
 8009cdc:	f1bb 0f00 	cmp.w	fp, #0
 8009ce0:	d023      	beq.n	8009d2a <__multiply+0xcc>
 8009ce2:	4689      	mov	r9, r1
 8009ce4:	46ac      	mov	ip, r5
 8009ce6:	f04f 0800 	mov.w	r8, #0
 8009cea:	f859 4b04 	ldr.w	r4, [r9], #4
 8009cee:	f8dc a000 	ldr.w	sl, [ip]
 8009cf2:	b2a3      	uxth	r3, r4
 8009cf4:	fa1f fa8a 	uxth.w	sl, sl
 8009cf8:	fb0b a303 	mla	r3, fp, r3, sl
 8009cfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d00:	f8dc 4000 	ldr.w	r4, [ip]
 8009d04:	4443      	add	r3, r8
 8009d06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d0a:	fb0b 840a 	mla	r4, fp, sl, r8
 8009d0e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009d12:	46e2      	mov	sl, ip
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d1a:	454f      	cmp	r7, r9
 8009d1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d20:	f84a 3b04 	str.w	r3, [sl], #4
 8009d24:	d82b      	bhi.n	8009d7e <__multiply+0x120>
 8009d26:	f8cc 8004 	str.w	r8, [ip, #4]
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009d30:	3204      	adds	r2, #4
 8009d32:	f1ba 0f00 	cmp.w	sl, #0
 8009d36:	d020      	beq.n	8009d7a <__multiply+0x11c>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	4689      	mov	r9, r1
 8009d3c:	46a8      	mov	r8, r5
 8009d3e:	f04f 0b00 	mov.w	fp, #0
 8009d42:	f8b9 c000 	ldrh.w	ip, [r9]
 8009d46:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009d4a:	fb0a 440c 	mla	r4, sl, ip, r4
 8009d4e:	445c      	add	r4, fp
 8009d50:	46c4      	mov	ip, r8
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d58:	f84c 3b04 	str.w	r3, [ip], #4
 8009d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d60:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009d64:	0c1b      	lsrs	r3, r3, #16
 8009d66:	fb0a b303 	mla	r3, sl, r3, fp
 8009d6a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009d6e:	454f      	cmp	r7, r9
 8009d70:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d74:	d805      	bhi.n	8009d82 <__multiply+0x124>
 8009d76:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d7a:	3504      	adds	r5, #4
 8009d7c:	e79b      	b.n	8009cb6 <__multiply+0x58>
 8009d7e:	46d4      	mov	ip, sl
 8009d80:	e7b3      	b.n	8009cea <__multiply+0x8c>
 8009d82:	46e0      	mov	r8, ip
 8009d84:	e7dd      	b.n	8009d42 <__multiply+0xe4>
 8009d86:	3e01      	subs	r6, #1
 8009d88:	e799      	b.n	8009cbe <__multiply+0x60>
	...

08009d8c <__pow5mult>:
 8009d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4615      	mov	r5, r2
 8009d92:	f012 0203 	ands.w	r2, r2, #3
 8009d96:	4606      	mov	r6, r0
 8009d98:	460f      	mov	r7, r1
 8009d9a:	d007      	beq.n	8009dac <__pow5mult+0x20>
 8009d9c:	3a01      	subs	r2, #1
 8009d9e:	4c21      	ldr	r4, [pc, #132]	; (8009e24 <__pow5mult+0x98>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009da6:	f7ff fec8 	bl	8009b3a <__multadd>
 8009daa:	4607      	mov	r7, r0
 8009dac:	10ad      	asrs	r5, r5, #2
 8009dae:	d035      	beq.n	8009e1c <__pow5mult+0x90>
 8009db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009db2:	b93c      	cbnz	r4, 8009dc4 <__pow5mult+0x38>
 8009db4:	2010      	movs	r0, #16
 8009db6:	f7ff fe6d 	bl	8009a94 <malloc>
 8009dba:	6270      	str	r0, [r6, #36]	; 0x24
 8009dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dc0:	6004      	str	r4, [r0, #0]
 8009dc2:	60c4      	str	r4, [r0, #12]
 8009dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dcc:	b94c      	cbnz	r4, 8009de2 <__pow5mult+0x56>
 8009dce:	f240 2171 	movw	r1, #625	; 0x271
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ff3a 	bl	8009c4c <__i2b>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dde:	4604      	mov	r4, r0
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	f04f 0800 	mov.w	r8, #0
 8009de6:	07eb      	lsls	r3, r5, #31
 8009de8:	d50a      	bpl.n	8009e00 <__pow5mult+0x74>
 8009dea:	4639      	mov	r1, r7
 8009dec:	4622      	mov	r2, r4
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff ff35 	bl	8009c5e <__multiply>
 8009df4:	4639      	mov	r1, r7
 8009df6:	4681      	mov	r9, r0
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff fe87 	bl	8009b0c <_Bfree>
 8009dfe:	464f      	mov	r7, r9
 8009e00:	106d      	asrs	r5, r5, #1
 8009e02:	d00b      	beq.n	8009e1c <__pow5mult+0x90>
 8009e04:	6820      	ldr	r0, [r4, #0]
 8009e06:	b938      	cbnz	r0, 8009e18 <__pow5mult+0x8c>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7ff ff26 	bl	8009c5e <__multiply>
 8009e12:	6020      	str	r0, [r4, #0]
 8009e14:	f8c0 8000 	str.w	r8, [r0]
 8009e18:	4604      	mov	r4, r0
 8009e1a:	e7e4      	b.n	8009de6 <__pow5mult+0x5a>
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e22:	bf00      	nop
 8009e24:	0800a7a0 	.word	0x0800a7a0

08009e28 <__lshift>:
 8009e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	6849      	ldr	r1, [r1, #4]
 8009e36:	eb0a 0903 	add.w	r9, sl, r3
 8009e3a:	68a3      	ldr	r3, [r4, #8]
 8009e3c:	4607      	mov	r7, r0
 8009e3e:	4616      	mov	r6, r2
 8009e40:	f109 0501 	add.w	r5, r9, #1
 8009e44:	42ab      	cmp	r3, r5
 8009e46:	db32      	blt.n	8009eae <__lshift+0x86>
 8009e48:	4638      	mov	r0, r7
 8009e4a:	f7ff fe2b 	bl	8009aa4 <_Balloc>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4680      	mov	r8, r0
 8009e52:	f100 0114 	add.w	r1, r0, #20
 8009e56:	461a      	mov	r2, r3
 8009e58:	4553      	cmp	r3, sl
 8009e5a:	db2b      	blt.n	8009eb4 <__lshift+0x8c>
 8009e5c:	6920      	ldr	r0, [r4, #16]
 8009e5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e62:	f104 0314 	add.w	r3, r4, #20
 8009e66:	f016 021f 	ands.w	r2, r6, #31
 8009e6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e72:	d025      	beq.n	8009ec0 <__lshift+0x98>
 8009e74:	f1c2 0e20 	rsb	lr, r2, #32
 8009e78:	2000      	movs	r0, #0
 8009e7a:	681e      	ldr	r6, [r3, #0]
 8009e7c:	468a      	mov	sl, r1
 8009e7e:	4096      	lsls	r6, r2
 8009e80:	4330      	orrs	r0, r6
 8009e82:	f84a 0b04 	str.w	r0, [sl], #4
 8009e86:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e8a:	459c      	cmp	ip, r3
 8009e8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e90:	d814      	bhi.n	8009ebc <__lshift+0x94>
 8009e92:	6048      	str	r0, [r1, #4]
 8009e94:	b108      	cbz	r0, 8009e9a <__lshift+0x72>
 8009e96:	f109 0502 	add.w	r5, r9, #2
 8009e9a:	3d01      	subs	r5, #1
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	f7ff fe32 	bl	8009b0c <_Bfree>
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eae:	3101      	adds	r1, #1
 8009eb0:	005b      	lsls	r3, r3, #1
 8009eb2:	e7c7      	b.n	8009e44 <__lshift+0x1c>
 8009eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	e7cd      	b.n	8009e58 <__lshift+0x30>
 8009ebc:	4651      	mov	r1, sl
 8009ebe:	e7dc      	b.n	8009e7a <__lshift+0x52>
 8009ec0:	3904      	subs	r1, #4
 8009ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eca:	459c      	cmp	ip, r3
 8009ecc:	d8f9      	bhi.n	8009ec2 <__lshift+0x9a>
 8009ece:	e7e4      	b.n	8009e9a <__lshift+0x72>

08009ed0 <__mcmp>:
 8009ed0:	6903      	ldr	r3, [r0, #16]
 8009ed2:	690a      	ldr	r2, [r1, #16]
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	b530      	push	{r4, r5, lr}
 8009ed8:	d10c      	bne.n	8009ef4 <__mcmp+0x24>
 8009eda:	0092      	lsls	r2, r2, #2
 8009edc:	3014      	adds	r0, #20
 8009ede:	3114      	adds	r1, #20
 8009ee0:	1884      	adds	r4, r0, r2
 8009ee2:	4411      	add	r1, r2
 8009ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009eec:	4295      	cmp	r5, r2
 8009eee:	d003      	beq.n	8009ef8 <__mcmp+0x28>
 8009ef0:	d305      	bcc.n	8009efe <__mcmp+0x2e>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	bd30      	pop	{r4, r5, pc}
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d3f3      	bcc.n	8009ee4 <__mcmp+0x14>
 8009efc:	e7fa      	b.n	8009ef4 <__mcmp+0x24>
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295
 8009f02:	e7f7      	b.n	8009ef4 <__mcmp+0x24>

08009f04 <__mdiff>:
 8009f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f08:	460d      	mov	r5, r1
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4628      	mov	r0, r5
 8009f10:	4614      	mov	r4, r2
 8009f12:	f7ff ffdd 	bl	8009ed0 <__mcmp>
 8009f16:	1e06      	subs	r6, r0, #0
 8009f18:	d108      	bne.n	8009f2c <__mdiff+0x28>
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7ff fdc1 	bl	8009aa4 <_Balloc>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	bfa4      	itt	ge
 8009f2e:	4623      	movge	r3, r4
 8009f30:	462c      	movge	r4, r5
 8009f32:	4638      	mov	r0, r7
 8009f34:	6861      	ldr	r1, [r4, #4]
 8009f36:	bfa6      	itte	ge
 8009f38:	461d      	movge	r5, r3
 8009f3a:	2600      	movge	r6, #0
 8009f3c:	2601      	movlt	r6, #1
 8009f3e:	f7ff fdb1 	bl	8009aa4 <_Balloc>
 8009f42:	692b      	ldr	r3, [r5, #16]
 8009f44:	60c6      	str	r6, [r0, #12]
 8009f46:	6926      	ldr	r6, [r4, #16]
 8009f48:	f105 0914 	add.w	r9, r5, #20
 8009f4c:	f104 0214 	add.w	r2, r4, #20
 8009f50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009f54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009f58:	f100 0514 	add.w	r5, r0, #20
 8009f5c:	f04f 0e00 	mov.w	lr, #0
 8009f60:	f852 ab04 	ldr.w	sl, [r2], #4
 8009f64:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f68:	fa1e f18a 	uxtah	r1, lr, sl
 8009f6c:	b2a3      	uxth	r3, r4
 8009f6e:	1ac9      	subs	r1, r1, r3
 8009f70:	0c23      	lsrs	r3, r4, #16
 8009f72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009f76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f7a:	b289      	uxth	r1, r1
 8009f7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f80:	45c8      	cmp	r8, r9
 8009f82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f86:	4694      	mov	ip, r2
 8009f88:	f845 3b04 	str.w	r3, [r5], #4
 8009f8c:	d8e8      	bhi.n	8009f60 <__mdiff+0x5c>
 8009f8e:	45bc      	cmp	ip, r7
 8009f90:	d304      	bcc.n	8009f9c <__mdiff+0x98>
 8009f92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009f96:	b183      	cbz	r3, 8009fba <__mdiff+0xb6>
 8009f98:	6106      	str	r6, [r0, #16]
 8009f9a:	e7c5      	b.n	8009f28 <__mdiff+0x24>
 8009f9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009fa0:	fa1e f381 	uxtah	r3, lr, r1
 8009fa4:	141a      	asrs	r2, r3, #16
 8009fa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fb0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009fb4:	f845 3b04 	str.w	r3, [r5], #4
 8009fb8:	e7e9      	b.n	8009f8e <__mdiff+0x8a>
 8009fba:	3e01      	subs	r6, #1
 8009fbc:	e7e9      	b.n	8009f92 <__mdiff+0x8e>

08009fbe <__d2b>:
 8009fbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fc2:	460e      	mov	r6, r1
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	ec59 8b10 	vmov	r8, r9, d0
 8009fca:	4615      	mov	r5, r2
 8009fcc:	f7ff fd6a 	bl	8009aa4 <_Balloc>
 8009fd0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fda:	bb34      	cbnz	r4, 800a02a <__d2b+0x6c>
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	f1b8 0300 	subs.w	r3, r8, #0
 8009fe2:	d027      	beq.n	800a034 <__d2b+0x76>
 8009fe4:	a802      	add	r0, sp, #8
 8009fe6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009fea:	f7ff fe00 	bl	8009bee <__lo0bits>
 8009fee:	9900      	ldr	r1, [sp, #0]
 8009ff0:	b1f0      	cbz	r0, 800a030 <__d2b+0x72>
 8009ff2:	9a01      	ldr	r2, [sp, #4]
 8009ff4:	f1c0 0320 	rsb	r3, r0, #32
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	40c2      	lsrs	r2, r0
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	9b01      	ldr	r3, [sp, #4]
 800a006:	61bb      	str	r3, [r7, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bf14      	ite	ne
 800a00c:	2102      	movne	r1, #2
 800a00e:	2101      	moveq	r1, #1
 800a010:	6139      	str	r1, [r7, #16]
 800a012:	b1c4      	cbz	r4, 800a046 <__d2b+0x88>
 800a014:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a018:	4404      	add	r4, r0
 800a01a:	6034      	str	r4, [r6, #0]
 800a01c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a020:	6028      	str	r0, [r5, #0]
 800a022:	4638      	mov	r0, r7
 800a024:	b003      	add	sp, #12
 800a026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a02a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a02e:	e7d5      	b.n	8009fdc <__d2b+0x1e>
 800a030:	6179      	str	r1, [r7, #20]
 800a032:	e7e7      	b.n	800a004 <__d2b+0x46>
 800a034:	a801      	add	r0, sp, #4
 800a036:	f7ff fdda 	bl	8009bee <__lo0bits>
 800a03a:	9b01      	ldr	r3, [sp, #4]
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	2101      	movs	r1, #1
 800a040:	6139      	str	r1, [r7, #16]
 800a042:	3020      	adds	r0, #32
 800a044:	e7e5      	b.n	800a012 <__d2b+0x54>
 800a046:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a04a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a04e:	6030      	str	r0, [r6, #0]
 800a050:	6918      	ldr	r0, [r3, #16]
 800a052:	f7ff fdad 	bl	8009bb0 <__hi0bits>
 800a056:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a05a:	e7e1      	b.n	800a020 <__d2b+0x62>

0800a05c <_calloc_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	fb02 f401 	mul.w	r4, r2, r1
 800a062:	4621      	mov	r1, r4
 800a064:	f000 f856 	bl	800a114 <_malloc_r>
 800a068:	4605      	mov	r5, r0
 800a06a:	b118      	cbz	r0, 800a074 <_calloc_r+0x18>
 800a06c:	4622      	mov	r2, r4
 800a06e:	2100      	movs	r1, #0
 800a070:	f7fe fa39 	bl	80084e6 <memset>
 800a074:	4628      	mov	r0, r5
 800a076:	bd38      	pop	{r3, r4, r5, pc}

0800a078 <_free_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4605      	mov	r5, r0
 800a07c:	2900      	cmp	r1, #0
 800a07e:	d045      	beq.n	800a10c <_free_r+0x94>
 800a080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a084:	1f0c      	subs	r4, r1, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfb8      	it	lt
 800a08a:	18e4      	addlt	r4, r4, r3
 800a08c:	f000 fa29 	bl	800a4e2 <__malloc_lock>
 800a090:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <_free_r+0x98>)
 800a092:	6813      	ldr	r3, [r2, #0]
 800a094:	4610      	mov	r0, r2
 800a096:	b933      	cbnz	r3, 800a0a6 <_free_r+0x2e>
 800a098:	6063      	str	r3, [r4, #4]
 800a09a:	6014      	str	r4, [r2, #0]
 800a09c:	4628      	mov	r0, r5
 800a09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0a2:	f000 ba1f 	b.w	800a4e4 <__malloc_unlock>
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	d90c      	bls.n	800a0c4 <_free_r+0x4c>
 800a0aa:	6821      	ldr	r1, [r4, #0]
 800a0ac:	1862      	adds	r2, r4, r1
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	bf04      	itt	eq
 800a0b2:	681a      	ldreq	r2, [r3, #0]
 800a0b4:	685b      	ldreq	r3, [r3, #4]
 800a0b6:	6063      	str	r3, [r4, #4]
 800a0b8:	bf04      	itt	eq
 800a0ba:	1852      	addeq	r2, r2, r1
 800a0bc:	6022      	streq	r2, [r4, #0]
 800a0be:	6004      	str	r4, [r0, #0]
 800a0c0:	e7ec      	b.n	800a09c <_free_r+0x24>
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	b10a      	cbz	r2, 800a0cc <_free_r+0x54>
 800a0c8:	42a2      	cmp	r2, r4
 800a0ca:	d9fa      	bls.n	800a0c2 <_free_r+0x4a>
 800a0cc:	6819      	ldr	r1, [r3, #0]
 800a0ce:	1858      	adds	r0, r3, r1
 800a0d0:	42a0      	cmp	r0, r4
 800a0d2:	d10b      	bne.n	800a0ec <_free_r+0x74>
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	4401      	add	r1, r0
 800a0d8:	1858      	adds	r0, r3, r1
 800a0da:	4282      	cmp	r2, r0
 800a0dc:	6019      	str	r1, [r3, #0]
 800a0de:	d1dd      	bne.n	800a09c <_free_r+0x24>
 800a0e0:	6810      	ldr	r0, [r2, #0]
 800a0e2:	6852      	ldr	r2, [r2, #4]
 800a0e4:	605a      	str	r2, [r3, #4]
 800a0e6:	4401      	add	r1, r0
 800a0e8:	6019      	str	r1, [r3, #0]
 800a0ea:	e7d7      	b.n	800a09c <_free_r+0x24>
 800a0ec:	d902      	bls.n	800a0f4 <_free_r+0x7c>
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	e7d3      	b.n	800a09c <_free_r+0x24>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	1821      	adds	r1, r4, r0
 800a0f8:	428a      	cmp	r2, r1
 800a0fa:	bf04      	itt	eq
 800a0fc:	6811      	ldreq	r1, [r2, #0]
 800a0fe:	6852      	ldreq	r2, [r2, #4]
 800a100:	6062      	str	r2, [r4, #4]
 800a102:	bf04      	itt	eq
 800a104:	1809      	addeq	r1, r1, r0
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	605c      	str	r4, [r3, #4]
 800a10a:	e7c7      	b.n	800a09c <_free_r+0x24>
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	20001ac4 	.word	0x20001ac4

0800a114 <_malloc_r>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	1ccd      	adds	r5, r1, #3
 800a118:	f025 0503 	bic.w	r5, r5, #3
 800a11c:	3508      	adds	r5, #8
 800a11e:	2d0c      	cmp	r5, #12
 800a120:	bf38      	it	cc
 800a122:	250c      	movcc	r5, #12
 800a124:	2d00      	cmp	r5, #0
 800a126:	4606      	mov	r6, r0
 800a128:	db01      	blt.n	800a12e <_malloc_r+0x1a>
 800a12a:	42a9      	cmp	r1, r5
 800a12c:	d903      	bls.n	800a136 <_malloc_r+0x22>
 800a12e:	230c      	movs	r3, #12
 800a130:	6033      	str	r3, [r6, #0]
 800a132:	2000      	movs	r0, #0
 800a134:	bd70      	pop	{r4, r5, r6, pc}
 800a136:	f000 f9d4 	bl	800a4e2 <__malloc_lock>
 800a13a:	4a21      	ldr	r2, [pc, #132]	; (800a1c0 <_malloc_r+0xac>)
 800a13c:	6814      	ldr	r4, [r2, #0]
 800a13e:	4621      	mov	r1, r4
 800a140:	b991      	cbnz	r1, 800a168 <_malloc_r+0x54>
 800a142:	4c20      	ldr	r4, [pc, #128]	; (800a1c4 <_malloc_r+0xb0>)
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	b91b      	cbnz	r3, 800a150 <_malloc_r+0x3c>
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f98f 	bl	800a46c <_sbrk_r>
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	4629      	mov	r1, r5
 800a152:	4630      	mov	r0, r6
 800a154:	f000 f98a 	bl	800a46c <_sbrk_r>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d124      	bne.n	800a1a6 <_malloc_r+0x92>
 800a15c:	230c      	movs	r3, #12
 800a15e:	6033      	str	r3, [r6, #0]
 800a160:	4630      	mov	r0, r6
 800a162:	f000 f9bf 	bl	800a4e4 <__malloc_unlock>
 800a166:	e7e4      	b.n	800a132 <_malloc_r+0x1e>
 800a168:	680b      	ldr	r3, [r1, #0]
 800a16a:	1b5b      	subs	r3, r3, r5
 800a16c:	d418      	bmi.n	800a1a0 <_malloc_r+0x8c>
 800a16e:	2b0b      	cmp	r3, #11
 800a170:	d90f      	bls.n	800a192 <_malloc_r+0x7e>
 800a172:	600b      	str	r3, [r1, #0]
 800a174:	50cd      	str	r5, [r1, r3]
 800a176:	18cc      	adds	r4, r1, r3
 800a178:	4630      	mov	r0, r6
 800a17a:	f000 f9b3 	bl	800a4e4 <__malloc_unlock>
 800a17e:	f104 000b 	add.w	r0, r4, #11
 800a182:	1d23      	adds	r3, r4, #4
 800a184:	f020 0007 	bic.w	r0, r0, #7
 800a188:	1ac3      	subs	r3, r0, r3
 800a18a:	d0d3      	beq.n	800a134 <_malloc_r+0x20>
 800a18c:	425a      	negs	r2, r3
 800a18e:	50e2      	str	r2, [r4, r3]
 800a190:	e7d0      	b.n	800a134 <_malloc_r+0x20>
 800a192:	428c      	cmp	r4, r1
 800a194:	684b      	ldr	r3, [r1, #4]
 800a196:	bf16      	itet	ne
 800a198:	6063      	strne	r3, [r4, #4]
 800a19a:	6013      	streq	r3, [r2, #0]
 800a19c:	460c      	movne	r4, r1
 800a19e:	e7eb      	b.n	800a178 <_malloc_r+0x64>
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	6849      	ldr	r1, [r1, #4]
 800a1a4:	e7cc      	b.n	800a140 <_malloc_r+0x2c>
 800a1a6:	1cc4      	adds	r4, r0, #3
 800a1a8:	f024 0403 	bic.w	r4, r4, #3
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d005      	beq.n	800a1bc <_malloc_r+0xa8>
 800a1b0:	1a21      	subs	r1, r4, r0
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 f95a 	bl	800a46c <_sbrk_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d0cf      	beq.n	800a15c <_malloc_r+0x48>
 800a1bc:	6025      	str	r5, [r4, #0]
 800a1be:	e7db      	b.n	800a178 <_malloc_r+0x64>
 800a1c0:	20001ac4 	.word	0x20001ac4
 800a1c4:	20001ac8 	.word	0x20001ac8

0800a1c8 <__ssputs_r>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	688e      	ldr	r6, [r1, #8]
 800a1ce:	429e      	cmp	r6, r3
 800a1d0:	4682      	mov	sl, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	4690      	mov	r8, r2
 800a1d6:	4699      	mov	r9, r3
 800a1d8:	d837      	bhi.n	800a24a <__ssputs_r+0x82>
 800a1da:	898a      	ldrh	r2, [r1, #12]
 800a1dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1e0:	d031      	beq.n	800a246 <__ssputs_r+0x7e>
 800a1e2:	6825      	ldr	r5, [r4, #0]
 800a1e4:	6909      	ldr	r1, [r1, #16]
 800a1e6:	1a6f      	subs	r7, r5, r1
 800a1e8:	6965      	ldr	r5, [r4, #20]
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1f0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a1f4:	f109 0301 	add.w	r3, r9, #1
 800a1f8:	443b      	add	r3, r7
 800a1fa:	429d      	cmp	r5, r3
 800a1fc:	bf38      	it	cc
 800a1fe:	461d      	movcc	r5, r3
 800a200:	0553      	lsls	r3, r2, #21
 800a202:	d530      	bpl.n	800a266 <__ssputs_r+0x9e>
 800a204:	4629      	mov	r1, r5
 800a206:	f7ff ff85 	bl	800a114 <_malloc_r>
 800a20a:	4606      	mov	r6, r0
 800a20c:	b950      	cbnz	r0, 800a224 <__ssputs_r+0x5c>
 800a20e:	230c      	movs	r3, #12
 800a210:	f8ca 3000 	str.w	r3, [sl]
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	463a      	mov	r2, r7
 800a226:	6921      	ldr	r1, [r4, #16]
 800a228:	f7fe f952 	bl	80084d0 <memcpy>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a236:	81a3      	strh	r3, [r4, #12]
 800a238:	6126      	str	r6, [r4, #16]
 800a23a:	6165      	str	r5, [r4, #20]
 800a23c:	443e      	add	r6, r7
 800a23e:	1bed      	subs	r5, r5, r7
 800a240:	6026      	str	r6, [r4, #0]
 800a242:	60a5      	str	r5, [r4, #8]
 800a244:	464e      	mov	r6, r9
 800a246:	454e      	cmp	r6, r9
 800a248:	d900      	bls.n	800a24c <__ssputs_r+0x84>
 800a24a:	464e      	mov	r6, r9
 800a24c:	4632      	mov	r2, r6
 800a24e:	4641      	mov	r1, r8
 800a250:	6820      	ldr	r0, [r4, #0]
 800a252:	f000 f92d 	bl	800a4b0 <memmove>
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	1b9b      	subs	r3, r3, r6
 800a25a:	60a3      	str	r3, [r4, #8]
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	441e      	add	r6, r3
 800a260:	6026      	str	r6, [r4, #0]
 800a262:	2000      	movs	r0, #0
 800a264:	e7dc      	b.n	800a220 <__ssputs_r+0x58>
 800a266:	462a      	mov	r2, r5
 800a268:	f000 f93d 	bl	800a4e6 <_realloc_r>
 800a26c:	4606      	mov	r6, r0
 800a26e:	2800      	cmp	r0, #0
 800a270:	d1e2      	bne.n	800a238 <__ssputs_r+0x70>
 800a272:	6921      	ldr	r1, [r4, #16]
 800a274:	4650      	mov	r0, sl
 800a276:	f7ff feff 	bl	800a078 <_free_r>
 800a27a:	e7c8      	b.n	800a20e <__ssputs_r+0x46>

0800a27c <_svfiprintf_r>:
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	461d      	mov	r5, r3
 800a282:	898b      	ldrh	r3, [r1, #12]
 800a284:	061f      	lsls	r7, r3, #24
 800a286:	b09d      	sub	sp, #116	; 0x74
 800a288:	4680      	mov	r8, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	4616      	mov	r6, r2
 800a28e:	d50f      	bpl.n	800a2b0 <_svfiprintf_r+0x34>
 800a290:	690b      	ldr	r3, [r1, #16]
 800a292:	b96b      	cbnz	r3, 800a2b0 <_svfiprintf_r+0x34>
 800a294:	2140      	movs	r1, #64	; 0x40
 800a296:	f7ff ff3d 	bl	800a114 <_malloc_r>
 800a29a:	6020      	str	r0, [r4, #0]
 800a29c:	6120      	str	r0, [r4, #16]
 800a29e:	b928      	cbnz	r0, 800a2ac <_svfiprintf_r+0x30>
 800a2a0:	230c      	movs	r3, #12
 800a2a2:	f8c8 3000 	str.w	r3, [r8]
 800a2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2aa:	e0c8      	b.n	800a43e <_svfiprintf_r+0x1c2>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	6163      	str	r3, [r4, #20]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ba:	2330      	movs	r3, #48	; 0x30
 800a2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2c0:	9503      	str	r5, [sp, #12]
 800a2c2:	f04f 0b01 	mov.w	fp, #1
 800a2c6:	4637      	mov	r7, r6
 800a2c8:	463d      	mov	r5, r7
 800a2ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2ce:	b10b      	cbz	r3, 800a2d4 <_svfiprintf_r+0x58>
 800a2d0:	2b25      	cmp	r3, #37	; 0x25
 800a2d2:	d13e      	bne.n	800a352 <_svfiprintf_r+0xd6>
 800a2d4:	ebb7 0a06 	subs.w	sl, r7, r6
 800a2d8:	d00b      	beq.n	800a2f2 <_svfiprintf_r+0x76>
 800a2da:	4653      	mov	r3, sl
 800a2dc:	4632      	mov	r2, r6
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	f7ff ff71 	bl	800a1c8 <__ssputs_r>
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f000 80a4 	beq.w	800a434 <_svfiprintf_r+0x1b8>
 800a2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ee:	4453      	add	r3, sl
 800a2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f2:	783b      	ldrb	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 809d 	beq.w	800a434 <_svfiprintf_r+0x1b8>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a30c:	931a      	str	r3, [sp, #104]	; 0x68
 800a30e:	462f      	mov	r7, r5
 800a310:	2205      	movs	r2, #5
 800a312:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a316:	4850      	ldr	r0, [pc, #320]	; (800a458 <_svfiprintf_r+0x1dc>)
 800a318:	f7f5 ff7a 	bl	8000210 <memchr>
 800a31c:	9b04      	ldr	r3, [sp, #16]
 800a31e:	b9d0      	cbnz	r0, 800a356 <_svfiprintf_r+0xda>
 800a320:	06d9      	lsls	r1, r3, #27
 800a322:	bf44      	itt	mi
 800a324:	2220      	movmi	r2, #32
 800a326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a32a:	071a      	lsls	r2, r3, #28
 800a32c:	bf44      	itt	mi
 800a32e:	222b      	movmi	r2, #43	; 0x2b
 800a330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a334:	782a      	ldrb	r2, [r5, #0]
 800a336:	2a2a      	cmp	r2, #42	; 0x2a
 800a338:	d015      	beq.n	800a366 <_svfiprintf_r+0xea>
 800a33a:	9a07      	ldr	r2, [sp, #28]
 800a33c:	462f      	mov	r7, r5
 800a33e:	2000      	movs	r0, #0
 800a340:	250a      	movs	r5, #10
 800a342:	4639      	mov	r1, r7
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94d      	bls.n	800a3ea <_svfiprintf_r+0x16e>
 800a34e:	b1b8      	cbz	r0, 800a380 <_svfiprintf_r+0x104>
 800a350:	e00f      	b.n	800a372 <_svfiprintf_r+0xf6>
 800a352:	462f      	mov	r7, r5
 800a354:	e7b8      	b.n	800a2c8 <_svfiprintf_r+0x4c>
 800a356:	4a40      	ldr	r2, [pc, #256]	; (800a458 <_svfiprintf_r+0x1dc>)
 800a358:	1a80      	subs	r0, r0, r2
 800a35a:	fa0b f000 	lsl.w	r0, fp, r0
 800a35e:	4318      	orrs	r0, r3
 800a360:	9004      	str	r0, [sp, #16]
 800a362:	463d      	mov	r5, r7
 800a364:	e7d3      	b.n	800a30e <_svfiprintf_r+0x92>
 800a366:	9a03      	ldr	r2, [sp, #12]
 800a368:	1d11      	adds	r1, r2, #4
 800a36a:	6812      	ldr	r2, [r2, #0]
 800a36c:	9103      	str	r1, [sp, #12]
 800a36e:	2a00      	cmp	r2, #0
 800a370:	db01      	blt.n	800a376 <_svfiprintf_r+0xfa>
 800a372:	9207      	str	r2, [sp, #28]
 800a374:	e004      	b.n	800a380 <_svfiprintf_r+0x104>
 800a376:	4252      	negs	r2, r2
 800a378:	f043 0302 	orr.w	r3, r3, #2
 800a37c:	9207      	str	r2, [sp, #28]
 800a37e:	9304      	str	r3, [sp, #16]
 800a380:	783b      	ldrb	r3, [r7, #0]
 800a382:	2b2e      	cmp	r3, #46	; 0x2e
 800a384:	d10c      	bne.n	800a3a0 <_svfiprintf_r+0x124>
 800a386:	787b      	ldrb	r3, [r7, #1]
 800a388:	2b2a      	cmp	r3, #42	; 0x2a
 800a38a:	d133      	bne.n	800a3f4 <_svfiprintf_r+0x178>
 800a38c:	9b03      	ldr	r3, [sp, #12]
 800a38e:	1d1a      	adds	r2, r3, #4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	9203      	str	r2, [sp, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	bfb8      	it	lt
 800a398:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39c:	3702      	adds	r7, #2
 800a39e:	9305      	str	r3, [sp, #20]
 800a3a0:	4d2e      	ldr	r5, [pc, #184]	; (800a45c <_svfiprintf_r+0x1e0>)
 800a3a2:	7839      	ldrb	r1, [r7, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f7f5 ff32 	bl	8000210 <memchr>
 800a3ac:	b138      	cbz	r0, 800a3be <_svfiprintf_r+0x142>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	1b40      	subs	r0, r0, r5
 800a3b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a3b6:	9b04      	ldr	r3, [sp, #16]
 800a3b8:	4303      	orrs	r3, r0
 800a3ba:	3701      	adds	r7, #1
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	7839      	ldrb	r1, [r7, #0]
 800a3c0:	4827      	ldr	r0, [pc, #156]	; (800a460 <_svfiprintf_r+0x1e4>)
 800a3c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3c6:	2206      	movs	r2, #6
 800a3c8:	1c7e      	adds	r6, r7, #1
 800a3ca:	f7f5 ff21 	bl	8000210 <memchr>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d038      	beq.n	800a444 <_svfiprintf_r+0x1c8>
 800a3d2:	4b24      	ldr	r3, [pc, #144]	; (800a464 <_svfiprintf_r+0x1e8>)
 800a3d4:	bb13      	cbnz	r3, 800a41c <_svfiprintf_r+0x1a0>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	3307      	adds	r3, #7
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	3308      	adds	r3, #8
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e4:	444b      	add	r3, r9
 800a3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e8:	e76d      	b.n	800a2c6 <_svfiprintf_r+0x4a>
 800a3ea:	fb05 3202 	mla	r2, r5, r2, r3
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	e7a6      	b.n	800a342 <_svfiprintf_r+0xc6>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	3701      	adds	r7, #1
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	250a      	movs	r5, #10
 800a3fe:	4638      	mov	r0, r7
 800a400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a404:	3a30      	subs	r2, #48	; 0x30
 800a406:	2a09      	cmp	r2, #9
 800a408:	d903      	bls.n	800a412 <_svfiprintf_r+0x196>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0c8      	beq.n	800a3a0 <_svfiprintf_r+0x124>
 800a40e:	9105      	str	r1, [sp, #20]
 800a410:	e7c6      	b.n	800a3a0 <_svfiprintf_r+0x124>
 800a412:	fb05 2101 	mla	r1, r5, r1, r2
 800a416:	2301      	movs	r3, #1
 800a418:	4607      	mov	r7, r0
 800a41a:	e7f0      	b.n	800a3fe <_svfiprintf_r+0x182>
 800a41c:	ab03      	add	r3, sp, #12
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4622      	mov	r2, r4
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <_svfiprintf_r+0x1ec>)
 800a424:	a904      	add	r1, sp, #16
 800a426:	4640      	mov	r0, r8
 800a428:	f7fe f8fa 	bl	8008620 <_printf_float>
 800a42c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a430:	4681      	mov	r9, r0
 800a432:	d1d6      	bne.n	800a3e2 <_svfiprintf_r+0x166>
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	065b      	lsls	r3, r3, #25
 800a438:	f53f af35 	bmi.w	800a2a6 <_svfiprintf_r+0x2a>
 800a43c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a43e:	b01d      	add	sp, #116	; 0x74
 800a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	ab03      	add	r3, sp, #12
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	4622      	mov	r2, r4
 800a44a:	4b07      	ldr	r3, [pc, #28]	; (800a468 <_svfiprintf_r+0x1ec>)
 800a44c:	a904      	add	r1, sp, #16
 800a44e:	4640      	mov	r0, r8
 800a450:	f7fe fb9c 	bl	8008b8c <_printf_i>
 800a454:	e7ea      	b.n	800a42c <_svfiprintf_r+0x1b0>
 800a456:	bf00      	nop
 800a458:	0800a7ac 	.word	0x0800a7ac
 800a45c:	0800a7b2 	.word	0x0800a7b2
 800a460:	0800a7b6 	.word	0x0800a7b6
 800a464:	08008621 	.word	0x08008621
 800a468:	0800a1c9 	.word	0x0800a1c9

0800a46c <_sbrk_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4c06      	ldr	r4, [pc, #24]	; (800a488 <_sbrk_r+0x1c>)
 800a470:	2300      	movs	r3, #0
 800a472:	4605      	mov	r5, r0
 800a474:	4608      	mov	r0, r1
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	f7f7 fb60 	bl	8001b3c <_sbrk>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_sbrk_r+0x1a>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	b103      	cbz	r3, 800a486 <_sbrk_r+0x1a>
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	2000224c 	.word	0x2000224c

0800a48c <__ascii_mbtowc>:
 800a48c:	b082      	sub	sp, #8
 800a48e:	b901      	cbnz	r1, 800a492 <__ascii_mbtowc+0x6>
 800a490:	a901      	add	r1, sp, #4
 800a492:	b142      	cbz	r2, 800a4a6 <__ascii_mbtowc+0x1a>
 800a494:	b14b      	cbz	r3, 800a4aa <__ascii_mbtowc+0x1e>
 800a496:	7813      	ldrb	r3, [r2, #0]
 800a498:	600b      	str	r3, [r1, #0]
 800a49a:	7812      	ldrb	r2, [r2, #0]
 800a49c:	1c10      	adds	r0, r2, #0
 800a49e:	bf18      	it	ne
 800a4a0:	2001      	movne	r0, #1
 800a4a2:	b002      	add	sp, #8
 800a4a4:	4770      	bx	lr
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	e7fb      	b.n	800a4a2 <__ascii_mbtowc+0x16>
 800a4aa:	f06f 0001 	mvn.w	r0, #1
 800a4ae:	e7f8      	b.n	800a4a2 <__ascii_mbtowc+0x16>

0800a4b0 <memmove>:
 800a4b0:	4288      	cmp	r0, r1
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	eb01 0302 	add.w	r3, r1, r2
 800a4b8:	d807      	bhi.n	800a4ca <memmove+0x1a>
 800a4ba:	1e42      	subs	r2, r0, #1
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	d00a      	beq.n	800a4d6 <memmove+0x26>
 800a4c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4c8:	e7f8      	b.n	800a4bc <memmove+0xc>
 800a4ca:	4283      	cmp	r3, r0
 800a4cc:	d9f5      	bls.n	800a4ba <memmove+0xa>
 800a4ce:	1881      	adds	r1, r0, r2
 800a4d0:	1ad2      	subs	r2, r2, r3
 800a4d2:	42d3      	cmn	r3, r2
 800a4d4:	d100      	bne.n	800a4d8 <memmove+0x28>
 800a4d6:	bd10      	pop	{r4, pc}
 800a4d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4e0:	e7f7      	b.n	800a4d2 <memmove+0x22>

0800a4e2 <__malloc_lock>:
 800a4e2:	4770      	bx	lr

0800a4e4 <__malloc_unlock>:
 800a4e4:	4770      	bx	lr

0800a4e6 <_realloc_r>:
 800a4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	b921      	cbnz	r1, 800a4fa <_realloc_r+0x14>
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4f6:	f7ff be0d 	b.w	800a114 <_malloc_r>
 800a4fa:	b922      	cbnz	r2, 800a506 <_realloc_r+0x20>
 800a4fc:	f7ff fdbc 	bl	800a078 <_free_r>
 800a500:	4625      	mov	r5, r4
 800a502:	4628      	mov	r0, r5
 800a504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a506:	f000 f821 	bl	800a54c <_malloc_usable_size_r>
 800a50a:	42a0      	cmp	r0, r4
 800a50c:	d20f      	bcs.n	800a52e <_realloc_r+0x48>
 800a50e:	4621      	mov	r1, r4
 800a510:	4638      	mov	r0, r7
 800a512:	f7ff fdff 	bl	800a114 <_malloc_r>
 800a516:	4605      	mov	r5, r0
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0f2      	beq.n	800a502 <_realloc_r+0x1c>
 800a51c:	4631      	mov	r1, r6
 800a51e:	4622      	mov	r2, r4
 800a520:	f7fd ffd6 	bl	80084d0 <memcpy>
 800a524:	4631      	mov	r1, r6
 800a526:	4638      	mov	r0, r7
 800a528:	f7ff fda6 	bl	800a078 <_free_r>
 800a52c:	e7e9      	b.n	800a502 <_realloc_r+0x1c>
 800a52e:	4635      	mov	r5, r6
 800a530:	e7e7      	b.n	800a502 <_realloc_r+0x1c>

0800a532 <__ascii_wctomb>:
 800a532:	b149      	cbz	r1, 800a548 <__ascii_wctomb+0x16>
 800a534:	2aff      	cmp	r2, #255	; 0xff
 800a536:	bf85      	ittet	hi
 800a538:	238a      	movhi	r3, #138	; 0x8a
 800a53a:	6003      	strhi	r3, [r0, #0]
 800a53c:	700a      	strbls	r2, [r1, #0]
 800a53e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a542:	bf98      	it	ls
 800a544:	2001      	movls	r0, #1
 800a546:	4770      	bx	lr
 800a548:	4608      	mov	r0, r1
 800a54a:	4770      	bx	lr

0800a54c <_malloc_usable_size_r>:
 800a54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a550:	1f18      	subs	r0, r3, #4
 800a552:	2b00      	cmp	r3, #0
 800a554:	bfbc      	itt	lt
 800a556:	580b      	ldrlt	r3, [r1, r0]
 800a558:	18c0      	addlt	r0, r0, r3
 800a55a:	4770      	bx	lr

0800a55c <_init>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

0800a568 <_fini>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	bf00      	nop
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr
