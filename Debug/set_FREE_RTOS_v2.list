
set_FREE_RTOS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f20  20000010  080072e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  080072e4  00021f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ab5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038bc  00000000  00000000  00040af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019d8  00000000  00000000  000443b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001840  00000000  00000000  00045d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b5a  00000000  00000000  000475d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c88  00000000  00000000  0004b12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011469d  00000000  00000000  0005fdb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017444f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e08  00000000  00000000  001744cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080071cc 	.word	0x080071cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080071cc 	.word	0x080071cc

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc83 	bl	8000e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f82a 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f976 	bl	80007fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f8ae 	bl	8000670 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f8fc 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f946 	bl	80007a8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f004 f8e0 	bl	80046e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <main+0x48>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x4c>)
 8000526:	f004 f945 	bl	80047b4 <osThreadNew>
 800052a:	4602      	mov	r2, r0
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0x50>)
 800052e:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <main+0x54>)
 8000532:	2100      	movs	r1, #0
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x58>)
 8000536:	f004 f93d 	bl	80047b4 <osThreadNew>
 800053a:	4602      	mov	r2, r0
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <main+0x5c>)
 800053e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f004 f902 	bl	8004748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x44>
 8000546:	bf00      	nop
 8000548:	0800721c 	.word	0x0800721c
 800054c:	080009a1 	.word	0x080009a1
 8000550:	20001e98 	.word	0x20001e98
 8000554:	08007240 	.word	0x08007240
 8000558:	080009f1 	.word	0x080009f1
 800055c:	20001e9c 	.word	0x20001e9c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0bc      	sub	sp, #240	; 0xf0
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fe23 	bl	80071ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2294      	movs	r2, #148	; 0x94
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fe15 	bl	80071ba <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f8bd 	bl	8001710 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800059c:	f000 fa4a 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005c0:	231e      	movs	r3, #30
 80005c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f95b 	bl	8001898 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e8:	f000 fa24 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fd66 	bl	80020e4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 fa09 	bl	8000a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8000622:	f242 0324 	movw	r3, #8228	; 0x2024
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000628:	2300      	movs	r3, #0
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000634:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000636:	2303      	movs	r3, #3
 8000638:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800063e:	230c      	movs	r3, #12
 8000640:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800064e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000652:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f826 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000662:	f000 f9e7 	bl	8000a34 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	37f0      	adds	r7, #240	; 0xf0
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <MX_LPUART1_UART_Init+0x94>)
 8000678:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <MX_LPUART1_UART_Init+0x98>)
 800067e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 8000682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000686:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b8:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006ba:	f002 ffcf 	bl	800365c <HAL_UART_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006c4:	f000 f9b6 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006cc:	f003 fc8b 	bl	8003fe6 <HAL_UARTEx_SetTxFifoThreshold>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006d6:	f000 f9ad 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4808      	ldr	r0, [pc, #32]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 80006de:	f003 fcc0 	bl	8004062 <HAL_UARTEx_SetRxFifoThreshold>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f000 f9a4 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <MX_LPUART1_UART_Init+0x9c>)
 80006ee:	f003 fc41 	bl	8003f74 <HAL_UARTEx_DisableFifoMode>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006f8:	f000 f99c 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20001d80 	.word	0x20001d80
 8000704:	40008000 	.word	0x40008000
 8000708:	00033324 	.word	0x00033324
 800070c:	20001e0c 	.word	0x20001e0c

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_USART3_UART_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800075a:	f002 ff7f 	bl	800365c <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f966 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800076c:	f003 fc3b 	bl	8003fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f95d 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800077e:	f003 fc70 	bl	8004062 <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f954 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800078e:	f003 fbf1 	bl	8003f74 <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f94c 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200018ec 	.word	0x200018ec
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007b6:	2206      	movs	r2, #6
 80007b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007bc:	2202      	movs	r2, #2
 80007be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007e6:	f000 fe2b 	bl	8001440 <HAL_PCD_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f920 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20001978 	.word	0x20001978

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b5d      	ldr	r3, [pc, #372]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a5c      	ldr	r2, [pc, #368]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b5a      	ldr	r3, [pc, #360]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	4b57      	ldr	r3, [pc, #348]	; (8000988 <MX_GPIO_Init+0x18c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a56      	ldr	r2, [pc, #344]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b54      	ldr	r3, [pc, #336]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b51      	ldr	r3, [pc, #324]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a50      	ldr	r2, [pc, #320]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b4e      	ldr	r3, [pc, #312]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <MX_GPIO_Init+0x18c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a4a      	ldr	r2, [pc, #296]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b48      	ldr	r3, [pc, #288]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b45      	ldr	r3, [pc, #276]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a44      	ldr	r2, [pc, #272]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b42      	ldr	r3, [pc, #264]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <MX_GPIO_Init+0x18c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a3e      	ldr	r2, [pc, #248]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008a2:	f000 ffe9 	bl	8001878 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <MX_GPIO_Init+0x18c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a37      	ldr	r2, [pc, #220]	; (8000988 <MX_GPIO_Init+0x18c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_GPIO_Init+0x18c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4832      	ldr	r0, [pc, #200]	; (800098c <MX_GPIO_Init+0x190>)
 80008c4:	f000 fd8a 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008ce:	4830      	ldr	r0, [pc, #192]	; (8000990 <MX_GPIO_Init+0x194>)
 80008d0:	f000 fd84 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	482e      	ldr	r0, [pc, #184]	; (8000994 <MX_GPIO_Init+0x198>)
 80008da:	f000 fd7f 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_GPIO_Init+0x19c>)
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	482a      	ldr	r0, [pc, #168]	; (800099c <MX_GPIO_Init+0x1a0>)
 80008f4:	f000 fbc8 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 80008f8:	2308      	movs	r3, #8
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	481f      	ldr	r0, [pc, #124]	; (800098c <MX_GPIO_Init+0x190>)
 8000910:	f000 fbba 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo1_Pin */
  GPIO_InitStruct.Pin = Echo1_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4819      	ldr	r0, [pc, #100]	; (800098c <MX_GPIO_Init+0x190>)
 8000928:	f000 fbae 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800092c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <MX_GPIO_Init+0x194>)
 8000946:	f000 fb9f 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094a:	2320      	movs	r3, #32
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_GPIO_Init+0x198>)
 8000962:	f000 fb91 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_GPIO_Init+0x198>)
 800097a:	f000 fb85 	bl	8001088 <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	48001400 	.word	0x48001400
 8000990:	48000400 	.word	0x48000400
 8000994:	48001800 	.word	0x48001800
 8000998:	10110000 	.word	0x10110000
 800099c:	48000800 	.word	0x48000800

080009a0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <StartBlink01+0x44>)
 80009ae:	f000 fcfd 	bl	80013ac <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d011      	beq.n	80009dc <StartBlink01+0x3c>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <StartBlink01+0x48>)
 80009be:	f000 fd25 	bl	800140c <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2108      	movs	r1, #8
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <StartBlink01+0x4c>)
 80009c8:	f000 fd08 	bl	80013dc <HAL_GPIO_WritePin>
		  osDelay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f003 ff97 	bl	8004900 <osDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <StartBlink01+0x4c>)
 80009d8:	f000 fd00 	bl	80013dc <HAL_GPIO_WritePin>
	  }

    osDelay(200);
 80009dc:	20c8      	movs	r0, #200	; 0xc8
 80009de:	f003 ff8f 	bl	8004900 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80009e2:	e7e1      	b.n	80009a8 <StartBlink01+0x8>
 80009e4:	48000800 	.word	0x48000800
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48001400 	.word	0x48001400

080009f0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <StartBlink02+0x1c>)
 80009fc:	f000 fd06 	bl	800140c <HAL_GPIO_TogglePin>
    osDelay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a04:	f003 ff7c 	bl	8004900 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a08:	e7f6      	b.n	80009f8 <StartBlink02+0x8>
 8000a0a:	bf00      	nop
 8000a0c:	48000400 	.word	0x48000400

08000a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a22:	f000 fa0d 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40001000 	.word	0x40001000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	; (8000b6c <HAL_UART_MspInit+0xe0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12b      	bne.n	8000b06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000ade:	f000 fecb 	bl	8001878 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ae2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000af4:	2308      	movs	r3, #8
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481d      	ldr	r0, [pc, #116]	; (8000b74 <HAL_UART_MspInit+0xe8>)
 8000b00:	f000 fac2 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b04:	e02d      	b.n	8000b62 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_UART_MspInit+0xec>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d128      	bne.n	8000b62 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0xe4>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b52:	2307      	movs	r3, #7
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_UART_MspInit+0xf0>)
 8000b5e:	f000 fa93 	bl	8001088 <HAL_GPIO_Init>
}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40008000 	.word	0x40008000
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48001800 	.word	0x48001800
 8000b78:	40004800 	.word	0x40004800
 8000b7c:	48000c00 	.word	0x48000c00

08000b80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba0:	d154      	bne.n	8000c4c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bcc:	230a      	movs	r3, #10
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f000 fa55 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 fa47 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d114      	bne.n	8000c48 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000c36:	f000 fe0f 	bl	8001858 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <HAL_PCD_MspInit+0xd4>)
 8000c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c46:	e001      	b.n	8000c4c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000c48:	f000 fe06 	bl	8001858 <HAL_PWREx_EnableVddUSB>
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2036      	movs	r0, #54	; 0x36
 8000c6e:	f000 f9e1 	bl	8001034 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c72:	2036      	movs	r0, #54	; 0x36
 8000c74:	f000 f9fa 	bl	800106c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_InitTick+0xa0>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_InitTick+0xa0>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6593      	str	r3, [r2, #88]	; 0x58
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_InitTick+0xa0>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c90:	f107 0210 	add.w	r2, r7, #16
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fc10 	bl	80024c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ca0:	f001 fbe2 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	0c9b      	lsrs	r3, r3, #18
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_InitTick+0xac>)
 8000cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cda:	f002 f9ed 	bl	80030b8 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d104      	bne.n	8000cee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <HAL_InitTick+0xa8>)
 8000ce6:	f002 fa49 	bl	800317c <HAL_TIM_Base_Start_IT>
 8000cea:	4603      	mov	r3, r0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	20001ea0 	.word	0x20001ea0
 8000d04:	40001000 	.word	0x40001000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <TIM6_DAC_IRQHandler+0x10>)
 8000d42:	f002 fa8b 	bl	800325c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20001ea0 	.word	0x20001ea0

08000d50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <SystemInit+0x64>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <SystemInit+0x64>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <SystemInit+0x68>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <SystemInit+0x68>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <SystemInit+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SystemInit+0x68>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <SystemInit+0x68>)
 8000d7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <SystemInit+0x68>)
 8000d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <SystemInit+0x68>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <SystemInit+0x68>)
 8000d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <SystemInit+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SystemInit+0x64>)
 8000da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da6:	609a      	str	r2, [r3, #8]
#endif
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00
 8000db8:	40021000 	.word	0x40021000

08000dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff ffc6 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dc6:	e003      	b.n	8000dd0 <LoopCopyDataInit>

08000dc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dce:	3104      	adds	r1, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dd8:	d3f6      	bcc.n	8000dc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ddc:	e002      	b.n	8000de4 <LoopFillZerobss>

08000dde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000de0:	f842 3b04 	str.w	r3, [r2], #4

08000de4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <LoopForever+0x16>)
	cmp	r2, r3
 8000de6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000de8:	d3f9      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 f9b7 	bl	800715c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dee:	f7ff fb87 	bl	8000500 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000df8:	080072d4 	.word	0x080072d4
	ldr	r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e00:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e04:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e08:	20001f30 	.word	0x20001f30

08000e0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_IRQHandler>

08000e0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f900 	bl	800101e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff1a 	bl	8000c58 <HAL_InitTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e001      	b.n	8000e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e30:	f7ff fe08 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20001eec 	.word	0x20001eec

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20001eec 	.word	0x20001eec

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_Delay+0x40>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff4c 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff61 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ffb1 	bl	8000fb8 <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff80 	bl	8000f64 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff54 	bl	8000f28 <__NVIC_EnableIRQ>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e166      	b.n	8001366 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8158 	beq.w	8001360 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d00b      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	2b11      	cmp	r3, #17
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0xea>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b12      	cmp	r3, #18
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b2 	beq.w	8001360 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	4a60      	ldr	r2, [pc, #384]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6613      	str	r3, [r2, #96]	; 0x60
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001214:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d02b      	beq.n	8001298 <HAL_GPIO_Init+0x210>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_GPIO_Init+0x304>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d025      	beq.n	8001294 <HAL_GPIO_Init+0x20c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_GPIO_Init+0x308>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d01f      	beq.n	8001290 <HAL_GPIO_Init+0x208>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a50      	ldr	r2, [pc, #320]	; (8001394 <HAL_GPIO_Init+0x30c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d019      	beq.n	800128c <HAL_GPIO_Init+0x204>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_GPIO_Init+0x310>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x200>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_GPIO_Init+0x314>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1fc>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x318>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1f8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_GPIO_Init+0x31c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1f4>
 8001278:	2307      	movs	r3, #7
 800127a:	e00e      	b.n	800129a <HAL_GPIO_Init+0x212>
 800127c:	2308      	movs	r3, #8
 800127e:	e00c      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001280:	2306      	movs	r3, #6
 8001282:	e00a      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001284:	2305      	movs	r3, #5
 8001286:	e008      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001288:	2304      	movs	r3, #4
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x212>
 800128c:	2303      	movs	r3, #3
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001298:	2300      	movs	r3, #0
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012aa:	4937      	ldr	r1, [pc, #220]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012b8:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_GPIO_Init+0x320>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012dc:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x320>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_GPIO_Init+0x320>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001306:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x320>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <HAL_GPIO_Init+0x320>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	f47f ae91 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	48000400 	.word	0x48000400
 8001390:	48000800 	.word	0x48000800
 8001394:	48000c00 	.word	0x48000c00
 8001398:	48001000 	.word	0x48001000
 800139c:	48001400 	.word	0x48001400
 80013a0:	48001800 	.word	0x48001800
 80013a4:	48001c00 	.word	0x48001c00
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43d9      	mvns	r1, r3
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	400b      	ands	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	b08f      	sub	sp, #60	; 0x3c
 8001444:	af0a      	add	r7, sp, #40	; 0x28
 8001446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e116      	b.n	8001680 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fb87 	bl	8000b80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fedf 	bl	8004254 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	687e      	ldr	r6, [r7, #4]
 800149e:	466d      	mov	r5, sp
 80014a0:	f106 0410 	add.w	r4, r6, #16
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b4:	1d33      	adds	r3, r6, #4
 80014b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f002 fe79 	bl	80041b0 <USB_CoreInit>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0d7      	b.n	8001680 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fecd 	bl	8004276 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e04a      	b.n	8001578 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	333d      	adds	r3, #61	; 0x3d
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	333c      	adds	r3, #60	; 0x3c
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	b298      	uxth	r0, r3
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3342      	adds	r3, #66	; 0x42
 800151e:	4602      	mov	r2, r0
 8001520:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	333f      	adds	r3, #63	; 0x3f
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3344      	adds	r3, #68	; 0x44
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3348      	adds	r3, #72	; 0x48
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3350      	adds	r3, #80	; 0x50
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3af      	bcc.n	80014e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e044      	b.n	8001612 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3b5      	bcc.n	8001588 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	687e      	ldr	r6, [r7, #4]
 8001624:	466d      	mov	r5, sp
 8001626:	f106 0410 	add.w	r4, r6, #16
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001636:	e885 0003 	stmia.w	r5, {r0, r1}
 800163a:	1d33      	adds	r3, r6, #4
 800163c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f002 fe44 	bl	80042cc <USB_DevInit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e014      	b.n	8001680 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f80a 	bl	8001688 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 ffd4 	bl	8004626 <USB_DevDisconnect>

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001688 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	f043 0303 	orr.w	r3, r3, #3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_PWREx_GetVoltageRange+0x3c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e0:	d102      	bne.n	80016e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e6:	e00b      	b.n	8001700 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_PWREx_GetVoltageRange+0x3c>)
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f6:	d102      	bne.n	80016fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016fc:	e000      	b.n	8001700 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000

08001710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d141      	bne.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172a:	d131      	bne.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800172c:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001732:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2232      	movs	r2, #50	; 0x32
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4a3f      	ldr	r2, [pc, #252]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9b      	lsrs	r3, r3, #18
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001762:	e002      	b.n	800176a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3b01      	subs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001776:	d102      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f2      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178a:	d158      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e057      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800179c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017a0:	e04d      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a8:	d141      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d131      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d0:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2232      	movs	r2, #50	; 0x32
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ee:	e002      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d102      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f2      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d112      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e011      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800182c:	e007      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40007000 	.word	0x40007000
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_PWREx_EnableVddUSB+0x1c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6053      	str	r3, [r2, #4]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007000 	.word	0x40007000

08001878 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PWREx_EnableVddIO2+0x1c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6053      	str	r3, [r2, #4]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f000 bc16 	b.w	80020d8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ac:	4ba0      	ldr	r3, [pc, #640]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b6:	4b9e      	ldr	r3, [pc, #632]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80e4 	beq.w	8001a96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4c>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	f040 808b 	bne.w	80019f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 8087 	bne.w	80019f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_OscConfig+0x64>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e3ed      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1a      	ldr	r2, [r3, #32]
 8001900:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_RCC_OscConfig+0x7e>
 800190c:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001914:	e005      	b.n	8001922 <HAL_RCC_OscConfig+0x8a>
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001922:	4293      	cmp	r3, r2
 8001924:	d223      	bcs.n	800196e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fdfa 	bl	8002524 <RCC_SetFlashLatencyFromMSIRange>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e3ce      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7c      	ldr	r2, [pc, #496]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4977      	ldr	r1, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001958:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4972      	ldr	r1, [pc, #456]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e025      	b.n	80019ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196e:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6f      	ldr	r2, [pc, #444]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	496a      	ldr	r1, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	4965      	ldr	r1, [pc, #404]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fdba 	bl	8002524 <RCC_SetFlashLatencyFromMSIRange>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e38e      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ba:	f000 fcbf 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80019be:	4601      	mov	r1, r0
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <HAL_RCC_OscConfig+0x29c>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	fa21 f303 	lsr.w	r3, r1, r3
 80019d6:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x2a0>)
 80019d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019da:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_RCC_OscConfig+0x2a4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f93a 	bl	8000c58 <HAL_InitTick>
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d052      	beq.n	8001a94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	e372      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d032      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa2f 	bl	8000e68 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fa2b 	bl	8000e68 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e35b      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a20:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3f      	ldr	r2, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	493a      	ldr	r1, [pc, #232]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
 8001a5e:	e01a      	b.n	8001a96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f9fc 	bl	8000e68 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a74:	f7ff f9f8 	bl	8000e68 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e328      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1dc>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d073      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x21c>
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d10e      	bne.n	8001acc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d10b      	bne.n	8001acc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d063      	beq.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d15f      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e305      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0x288>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x270>
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0x288>
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f99e 	bl	8000e68 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2e:	e010      	b.n	8001b52 <HAL_RCC_OscConfig+0x2ba>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08007264 	.word	0x08007264
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f992 	bl	8000e68 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e2c2      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	4baf      	ldr	r3, [pc, #700]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x2a8>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f982 	bl	8000e68 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f97e 	bl	8000e68 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e2ae      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7a:	4ba5      	ldr	r3, [pc, #660]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2d0>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d060      	beq.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x310>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d119      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d116      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba8:	4b99      	ldr	r3, [pc, #612]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x328>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e28b      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b93      	ldr	r3, [pc, #588]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	4990      	ldr	r1, [pc, #576]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	e040      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d023      	beq.n	8001c26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bde:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a8b      	ldr	r2, [pc, #556]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f93d 	bl	8000e68 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f939 	bl	8000e68 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e269      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	497c      	ldr	r1, [pc, #496]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e018      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a79      	ldr	r2, [pc, #484]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f919 	bl	8000e68 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f915 	bl	8000e68 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e245      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c4c:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d03c      	beq.n	8001cde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c72:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f8f4 	bl	8000e68 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f8f0 	bl	8000e68 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e220      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c96:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ef      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3ec>
 8001ca4:	e01b      	b.n	8001cde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8d7 	bl	8000e68 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f8d3 	bl	8000e68 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e203      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ef      	bne.n	8001cbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80a6 	beq.w	8001e38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cf0:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6593      	str	r3, [r2, #88]	; 0x58
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d118      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7ff f89a 	bl	8000e68 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7ff f896 	bl	8000e68 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1c6      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4d8>
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6e:	e024      	b.n	8001dba <HAL_RCC_OscConfig+0x522>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d110      	bne.n	8001d9a <HAL_RCC_OscConfig+0x502>
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d98:	e00f      	b.n	8001dba <HAL_RCC_OscConfig+0x522>
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f023 0304 	bic.w	r3, r3, #4
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f851 	bl	8000e68 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff f84d 	bl	8000e68 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e17b      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ed      	beq.n	8001dca <HAL_RCC_OscConfig+0x532>
 8001dee:	e01a      	b.n	8001e26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f83a 	bl	8000e68 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f836 	bl	8000e68 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d906      	bls.n	8001e18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e164      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e18:	4ba8      	ldr	r3, [pc, #672]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e8      	bne.n	8001df8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4aa2      	ldr	r2, [pc, #648]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e4c:	4b9b      	ldr	r3, [pc, #620]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e52:	4a9a      	ldr	r2, [pc, #616]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f804 	bl	8000e68 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e64:	f7ff f800 	bl	8000e68 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e130      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ef      	beq.n	8001e64 <HAL_RCC_OscConfig+0x5cc>
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8c:	4a8b      	ldr	r2, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7fe ffe7 	bl	8000e68 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9e:	f7fe ffe3 	bl	8000e68 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e113      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8107 	beq.w	80020d6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	f040 80cb 	bne.w	8002068 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0203 	and.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d12c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d123      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d113      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	3b01      	subs	r3, #1
 8001f26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d109      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d06d      	beq.n	800201c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d068      	beq.n	8002018 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0ba      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a55      	ldr	r2, [pc, #340]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f6e:	f7fe ff7b 	bl	8000e68 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe ff77 	bl	8000e68 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0a7      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0x828>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0552      	lsls	r2, r2, #21
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fc2:	0852      	lsrs	r2, r2, #1
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0652      	lsls	r2, r2, #25
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fce:	06d2      	lsls	r2, r2, #27
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	493a      	ldr	r1, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a34      	ldr	r2, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff0:	f7fe ff3a 	bl	8000e68 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe ff36 	bl	8000e68 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e066      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002016:	e05e      	b.n	80020d6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e05d      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d156      	bne.n	80020d6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002040:	f7fe ff12 	bl	8000e68 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff0e 	bl	8000e68 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e03e      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x7b0>
 8002066:	e036      	b.n	80020d6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d031      	beq.n	80020d2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002078:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002098:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800209c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7fe fee1 	bl	8000e68 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	e00c      	b.n	80020c4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe fedd 	bl	8000e68 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d905      	bls.n	80020c4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e00d      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x848>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ec      	bne.n	80020aa <HAL_RCC_OscConfig+0x812>
 80020d0:	e001      	b.n	80020d6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e10f      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b86      	ldr	r3, [pc, #536]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 020f 	bic.w	r2, r3, #15
 8002112:	4984      	ldr	r1, [pc, #528]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0f7      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8089 	beq.w	800224c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d133      	bne.n	80021aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	4b79      	ldr	r3, [pc, #484]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0e4      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002152:	f000 fa41 	bl	80025d8 <RCC_GetSysClockFreqFromPLLSource>
 8002156:	4602      	mov	r2, r0
 8002158:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_RCC_ClockConfig+0x248>)
 800215a:	429a      	cmp	r2, r3
 800215c:	d955      	bls.n	800220a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002172:	4a6d      	ldr	r2, [pc, #436]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e044      	b.n	800220a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03e      	beq.n	800220a <HAL_RCC_ClockConfig+0x126>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13a      	bne.n	800220a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219c:	4a62      	ldr	r2, [pc, #392]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e02f      	b.n	800220a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0ac      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0a0      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e098      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021ea:	f000 f8a7 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_ClockConfig+0x248>)
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d909      	bls.n	800220a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021f6:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fe:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002204:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4944      	ldr	r1, [pc, #272]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fe24 	bl	8000e68 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fe20 	bl	8000e68 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e070      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4930      	ldr	r1, [pc, #192]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
 800226a:	e008      	b.n	800227e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b80      	cmp	r3, #128	; 0x80
 8002270:	d105      	bne.n	800227e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d210      	bcs.n	80022ae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 020f 	bic.w	r2, r3, #15
 8002294:	4923      	ldr	r1, [pc, #140]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e036      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4910      	ldr	r1, [pc, #64]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ec:	f000 f826 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022f0:	4601      	mov	r1, r0
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <HAL_RCC_ClockConfig+0x24c>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa21 f303 	lsr.w	r3, r1, r3
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x250>)
 800230a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x254>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fca1 	bl	8000c58 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
 800232c:	04c4b400 	.word	0x04c4b400
 8002330:	08007264 	.word	0x08007264
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d121      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11e      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e005      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e004      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d133      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e2:	617b      	str	r3, [r7, #20]
      break;
 80023e4:	e005      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e8:	617b      	str	r3, [r7, #20]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	617b      	str	r3, [r7, #20]
      break;
 80023f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	3301      	adds	r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	fb02 f203 	mul.w	r2, r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0e5b      	lsrs	r3, r3, #25
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002432:	69bb      	ldr	r3, [r7, #24]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3724      	adds	r7, #36	; 0x24
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000
 8002444:	0800727c 	.word	0x0800727c
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4601      	mov	r1, r0
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08007274 	.word	0x08007274

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002498:	f7ff ffda 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 800249c:	4601      	mov	r1, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0adb      	lsrs	r3, r3, #11
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08007274 	.word	0x08007274

080024c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	220f      	movs	r2, #15
 80024ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_GetClockConfig+0x5c>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCC_GetClockConfig+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40022000 	.word	0x40022000

08002524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800253c:	f7ff f8c8 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002540:	6178      	str	r0, [r7, #20]
 8002542:	e014      	b.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800255c:	f7ff f8b8 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002560:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d10b      	bne.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d913      	bls.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2ba0      	cmp	r3, #160	; 0xa0
 8002580:	d902      	bls.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002582:	2302      	movs	r3, #2
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	e00d      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e00a      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b7f      	cmp	r3, #127	; 0x7f
 8002592:	d902      	bls.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002594:	2302      	movs	r3, #2
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e004      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d101      	bne.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 020f 	bic.w	r2, r3, #15
 80025ac:	4909      	ldr	r1, [pc, #36]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40022000 	.word	0x40022000

080025d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d118      	bne.n	8002620 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d107      	bne.n	800260a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e005      	b.n	8002616 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d002      	beq.n	8002636 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002634:	e005      	b.n	8002642 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002638:	613b      	str	r3, [r7, #16]
    break;
 800263a:	e005      	b.n	8002648 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800263e:	613b      	str	r3, [r7, #16]
    break;
 8002640:	e002      	b.n	8002648 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	613b      	str	r3, [r7, #16]
    break;
 8002646:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3301      	adds	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	fb02 f203 	mul.w	r2, r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	0e5b      	lsrs	r3, r3, #25
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	3301      	adds	r3, #1
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002688:	683b      	ldr	r3, [r7, #0]
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	0800727c 	.word	0x0800727c
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b4:	2300      	movs	r3, #0
 80026b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03d      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d00b      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d804      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d015      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026d8:	e01d      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80026da:	2b60      	cmp	r3, #96	; 0x60
 80026dc:	d01e      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d01c      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026e2:	e018      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e4:	4b86      	ldr	r3, [pc, #536]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a85      	ldr	r2, [pc, #532]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f0:	e015      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fafd 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002702:	e00c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3320      	adds	r3, #32
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fbe4 	bl	8002ed8 <RCCEx_PLLSAI2_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002714:	e003      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	74fb      	strb	r3, [r7, #19]
      break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800271c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002724:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800272a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002732:	4973      	ldr	r1, [pc, #460]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d042      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002754:	d00f      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275a:	d805      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002764:	d017      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002766:	e01f      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800276c:	d01f      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d01c      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002774:	e018      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002776:	4b62      	ldr	r3, [pc, #392]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002782:	e015      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fab4 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002794:	e00c      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3320      	adds	r3, #32
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fb9b 	bl	8002ed8 <RCCEx_PLLSAI2_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a6:	e003      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	74fb      	strb	r3, [r7, #19]
      break;
 80027ac:	e000      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80027ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b6:	4b52      	ldr	r3, [pc, #328]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	494e      	ldr	r1, [pc, #312]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80027cc:	e001      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 809f 	beq.w	800291e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027e4:	4b46      	ldr	r3, [pc, #280]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	4a40      	ldr	r2, [pc, #256]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6593      	str	r3, [r2, #88]	; 0x58
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002822:	f7fe fb21 	bl	8000e68 <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002828:	e009      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fb1d 	bl	8000e68 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d902      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	74fb      	strb	r3, [r7, #19]
        break;
 800283c:	e005      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ef      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d15b      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01f      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	429a      	cmp	r2, r3
 800286c:	d019      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d016      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fadc 	bl	8000e68 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	e00b      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fad8 	bl	8000e68 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d902      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	74fb      	strb	r3, [r7, #19]
            break;
 80028ca:	e006      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ec      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10c      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028f8:	e008      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	74bb      	strb	r3, [r7, #18]
 80028fe:	e005      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290c:	7c7b      	ldrb	r3, [r7, #17]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4ba0      	ldr	r3, [pc, #640]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	4a9f      	ldr	r2, [pc, #636]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292a:	4b9a      	ldr	r3, [pc, #616]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f023 0203 	bic.w	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	4996      	ldr	r1, [pc, #600]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800294c:	4b91      	ldr	r3, [pc, #580]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 020c 	bic.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	498e      	ldr	r1, [pc, #568]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800296e:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	4985      	ldr	r1, [pc, #532]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002990:	4b80      	ldr	r3, [pc, #512]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	497d      	ldr	r1, [pc, #500]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029b2:	4b78      	ldr	r3, [pc, #480]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c0:	4974      	ldr	r1, [pc, #464]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d4:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e2:	496c      	ldr	r1, [pc, #432]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a04:	4963      	ldr	r1, [pc, #396]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a18:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a26:	495b      	ldr	r1, [pc, #364]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	4952      	ldr	r1, [pc, #328]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	494a      	ldr	r1, [pc, #296]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a7e:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	4941      	ldr	r1, [pc, #260]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002aa0:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	4939      	ldr	r1, [pc, #228]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac2:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	4930      	ldr	r1, [pc, #192]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a2b      	ldr	r2, [pc, #172]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aec:	60d3      	str	r3, [r2, #12]
 8002aee:	e011      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f8f9 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d04d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b28:	d108      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b3a:	e012      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b5a:	490e      	ldr	r1, [pc, #56]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e020      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b82:	d109      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a02      	ldr	r2, [pc, #8]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8e:	60d3      	str	r3, [r2, #12]
 8002b90:	e014      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f8a5 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d028      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd6:	4947      	ldr	r1, [pc, #284]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a41      	ldr	r2, [pc, #260]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf2:	60d3      	str	r3, [r2, #12]
 8002bf4:	e011      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f876 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01e      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c26:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c36:	492f      	ldr	r1, [pc, #188]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f851 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c76:	f023 0204 	bic.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c80:	491c      	ldr	r1, [pc, #112]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9a:	f023 0218 	bic.w	r2, r3, #24
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	4913      	ldr	r1, [pc, #76]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d06:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00e      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0203 	and.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d103      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
       ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13f      	bne.n	8002daa <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e03c      	b.n	8002daa <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d00c      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0x5a>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d013      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x6c>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d120      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d50:	e01a      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d62:	e013      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d64:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d70:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d80:	e006      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      break;
 8002d86:	e004      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e002      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d8c:	bf00      	nop
 8002d8e:	e000      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d90:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d108      	bne.n	8002daa <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d98:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f023 0203 	bic.w	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4948      	ldr	r1, [pc, #288]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8086 	bne.w	8002ebe <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002db2:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a44      	ldr	r2, [pc, #272]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002db8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbe:	f7fe f853 	bl	8000e68 <HAL_GetTick>
 8002dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dc4:	e009      	b.n	8002dda <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dc6:	f7fe f84f 	bl	8000e68 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d902      	bls.n	8002dda <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8002dd8:	e005      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d168      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d113      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <RCCEx_PLLSAI1_Config+0x1d4>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	0211      	lsls	r1, r2, #8
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68d2      	ldr	r2, [r2, #12]
 8002e04:	06d2      	lsls	r2, r2, #27
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6852      	ldr	r2, [r2, #4]
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	430a      	orrs	r2, r1
 8002e12:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	610b      	str	r3, [r1, #16]
 8002e18:	e02d      	b.n	8002e76 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	0211      	lsls	r1, r2, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	0852      	lsrs	r2, r2, #1
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0552      	lsls	r2, r2, #21
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6852      	ldr	r2, [r2, #4]
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	430a      	orrs	r2, r1
 8002e44:	4920      	ldr	r1, [pc, #128]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	610b      	str	r3, [r1, #16]
 8002e4a:	e014      	b.n	8002e76 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	0211      	lsls	r1, r2, #8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6952      	ldr	r2, [r2, #20]
 8002e5e:	0852      	lsrs	r2, r2, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0652      	lsls	r2, r2, #25
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6852      	ldr	r2, [r2, #4]
 8002e6a:	3a01      	subs	r2, #1
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	4915      	ldr	r1, [pc, #84]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fd fff1 	bl	8000e68 <HAL_GetTick>
 8002e86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e88:	e009      	b.n	8002e9e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e8a:	f7fd ffed 	bl	8000e68 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d902      	bls.n	8002e9e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9c:	e005      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ef      	beq.n	8002e8a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	07ff800f 	.word	0x07ff800f
 8002ed0:	ff9f800f 	.word	0xff9f800f
 8002ed4:	f9ff800f 	.word	0xf9ff800f

08002ed8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ee6:	4b70      	ldr	r3, [pc, #448]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0203 	and.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d103      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
       ||
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d13f      	bne.n	8002f8a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e03c      	b.n	8002f8a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d00c      	beq.n	8002f32 <RCCEx_PLLSAI2_Config+0x5a>
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d013      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x6c>
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d120      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11d      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e01a      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f32:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f42:	e013      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f44:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10f      	bne.n	8002f70 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f50:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f60:	e006      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      break;
 8002f66:	e004      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f68:	bf00      	nop
 8002f6a:	e002      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f70:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d108      	bne.n	8002f8a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f023 0203 	bic.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4948      	ldr	r1, [pc, #288]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 8086 	bne.w	800309e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f92:	4b45      	ldr	r3, [pc, #276]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a44      	ldr	r2, [pc, #272]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9e:	f7fd ff63 	bl	8000e68 <HAL_GetTick>
 8002fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fa4:	e009      	b.n	8002fba <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa6:	f7fd ff5f 	bl	8000e68 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d902      	bls.n	8002fba <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb8:	e005      	b.n	8002fc6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ef      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d168      	bne.n	800309e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d113      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fd2:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b35      	ldr	r3, [pc, #212]	; (80030ac <RCCEx_PLLSAI2_Config+0x1d4>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	0211      	lsls	r1, r2, #8
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68d2      	ldr	r2, [r2, #12]
 8002fe4:	06d2      	lsls	r2, r2, #27
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6852      	ldr	r2, [r2, #4]
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	492d      	ldr	r1, [pc, #180]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
 8002ff8:	e02d      	b.n	8003056 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d115      	bne.n	800302c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6912      	ldr	r2, [r2, #16]
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6852      	ldr	r2, [r2, #4]
 800301e:	3a01      	subs	r2, #1
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	430a      	orrs	r2, r1
 8003024:	4920      	ldr	r1, [pc, #128]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	614b      	str	r3, [r1, #20]
 800302a:	e014      	b.n	8003056 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	0211      	lsls	r1, r2, #8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6952      	ldr	r2, [r2, #20]
 800303e:	0852      	lsrs	r2, r2, #1
 8003040:	3a01      	subs	r2, #1
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6852      	ldr	r2, [r2, #4]
 800304a:	3a01      	subs	r2, #1
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	430a      	orrs	r2, r1
 8003050:	4915      	ldr	r1, [pc, #84]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003052:	4313      	orrs	r3, r2
 8003054:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fd ff01 	bl	8000e68 <HAL_GetTick>
 8003066:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003068:	e009      	b.n	800307e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800306a:	f7fd fefd 	bl	8000e68 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d902      	bls.n	800307e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	73fb      	strb	r3, [r7, #15]
          break;
 800307c:	e005      	b.n	800308a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ef      	beq.n	800306a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	07ff800f 	.word	0x07ff800f
 80030b0:	ff9f800f 	.word	0xff9f800f
 80030b4:	f9ff800f 	.word	0xf9ff800f

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e049      	b.n	800315e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f841 	bl	8003166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 f9f8 	bl	80034ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d001      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e04f      	b.n	8003234 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a23      	ldr	r2, [pc, #140]	; (8003240 <HAL_TIM_Base_Start_IT+0xc4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d018      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_TIM_Base_Start_IT+0xc8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_TIM_Base_Start_IT+0xcc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <HAL_TIM_Base_Start_IT+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_TIM_Base_Start_IT+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIM_Base_Start_IT+0x76>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_TIM_Base_Start_IT+0xdc>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d015      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0xb4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	d011      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	e008      	b.n	8003230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e000      	b.n	8003232 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40013400 	.word	0x40013400
 8003254:	40014000 	.word	0x40014000
 8003258:	00010007 	.word	0x00010007

0800325c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d122      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d11b      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0202 	mvn.w	r2, #2
 8003288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f905 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8f7 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f908 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d122      	bne.n	800330c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d11b      	bne.n	800330c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0204 	mvn.w	r2, #4
 80032dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8db 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8cd 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8de 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0208 	mvn.w	r2, #8
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8b1 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8a3 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8b4 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b10      	cmp	r3, #16
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b10      	cmp	r3, #16
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0210 	mvn.w	r2, #16
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2208      	movs	r2, #8
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f887 	bl	80034ae <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f879 	bl	800349a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f88a 	bl	80034c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10e      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0201 	mvn.w	r2, #1
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fb18 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d10e      	bne.n	800340c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d107      	bne.n	800340c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f914 	bl	8003634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d10e      	bne.n	800343a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d107      	bne.n	800343a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f907 	bl	8003648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d10e      	bne.n	8003466 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d107      	bne.n	8003466 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f838 	bl	80034d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b20      	cmp	r3, #32
 8003472:	d10e      	bne.n	8003492 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	d107      	bne.n	8003492 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0220 	mvn.w	r2, #32
 800348a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8c7 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a40      	ldr	r2, [pc, #256]	; (8003600 <TIM_Base_SetConfig+0x114>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d00f      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3d      	ldr	r2, [pc, #244]	; (8003604 <TIM_Base_SetConfig+0x118>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00b      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <TIM_Base_SetConfig+0x11c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3b      	ldr	r2, [pc, #236]	; (800360c <TIM_Base_SetConfig+0x120>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3a      	ldr	r2, [pc, #232]	; (8003610 <TIM_Base_SetConfig+0x124>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d108      	bne.n	800353e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <TIM_Base_SetConfig+0x114>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <TIM_Base_SetConfig+0x118>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <TIM_Base_SetConfig+0x11c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <TIM_Base_SetConfig+0x120>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0x124>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a28      	ldr	r2, [pc, #160]	; (8003614 <TIM_Base_SetConfig+0x128>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a27      	ldr	r2, [pc, #156]	; (8003618 <TIM_Base_SetConfig+0x12c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <TIM_Base_SetConfig+0x130>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <TIM_Base_SetConfig+0x114>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00f      	beq.n	80035e4 <TIM_Base_SetConfig+0xf8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <TIM_Base_SetConfig+0x124>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a11      	ldr	r2, [pc, #68]	; (8003614 <TIM_Base_SetConfig+0x128>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <TIM_Base_SetConfig+0xf8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <TIM_Base_SetConfig+0x12c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_Base_SetConfig+0xf8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a0f      	ldr	r2, [pc, #60]	; (800361c <TIM_Base_SetConfig+0x130>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	615a      	str	r2, [r3, #20]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40012c00 	.word	0x40012c00
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40013400 	.word	0x40013400
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e042      	b.n	80036f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd fa03 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2224      	movs	r2, #36	; 0x24
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f82c 	bl	80036fc <UART_SetConfig>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e022      	b.n	80036f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 faf2 	bl	8003ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fb79 	bl	8003de4 <UART_CheckIdleState>
 80036f2:	4603      	mov	r3, r0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4313      	orrs	r3, r2
 8003720:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4bb1      	ldr	r3, [pc, #708]	; (80039f8 <UART_SetConfig+0x2fc>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	69f9      	ldr	r1, [r7, #28]
 800373c:	430b      	orrs	r3, r1
 800373e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4aa6      	ldr	r2, [pc, #664]	; (80039fc <UART_SetConfig+0x300>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	4313      	orrs	r3, r2
 800376e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800377a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	69f9      	ldr	r1, [r7, #28]
 8003784:	430b      	orrs	r3, r1
 8003786:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	f023 010f 	bic.w	r1, r3, #15
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a97      	ldr	r2, [pc, #604]	; (8003a00 <UART_SetConfig+0x304>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d121      	bne.n	80037ec <UART_SetConfig+0xf0>
 80037a8:	4b96      	ldr	r3, [pc, #600]	; (8003a04 <UART_SetConfig+0x308>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d816      	bhi.n	80037e4 <UART_SetConfig+0xe8>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0xc0>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037d3 	.word	0x080037d3
 80037c8:	080037df 	.word	0x080037df
 80037cc:	2301      	movs	r3, #1
 80037ce:	76fb      	strb	r3, [r7, #27]
 80037d0:	e0e8      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80037d2:	2302      	movs	r3, #2
 80037d4:	76fb      	strb	r3, [r7, #27]
 80037d6:	e0e5      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80037d8:	2304      	movs	r3, #4
 80037da:	76fb      	strb	r3, [r7, #27]
 80037dc:	e0e2      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80037de:	2308      	movs	r3, #8
 80037e0:	76fb      	strb	r3, [r7, #27]
 80037e2:	e0df      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80037e4:	2310      	movs	r3, #16
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	bf00      	nop
 80037ea:	e0db      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a85      	ldr	r2, [pc, #532]	; (8003a08 <UART_SetConfig+0x30c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d134      	bne.n	8003860 <UART_SetConfig+0x164>
 80037f6:	4b83      	ldr	r3, [pc, #524]	; (8003a04 <UART_SetConfig+0x308>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d829      	bhi.n	8003858 <UART_SetConfig+0x15c>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0x110>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003841 	.word	0x08003841
 8003810:	08003859 	.word	0x08003859
 8003814:	08003859 	.word	0x08003859
 8003818:	08003859 	.word	0x08003859
 800381c:	0800384d 	.word	0x0800384d
 8003820:	08003859 	.word	0x08003859
 8003824:	08003859 	.word	0x08003859
 8003828:	08003859 	.word	0x08003859
 800382c:	08003847 	.word	0x08003847
 8003830:	08003859 	.word	0x08003859
 8003834:	08003859 	.word	0x08003859
 8003838:	08003859 	.word	0x08003859
 800383c:	08003853 	.word	0x08003853
 8003840:	2300      	movs	r3, #0
 8003842:	76fb      	strb	r3, [r7, #27]
 8003844:	e0ae      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003846:	2302      	movs	r3, #2
 8003848:	76fb      	strb	r3, [r7, #27]
 800384a:	e0ab      	b.n	80039a4 <UART_SetConfig+0x2a8>
 800384c:	2304      	movs	r3, #4
 800384e:	76fb      	strb	r3, [r7, #27]
 8003850:	e0a8      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003852:	2308      	movs	r3, #8
 8003854:	76fb      	strb	r3, [r7, #27]
 8003856:	e0a5      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003858:	2310      	movs	r3, #16
 800385a:	76fb      	strb	r3, [r7, #27]
 800385c:	bf00      	nop
 800385e:	e0a1      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a69      	ldr	r2, [pc, #420]	; (8003a0c <UART_SetConfig+0x310>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d120      	bne.n	80038ac <UART_SetConfig+0x1b0>
 800386a:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <UART_SetConfig+0x308>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003874:	2b10      	cmp	r3, #16
 8003876:	d00f      	beq.n	8003898 <UART_SetConfig+0x19c>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d802      	bhi.n	8003882 <UART_SetConfig+0x186>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <UART_SetConfig+0x190>
 8003880:	e010      	b.n	80038a4 <UART_SetConfig+0x1a8>
 8003882:	2b20      	cmp	r3, #32
 8003884:	d005      	beq.n	8003892 <UART_SetConfig+0x196>
 8003886:	2b30      	cmp	r3, #48	; 0x30
 8003888:	d009      	beq.n	800389e <UART_SetConfig+0x1a2>
 800388a:	e00b      	b.n	80038a4 <UART_SetConfig+0x1a8>
 800388c:	2300      	movs	r3, #0
 800388e:	76fb      	strb	r3, [r7, #27]
 8003890:	e088      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003892:	2302      	movs	r3, #2
 8003894:	76fb      	strb	r3, [r7, #27]
 8003896:	e085      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003898:	2304      	movs	r3, #4
 800389a:	76fb      	strb	r3, [r7, #27]
 800389c:	e082      	b.n	80039a4 <UART_SetConfig+0x2a8>
 800389e:	2308      	movs	r3, #8
 80038a0:	76fb      	strb	r3, [r7, #27]
 80038a2:	e07f      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038a4:	2310      	movs	r3, #16
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	bf00      	nop
 80038aa:	e07b      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <UART_SetConfig+0x314>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d120      	bne.n	80038f8 <UART_SetConfig+0x1fc>
 80038b6:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <UART_SetConfig+0x308>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d00f      	beq.n	80038e4 <UART_SetConfig+0x1e8>
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d802      	bhi.n	80038ce <UART_SetConfig+0x1d2>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <UART_SetConfig+0x1dc>
 80038cc:	e010      	b.n	80038f0 <UART_SetConfig+0x1f4>
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d005      	beq.n	80038de <UART_SetConfig+0x1e2>
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d009      	beq.n	80038ea <UART_SetConfig+0x1ee>
 80038d6:	e00b      	b.n	80038f0 <UART_SetConfig+0x1f4>
 80038d8:	2300      	movs	r3, #0
 80038da:	76fb      	strb	r3, [r7, #27]
 80038dc:	e062      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038de:	2302      	movs	r3, #2
 80038e0:	76fb      	strb	r3, [r7, #27]
 80038e2:	e05f      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038e4:	2304      	movs	r3, #4
 80038e6:	76fb      	strb	r3, [r7, #27]
 80038e8:	e05c      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038ea:	2308      	movs	r3, #8
 80038ec:	76fb      	strb	r3, [r7, #27]
 80038ee:	e059      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038f0:	2310      	movs	r3, #16
 80038f2:	76fb      	strb	r3, [r7, #27]
 80038f4:	bf00      	nop
 80038f6:	e055      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a45      	ldr	r2, [pc, #276]	; (8003a14 <UART_SetConfig+0x318>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d124      	bne.n	800394c <UART_SetConfig+0x250>
 8003902:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <UART_SetConfig+0x308>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d012      	beq.n	8003938 <UART_SetConfig+0x23c>
 8003912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003916:	d802      	bhi.n	800391e <UART_SetConfig+0x222>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <UART_SetConfig+0x230>
 800391c:	e012      	b.n	8003944 <UART_SetConfig+0x248>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d006      	beq.n	8003932 <UART_SetConfig+0x236>
 8003924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003928:	d009      	beq.n	800393e <UART_SetConfig+0x242>
 800392a:	e00b      	b.n	8003944 <UART_SetConfig+0x248>
 800392c:	2300      	movs	r3, #0
 800392e:	76fb      	strb	r3, [r7, #27]
 8003930:	e038      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003932:	2302      	movs	r3, #2
 8003934:	76fb      	strb	r3, [r7, #27]
 8003936:	e035      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003938:	2304      	movs	r3, #4
 800393a:	76fb      	strb	r3, [r7, #27]
 800393c:	e032      	b.n	80039a4 <UART_SetConfig+0x2a8>
 800393e:	2308      	movs	r3, #8
 8003940:	76fb      	strb	r3, [r7, #27]
 8003942:	e02f      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003944:	2310      	movs	r3, #16
 8003946:	76fb      	strb	r3, [r7, #27]
 8003948:	bf00      	nop
 800394a:	e02b      	b.n	80039a4 <UART_SetConfig+0x2a8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <UART_SetConfig+0x300>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d124      	bne.n	80039a0 <UART_SetConfig+0x2a4>
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <UART_SetConfig+0x308>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003964:	d012      	beq.n	800398c <UART_SetConfig+0x290>
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d802      	bhi.n	8003972 <UART_SetConfig+0x276>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <UART_SetConfig+0x284>
 8003970:	e012      	b.n	8003998 <UART_SetConfig+0x29c>
 8003972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003976:	d006      	beq.n	8003986 <UART_SetConfig+0x28a>
 8003978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397c:	d009      	beq.n	8003992 <UART_SetConfig+0x296>
 800397e:	e00b      	b.n	8003998 <UART_SetConfig+0x29c>
 8003980:	2300      	movs	r3, #0
 8003982:	76fb      	strb	r3, [r7, #27]
 8003984:	e00e      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003986:	2302      	movs	r3, #2
 8003988:	76fb      	strb	r3, [r7, #27]
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x2a8>
 800398c:	2304      	movs	r3, #4
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e008      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003992:	2308      	movs	r3, #8
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	e005      	b.n	80039a4 <UART_SetConfig+0x2a8>
 8003998:	2310      	movs	r3, #16
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	bf00      	nop
 800399e:	e001      	b.n	80039a4 <UART_SetConfig+0x2a8>
 80039a0:	2310      	movs	r3, #16
 80039a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <UART_SetConfig+0x300>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	f040 80a1 	bne.w	8003af2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039b0:	7efb      	ldrb	r3, [r7, #27]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d836      	bhi.n	8003a24 <UART_SetConfig+0x328>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x2c0>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	08003a25 	.word	0x08003a25
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	08003a25 	.word	0x08003a25
 80039cc:	080039ef 	.word	0x080039ef
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003a25 	.word	0x08003a25
 80039dc:	08003a1d 	.word	0x08003a1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe fd42 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 80039e4:	6178      	str	r0, [r7, #20]
        break;
 80039e6:	e022      	b.n	8003a2e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <UART_SetConfig+0x31c>)
 80039ea:	617b      	str	r3, [r7, #20]
        break;
 80039ec:	e01f      	b.n	8003a2e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe fca5 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80039f2:	6178      	str	r0, [r7, #20]
        break;
 80039f4:	e01b      	b.n	8003a2e <UART_SetConfig+0x332>
 80039f6:	bf00      	nop
 80039f8:	cfff69f3 	.word	0xcfff69f3
 80039fc:	40008000 	.word	0x40008000
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	40005000 	.word	0x40005000
 8003a18:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a20:	617b      	str	r3, [r7, #20]
        break;
 8003a22:	e004      	b.n	8003a2e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	76bb      	strb	r3, [r7, #26]
        break;
 8003a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 811d 	beq.w	8003c70 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	4a97      	ldr	r2, [pc, #604]	; (8003c98 <UART_SetConfig+0x59c>)
 8003a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a40:	461a      	mov	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a48:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d305      	bcc.n	8003a66 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d902      	bls.n	8003a6c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	76bb      	strb	r3, [r7, #26]
 8003a6a:	e101      	b.n	8003c70 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	4a87      	ldr	r2, [pc, #540]	; (8003c98 <UART_SetConfig+0x59c>)
 8003a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f04f 0400 	mov.w	r4, #0
 8003a84:	461a      	mov	r2, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	f7fc fbba 	bl	8000200 <__aeabi_uldivmod>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	4619      	mov	r1, r3
 8003a92:	4622      	mov	r2, r4
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	0214      	lsls	r4, r2, #8
 8003a9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003aa2:	020b      	lsls	r3, r1, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	eb13 0b01 	adds.w	fp, r3, r1
 8003ab4:	eb44 0c02 	adc.w	ip, r4, r2
 8003ab8:	4658      	mov	r0, fp
 8003aba:	4661      	mov	r1, ip
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f04f 0400 	mov.w	r4, #0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	f7fc fb9a 	bl	8000200 <__aeabi_uldivmod>
 8003acc:	4603      	mov	r3, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad8:	d308      	bcc.n	8003aec <UART_SetConfig+0x3f0>
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae0:	d204      	bcs.n	8003aec <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e0c1      	b.n	8003c70 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	76bb      	strb	r3, [r7, #26]
 8003af0:	e0be      	b.n	8003c70 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afa:	d164      	bne.n	8003bc6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003afc:	7efb      	ldrb	r3, [r7, #27]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d827      	bhi.n	8003b52 <UART_SetConfig+0x456>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0x40c>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b53 	.word	0x08003b53
 8003b18:	08003b43 	.word	0x08003b43
 8003b1c:	08003b53 	.word	0x08003b53
 8003b20:	08003b53 	.word	0x08003b53
 8003b24:	08003b53 	.word	0x08003b53
 8003b28:	08003b4b 	.word	0x08003b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f7fe fc9c 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003b30:	6178      	str	r0, [r7, #20]
        break;
 8003b32:	e013      	b.n	8003b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7fe fcae 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003b38:	6178      	str	r0, [r7, #20]
        break;
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b3c:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <UART_SetConfig+0x5a0>)
 8003b3e:	617b      	str	r3, [r7, #20]
        break;
 8003b40:	e00c      	b.n	8003b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b42:	f7fe fbfb 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003b46:	6178      	str	r0, [r7, #20]
        break;
 8003b48:	e008      	b.n	8003b5c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4e:	617b      	str	r3, [r7, #20]
        break;
 8003b50:	e004      	b.n	8003b5c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	76bb      	strb	r3, [r7, #26]
        break;
 8003b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8086 	beq.w	8003c70 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <UART_SetConfig+0x59c>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b76:	005a      	lsls	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	441a      	add	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d916      	bls.n	8003bc0 <UART_SetConfig+0x4c4>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d212      	bcs.n	8003bc0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f023 030f 	bic.w	r3, r3, #15
 8003ba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	89fa      	ldrh	r2, [r7, #14]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	e057      	b.n	8003c70 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	76bb      	strb	r3, [r7, #26]
 8003bc4:	e054      	b.n	8003c70 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc6:	7efb      	ldrb	r3, [r7, #27]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d828      	bhi.n	8003c1e <UART_SetConfig+0x522>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x4d8>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7fe fc36 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	6178      	str	r0, [r7, #20]
        break;
 8003bfe:	e013      	b.n	8003c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7fe fc48 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003c04:	6178      	str	r0, [r7, #20]
        break;
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <UART_SetConfig+0x5a0>)
 8003c0a:	617b      	str	r3, [r7, #20]
        break;
 8003c0c:	e00c      	b.n	8003c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe fb95 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003c12:	6178      	str	r0, [r7, #20]
        break;
 8003c14:	e008      	b.n	8003c28 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	617b      	str	r3, [r7, #20]
        break;
 8003c1c:	e004      	b.n	8003c28 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	76bb      	strb	r3, [r7, #26]
        break;
 8003c26:	bf00      	nop
    }

    if (pclk != 0U)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d020      	beq.n	8003c70 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <UART_SetConfig+0x59c>)
 8003c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	441a      	add	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d908      	bls.n	8003c6c <UART_SetConfig+0x570>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d204      	bcs.n	8003c6c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e001      	b.n	8003c70 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003c8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003c98:	080072ac 	.word	0x080072ac
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9e:	d10a      	bne.n	8003db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003df4:	f7fd f838 	bl	8000e68 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d10e      	bne.n	8003e26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f82c 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e022      	b.n	8003e6c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d10e      	bne.n	8003e52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f816 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00c      	b.n	8003e6c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e84:	e062      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d05e      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fc ffeb 	bl	8000e68 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d11d      	bne.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eb2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e045      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02e      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efc:	d126      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f16:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e00f      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d08d      	beq.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_UARTEx_DisableFifoMode+0x16>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e027      	b.n	8003fda <HAL_UARTEx_DisableFifoMode+0x66>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2224      	movs	r2, #36	; 0x24
 8003f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003fb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e02d      	b.n	800405a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f850 	bl	80040e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004076:	2302      	movs	r3, #2
 8004078:	e02d      	b.n	80040d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f812 	bl	80040e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80040e8:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <UARTEx_SetNbDataToProcess+0xc8>)
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80040f6:	4a2d      	ldr	r2, [pc, #180]	; (80041ac <UARTEx_SetNbDataToProcess+0xcc>)
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004100:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800411c:	e03d      	b.n	800419a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800411e:	2308      	movs	r3, #8
 8004120:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004122:	2308      	movs	r3, #8
 8004124:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	0e5b      	lsrs	r3, r3, #25
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	0f5b      	lsrs	r3, r3, #29
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004146:	7fbb      	ldrb	r3, [r7, #30]
 8004148:	7f3a      	ldrb	r2, [r7, #28]
 800414a:	f107 0120 	add.w	r1, r7, #32
 800414e:	440a      	add	r2, r1
 8004150:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	7f3a      	ldrb	r2, [r7, #28]
 800415a:	f107 0120 	add.w	r1, r7, #32
 800415e:	440a      	add	r2, r1
 8004160:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004164:	fb93 f3f2 	sdiv	r3, r3, r2
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	7f7a      	ldrb	r2, [r7, #29]
 8004174:	f107 0120 	add.w	r1, r7, #32
 8004178:	440a      	add	r2, r1
 800417a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	7f7a      	ldrb	r2, [r7, #29]
 8004184:	f107 0120 	add.w	r1, r7, #32
 8004188:	440a      	add	r2, r1
 800418a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800418e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800419a:	bf00      	nop
 800419c:	3724      	adds	r7, #36	; 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	080071f4 	.word	0x080071f4
 80041ac:	080071fc 	.word	0x080071fc

080041b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b0:	b084      	sub	sp, #16
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	f107 001c 	add.w	r0, r7, #28
 80041be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d122      	bne.n	800420e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa30 	bl	8004668 <USB_CoreReset>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e01a      	b.n	8004244 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa24 	bl	8004668 <USB_CoreReset>
 8004220:	4603      	mov	r3, r0
 8004222:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
 8004236:	e005      	b.n	8004244 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004250:	b004      	add	sp, #16
 8004252:	4770      	bx	lr

08004254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 0201 	bic.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
 80042a0:	e00b      	b.n	80042ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e001      	b.n	80042ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e003      	b.n	80042c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042ba:	2032      	movs	r0, #50	; 0x32
 80042bc:	f7fc fde0 	bl	8000e80 <HAL_Delay>

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042cc:	b084      	sub	sp, #16
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e009      	b.n	8004300 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3340      	adds	r3, #64	; 0x40
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	2200      	movs	r2, #0
 80042f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3301      	adds	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b0e      	cmp	r3, #14
 8004304:	d9f2      	bls.n	80042ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11c      	bne.n	8004346 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431a:	f043 0302 	orr.w	r3, r3, #2
 800431e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e005      	b.n	8004352 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004364:	4619      	mov	r1, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	461a      	mov	r2, r3
 800436e:	680b      	ldr	r3, [r1, #0]
 8004370:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004372:	2103      	movs	r1, #3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f93d 	bl	80045f4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800437a:	2110      	movs	r1, #16
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8f1 	bl	8004564 <USB_FlushTxFifo>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f90f 	bl	80045b0 <USB_FlushRxFifo>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	461a      	mov	r2, r3
 80043b0:	2300      	movs	r3, #0
 80043b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	461a      	mov	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e043      	b.n	800444e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043dc:	d118      	bne.n	8004410 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e013      	b.n	8004422 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	461a      	mov	r2, r3
 8004408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e008      	b.n	8004422 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	461a      	mov	r2, r3
 8004430:	2300      	movs	r3, #0
 8004432:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	461a      	mov	r2, r3
 8004442:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3301      	adds	r3, #1
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d3b7      	bcc.n	80043c6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e043      	b.n	80044e4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800446e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004472:	d118      	bne.n	80044a6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e013      	b.n	80044b8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	461a      	mov	r2, r3
 800449e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e008      	b.n	80044b8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	461a      	mov	r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	461a      	mov	r2, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	461a      	mov	r2, r3
 80044d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3b7      	bcc.n	800445c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800450c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <USB_DevInit+0x294>)
 8004520:	4313      	orrs	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f043 0208 	orr.w	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d107      	bne.n	800454e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004546:	f043 0304 	orr.w	r3, r3, #4
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800455a:	b004      	add	sp, #16
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	803c3800 	.word	0x803c3800

08004564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	019b      	lsls	r3, r3, #6
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <USB_FlushTxFifo+0x48>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e006      	b.n	800459e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d0f0      	beq.n	800457e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	00030d40 	.word	0x00030d40

080045b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2210      	movs	r2, #16
 80045c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <USB_FlushRxFifo+0x40>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d0f0      	beq.n	80045c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	00030d40 	.word	0x00030d40

080045f4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <USB_CoreReset+0x64>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e01b      	b.n	80046be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	daf2      	bge.n	8004674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <USB_CoreReset+0x64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d0f0      	beq.n	800469e <USB_CoreReset+0x36>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	00030d40 	.word	0x00030d40

080046d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e6:	f3ef 8305 	mrs	r3, IPSR
 80046ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	607b      	str	r3, [r7, #4]
  return(result);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004702:	603b      	str	r3, [r7, #0]
  return(result);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <osKernelInitialize+0x3a>
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <osKernelInitialize+0x64>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004712:	f06f 0305 	mvn.w	r3, #5
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e00c      	b.n	8004734 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <osKernelInitialize+0x64>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <osKernelInitialize+0x64>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e002      	b.n	8004734 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	2000002c 	.word	0x2000002c

08004748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474e:	f3ef 8305 	mrs	r3, IPSR
 8004752:	60bb      	str	r3, [r7, #8]
  return(result);
 8004754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475a:	f3ef 8310 	mrs	r3, PRIMASK
 800475e:	607b      	str	r3, [r7, #4]
  return(result);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	603b      	str	r3, [r7, #0]
  return(result);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <osKernelStart+0x3a>
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <osKernelStart+0x68>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d103      	bne.n	8004782 <osKernelStart+0x3a>
    stat = osErrorISR;
 800477a:	f06f 0305 	mvn.w	r3, #5
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e010      	b.n	80047a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <osKernelStart+0x68>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d109      	bne.n	800479e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800478a:	f7ff ffa1 	bl	80046d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <osKernelStart+0x68>)
 8004790:	2202      	movs	r2, #2
 8004792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004794:	f001 f870 	bl	8005878 <vTaskStartScheduler>
      stat = osOK;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e002      	b.n	80047a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047a4:	68fb      	ldr	r3, [r7, #12]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	2000002c 	.word	0x2000002c

080047b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b090      	sub	sp, #64	; 0x40
 80047b8:	af04      	add	r7, sp, #16
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c4:	f3ef 8305 	mrs	r3, IPSR
 80047c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80047ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 808f 	bne.w	80048f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8310 	mrs	r3, PRIMASK
 80047d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047de:	f3ef 8311 	mrs	r3, BASEPRI
 80047e2:	617b      	str	r3, [r7, #20]
  return(result);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <osThreadNew+0x3e>
 80047ea:	4b44      	ldr	r3, [pc, #272]	; (80048fc <osThreadNew+0x148>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d07e      	beq.n	80048f0 <osThreadNew+0x13c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d07b      	beq.n	80048f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80047fc:	2318      	movs	r3, #24
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295
 8004808:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d045      	beq.n	800489c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <osThreadNew+0x6a>
        name = attr->name;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <osThreadNew+0x90>
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b38      	cmp	r3, #56	; 0x38
 8004836:	d805      	bhi.n	8004844 <osThreadNew+0x90>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <osThreadNew+0x94>
        return (NULL);
 8004844:	2300      	movs	r3, #0
 8004846:	e054      	b.n	80048f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <osThreadNew+0xca>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b5b      	cmp	r3, #91	; 0x5b
 8004866:	d90a      	bls.n	800487e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <osThreadNew+0xca>
        mem = 1;
 8004878:	2301      	movs	r3, #1
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	e010      	b.n	80048a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10c      	bne.n	80048a0 <osThreadNew+0xec>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <osThreadNew+0xec>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <osThreadNew+0xec>
          mem = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	e001      	b.n	80048a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d110      	bne.n	80048c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048ae:	9202      	str	r2, [sp, #8]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fe09 	bl	80054d4 <xTaskCreateStatic>
 80048c2:	4603      	mov	r3, r0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e013      	b.n	80048f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d110      	bne.n	80048f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	f107 0310 	add.w	r3, r7, #16
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 fe51 	bl	8005588 <xTaskCreate>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <osThreadNew+0x13c>
          hTask = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048f0:	693b      	ldr	r3, [r7, #16]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2000002c 	.word	0x2000002c

08004900 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004908:	f3ef 8305 	mrs	r3, IPSR
 800490c:	613b      	str	r3, [r7, #16]
  return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8310 	mrs	r3, PRIMASK
 8004918:	60fb      	str	r3, [r7, #12]
  return(result);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004920:	f3ef 8311 	mrs	r3, BASEPRI
 8004924:	60bb      	str	r3, [r7, #8]
  return(result);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <osDelay+0x3c>
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <osDelay+0x58>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d103      	bne.n	800493c <osDelay+0x3c>
    stat = osErrorISR;
 8004934:	f06f 0305 	mvn.w	r3, #5
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e007      	b.n	800494c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 ff62 	bl	8005810 <vTaskDelay>
    }
  }

  return (stat);
 800494c:	697b      	ldr	r3, [r7, #20]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	2000002c 	.word	0x2000002c

0800495c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <vApplicationGetIdleTaskMemory+0x2c>)
 800496c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a06      	ldr	r2, [pc, #24]	; (800498c <vApplicationGetIdleTaskMemory+0x30>)
 8004972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000030 	.word	0x20000030
 800498c:	2000008c 	.word	0x2000008c

08004990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <vApplicationGetTimerTaskMemory+0x2c>)
 80049a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <vApplicationGetTimerTaskMemory+0x30>)
 80049a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	2000028c 	.word	0x2000028c
 80049c0:	200002e8 	.word	0x200002e8

080049c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f103 0208 	add.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f04f 32ff 	mov.w	r2, #4294967295
 80049dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0208 	add.w	r2, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 0208 	add.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a66:	b480      	push	{r7}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d103      	bne.n	8004a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e00c      	b.n	8004aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e002      	b.n	8004a94 <vListInsert+0x2e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d2f6      	bcs.n	8004a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
 8004aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6852      	ldr	r2, [r2, #4]
 8004af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d103      	bne.n	8004b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b54:	f002 f812 	bl	8006b7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	68f9      	ldr	r1, [r7, #12]
 8004b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	3b01      	subs	r3, #1
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	441a      	add	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	22ff      	movs	r2, #255	; 0xff
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d114      	bne.n	8004bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01a      	beq.n	8004be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3310      	adds	r3, #16
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 f8de 	bl	8005d78 <xTaskRemoveFromEventList>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d012      	beq.n	8004be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <xQueueGenericReset+0xcc>)
 8004bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	e009      	b.n	8004be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fef3 	bl	80049c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3324      	adds	r3, #36	; 0x24
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff feee 	bl	80049c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004be8:	f001 fff6 	bl	8006bd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bec:	2301      	movs	r3, #1
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <xQueueGenericCreateStatic+0x28>
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	e7fe      	b.n	8004c22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <xQueueGenericCreateStatic+0x42>
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	e7fe      	b.n	8004c3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <xQueueGenericCreateStatic+0x4e>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <xQueueGenericCreateStatic+0x52>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <xQueueGenericCreateStatic+0x54>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <xQueueGenericCreateStatic+0x6c>
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	e7fe      	b.n	8004c66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <xQueueGenericCreateStatic+0x78>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <xQueueGenericCreateStatic+0x7c>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <xQueueGenericCreateStatic+0x7e>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <xQueueGenericCreateStatic+0x96>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	e7fe      	b.n	8004c90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c92:	2350      	movs	r3, #80	; 0x50
 8004c94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b50      	cmp	r3, #80	; 0x50
 8004c9a:	d009      	beq.n	8004cb0 <xQueueGenericCreateStatic+0xb4>
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e7fe      	b.n	8004cae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cc4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f805 	bl	8004ce2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3730      	adds	r7, #48	; 0x30
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e002      	b.n	8004d04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d10:	2101      	movs	r1, #1
 8004d12:	69b8      	ldr	r0, [r7, #24]
 8004d14:	f7ff ff0a 	bl	8004b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08e      	sub	sp, #56	; 0x38
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <xQueueGenericSend+0x30>
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d56:	e7fe      	b.n	8004d56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <xQueueGenericSend+0x3e>
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <xQueueGenericSend+0x42>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <xQueueGenericSend+0x44>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <xQueueGenericSend+0x5c>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
 8004d82:	e7fe      	b.n	8004d82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d103      	bne.n	8004d92 <xQueueGenericSend+0x6a>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <xQueueGenericSend+0x6e>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <xQueueGenericSend+0x70>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <xQueueGenericSend+0x88>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	623b      	str	r3, [r7, #32]
 8004dae:	e7fe      	b.n	8004dae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004db0:	f001 f998 	bl	80060e4 <xTaskGetSchedulerState>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <xQueueGenericSend+0x98>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xQueueGenericSend+0x9c>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueGenericSend+0x9e>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <xQueueGenericSend+0xb6>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dde:	f001 fecd 	bl	8006b7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <xQueueGenericSend+0xcc>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d129      	bne.n	8004e48 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfa:	f000 f9ff 	bl	80051fc <prvCopyDataToQueue>
 8004dfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	3324      	adds	r3, #36	; 0x24
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 ffb3 	bl	8005d78 <xTaskRemoveFromEventList>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e18:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <xQueueGenericSend+0x1f0>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	e00a      	b.n	8004e40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e30:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <xQueueGenericSend+0x1f0>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e40:	f001 feca 	bl	8006bd8 <vPortExitCritical>
				return pdPASS;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e063      	b.n	8004f10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e4e:	f001 fec3 	bl	8006bd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e05c      	b.n	8004f10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e5c:	f107 0314 	add.w	r3, r7, #20
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 ffeb 	bl	8005e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e6a:	f001 feb5 	bl	8006bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e6e:	f000 fd67 	bl	8005940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e72:	f001 fe83 	bl	8006b7c <vPortEnterCritical>
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	d103      	bne.n	8004e8c <xQueueGenericSend+0x164>
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e92:	b25b      	sxtb	r3, r3
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d103      	bne.n	8004ea2 <xQueueGenericSend+0x17a>
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea2:	f001 fe99 	bl	8006bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea6:	1d3a      	adds	r2, r7, #4
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	4611      	mov	r1, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 ffda 	bl	8005e68 <xTaskCheckForTimeOut>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d124      	bne.n	8004f04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ebc:	f000 fa96 	bl	80053ec <prvIsQueueFull>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	3310      	adds	r3, #16
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4611      	mov	r1, r2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 ff04 	bl	8005cdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed6:	f000 fa21 	bl	800531c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eda:	f000 fd3f 	bl	800595c <xTaskResumeAll>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f af7c 	bne.w	8004dde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <xQueueGenericSend+0x1f0>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	e772      	b.n	8004dde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004efa:	f000 fa0f 	bl	800531c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004efe:	f000 fd2d 	bl	800595c <xTaskResumeAll>
 8004f02:	e76c      	b.n	8004dde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f06:	f000 fa09 	bl	800531c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f0a:	f000 fd27 	bl	800595c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3738      	adds	r7, #56	; 0x38
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	; 0x38
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <xQueueGenericSendFromISR+0x2c>
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	e7fe      	b.n	8004f46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <xQueueGenericSendFromISR+0x3a>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <xQueueGenericSendFromISR+0x3e>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <xQueueGenericSendFromISR+0x40>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <xQueueGenericSendFromISR+0x58>
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	e7fe      	b.n	8004f72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d103      	bne.n	8004f82 <xQueueGenericSendFromISR+0x66>
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <xQueueGenericSendFromISR+0x6a>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <xQueueGenericSendFromISR+0x6c>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <xQueueGenericSendFromISR+0x84>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e7fe      	b.n	8004f9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fa0:	f001 fec8 	bl	8006d34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fa4:	f3ef 8211 	mrs	r2, BASEPRI
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61ba      	str	r2, [r7, #24]
 8004fba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <xQueueGenericSendFromISR+0xb6>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d12c      	bne.n	800502c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fe2:	f000 f90b 	bl	80051fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fe6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d112      	bne.n	8005016 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d016      	beq.n	8005026 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	3324      	adds	r3, #36	; 0x24
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 febb 	bl	8005d78 <xTaskRemoveFromEventList>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00e      	beq.n	8005026 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e007      	b.n	8005026 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800501a:	3301      	adds	r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	b25a      	sxtb	r2, r3
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005026:	2301      	movs	r3, #1
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800502a:	e001      	b.n	8005030 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800503c:	4618      	mov	r0, r3
 800503e:	3738      	adds	r7, #56	; 0x38
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	; 0x30
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005050:	2300      	movs	r3, #0
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <xQueueReceive+0x2e>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	e7fe      	b.n	8005070 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d103      	bne.n	8005080 <xQueueReceive+0x3c>
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <xQueueReceive+0x40>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <xQueueReceive+0x42>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <xQueueReceive+0x5a>
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	e7fe      	b.n	800509c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800509e:	f001 f821 	bl	80060e4 <xTaskGetSchedulerState>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <xQueueReceive+0x6a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <xQueueReceive+0x6e>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <xQueueReceive+0x70>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <xQueueReceive+0x88>
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e7fe      	b.n	80050ca <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050cc:	f001 fd56 	bl	8006b7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01f      	beq.n	800511c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e0:	f000 f8f6 	bl	80052d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	1e5a      	subs	r2, r3, #1
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00f      	beq.n	8005114 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	3310      	adds	r3, #16
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fe3d 	bl	8005d78 <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005104:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <xQueueReceive+0x1b4>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005114:	f001 fd60 	bl	8006bd8 <vPortExitCritical>
				return pdPASS;
 8005118:	2301      	movs	r3, #1
 800511a:	e069      	b.n	80051f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005122:	f001 fd59 	bl	8006bd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005126:	2300      	movs	r3, #0
 8005128:	e062      	b.n	80051f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fe81 	bl	8005e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800513a:	2301      	movs	r3, #1
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800513e:	f001 fd4b 	bl	8006bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005142:	f000 fbfd 	bl	8005940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005146:	f001 fd19 	bl	8006b7c <vPortEnterCritical>
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005150:	b25b      	sxtb	r3, r3
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d103      	bne.n	8005160 <xQueueReceive+0x11c>
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005166:	b25b      	sxtb	r3, r3
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d103      	bne.n	8005176 <xQueueReceive+0x132>
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005176:	f001 fd2f 	bl	8006bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800517a:	1d3a      	adds	r2, r7, #4
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fe70 	bl	8005e68 <xTaskCheckForTimeOut>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d123      	bne.n	80051d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800518e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005190:	f000 f916 	bl	80053c0 <prvIsQueueEmpty>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d017      	beq.n	80051ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	3324      	adds	r3, #36	; 0x24
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fd9a 	bl	8005cdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051aa:	f000 f8b7 	bl	800531c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051ae:	f000 fbd5 	bl	800595c <xTaskResumeAll>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d189      	bne.n	80050cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <xQueueReceive+0x1b4>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	e780      	b.n	80050cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051cc:	f000 f8a6 	bl	800531c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051d0:	f000 fbc4 	bl	800595c <xTaskResumeAll>
 80051d4:	e77a      	b.n	80050cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d8:	f000 f8a0 	bl	800531c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051dc:	f000 fbbe 	bl	800595c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e2:	f000 f8ed 	bl	80053c0 <prvIsQueueEmpty>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f43f af6f 	beq.w	80050cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3730      	adds	r7, #48	; 0x30
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d14d      	bne.n	80052be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 ff7a 	bl	8006120 <xTaskPriorityDisinherit>
 800522c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	e043      	b.n	80052be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d119      	bne.n	8005270 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6858      	ldr	r0, [r3, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	461a      	mov	r2, r3
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	f001 ffac 	bl	80071a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d32b      	bcc.n	80052be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	e026      	b.n	80052be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68d8      	ldr	r0, [r3, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	461a      	mov	r2, r3
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	f001 ff92 	bl	80071a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	425b      	negs	r3, r3
 800528a:	441a      	add	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d207      	bcs.n	80052ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	425b      	negs	r3, r3
 80052a6:	441a      	add	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d105      	bne.n	80052be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052c6:	697b      	ldr	r3, [r7, #20]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d018      	beq.n	8005314 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d303      	bcc.n	8005304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68d9      	ldr	r1, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	461a      	mov	r2, r3
 800530e:	6838      	ldr	r0, [r7, #0]
 8005310:	f001 ff48 	bl	80071a4 <memcpy>
	}
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005324:	f001 fc2a 	bl	8006b7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800532e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005330:	e011      	b.n	8005356 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d012      	beq.n	8005360 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fd1a 	bl	8005d78 <xTaskRemoveFromEventList>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800534a:	f000 fded 	bl	8005f28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	3b01      	subs	r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	dce9      	bgt.n	8005332 <prvUnlockQueue+0x16>
 800535e:	e000      	b.n	8005362 <prvUnlockQueue+0x46>
					break;
 8005360:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	22ff      	movs	r2, #255	; 0xff
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800536a:	f001 fc35 	bl	8006bd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800536e:	f001 fc05 	bl	8006b7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005378:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800537a:	e011      	b.n	80053a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d012      	beq.n	80053aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3310      	adds	r3, #16
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fcf5 	bl	8005d78 <xTaskRemoveFromEventList>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005394:	f000 fdc8 	bl	8005f28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	3b01      	subs	r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dce9      	bgt.n	800537c <prvUnlockQueue+0x60>
 80053a8:	e000      	b.n	80053ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	22ff      	movs	r2, #255	; 0xff
 80053b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053b4:	f001 fc10 	bl	8006bd8 <vPortExitCritical>
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053c8:	f001 fbd8 	bl	8006b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053d4:	2301      	movs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e001      	b.n	80053de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053de:	f001 fbfb 	bl	8006bd8 <vPortExitCritical>

	return xReturn;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053f4:	f001 fbc2 	bl	8006b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	429a      	cmp	r2, r3
 8005402:	d102      	bne.n	800540a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e001      	b.n	800540e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f001 fbe3 	bl	8006bd8 <vPortExitCritical>

	return xReturn;
 8005412:	68fb      	ldr	r3, [r7, #12]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e014      	b.n	8005456 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800542c:	4a0e      	ldr	r2, [pc, #56]	; (8005468 <vQueueAddToRegistry+0x4c>)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10b      	bne.n	8005450 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005438:	490b      	ldr	r1, [pc, #44]	; (8005468 <vQueueAddToRegistry+0x4c>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <vQueueAddToRegistry+0x4c>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800544e:	e005      	b.n	800545c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b07      	cmp	r3, #7
 800545a:	d9e7      	bls.n	800542c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20001ef0 	.word	0x20001ef0

0800546c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800547c:	f001 fb7e 	bl	8006b7c <vPortEnterCritical>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005486:	b25b      	sxtb	r3, r3
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d103      	bne.n	8005496 <vQueueWaitForMessageRestricted+0x2a>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549c:	b25b      	sxtb	r3, r3
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d103      	bne.n	80054ac <vQueueWaitForMessageRestricted+0x40>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ac:	f001 fb94 	bl	8006bd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fc2f 	bl	8005d24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f7ff ff28 	bl	800531c <prvUnlockQueue>
	}
 80054cc:	bf00      	nop
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	; 0x38
 80054d8:	af04      	add	r7, sp, #16
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <xTaskCreateStatic+0x28>
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	e7fe      	b.n	80054fa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <xTaskCreateStatic+0x42>
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e7fe      	b.n	8005514 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005516:	235c      	movs	r3, #92	; 0x5c
 8005518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b5c      	cmp	r3, #92	; 0x5c
 800551e:	d009      	beq.n	8005534 <xTaskCreateStatic+0x60>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e7fe      	b.n	8005532 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005534:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01e      	beq.n	800557a <xTaskCreateStatic+0xa6>
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01b      	beq.n	800557a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005554:	2300      	movs	r3, #0
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f850 	bl	8005612 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005574:	f000 f8dc 	bl	8005730 <prvAddNewTaskToReadyList>
 8005578:	e001      	b.n	800557e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800557e:	697b      	ldr	r3, [r7, #20]
	}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	; 0x30
 800558c:	af04      	add	r7, sp, #16
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f001 fc07 	bl	8006db0 <pvPortMalloc>
 80055a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00e      	beq.n	80055c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055aa:	205c      	movs	r0, #92	; 0x5c
 80055ac:	f001 fc00 	bl	8006db0 <pvPortMalloc>
 80055b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
 80055be:	e005      	b.n	80055cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055c0:	6978      	ldr	r0, [r7, #20]
 80055c2:	f001 fcb7 	bl	8006f34 <vPortFree>
 80055c6:	e001      	b.n	80055cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d017      	beq.n	8005602 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	2300      	movs	r3, #0
 80055de:	9303      	str	r3, [sp, #12]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	9302      	str	r3, [sp, #8]
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f80e 	bl	8005612 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055f6:	69f8      	ldr	r0, [r7, #28]
 80055f8:	f000 f89a 	bl	8005730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055fc:	2301      	movs	r3, #1
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e002      	b.n	8005608 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005608:	69bb      	ldr	r3, [r7, #24]
	}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b088      	sub	sp, #32
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	461a      	mov	r2, r3
 800562a:	21a5      	movs	r1, #165	; 0xa5
 800562c:	f001 fdc5 	bl	80071ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800563a:	3b01      	subs	r3, #1
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f023 0307 	bic.w	r3, r3, #7
 8005648:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	2b00      	cmp	r3, #0
 8005652:	d009      	beq.n	8005668 <prvInitialiseNewTask+0x56>
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e7fe      	b.n	8005666 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01f      	beq.n	80056ae <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	e012      	b.n	800569a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	7819      	ldrb	r1, [r3, #0]
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	3334      	adds	r3, #52	; 0x34
 8005684:	460a      	mov	r2, r1
 8005686:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b0f      	cmp	r3, #15
 800569e:	d9e9      	bls.n	8005674 <prvInitialiseNewTask+0x62>
 80056a0:	e000      	b.n	80056a4 <prvInitialiseNewTask+0x92>
			{
				break;
 80056a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ac:	e003      	b.n	80056b6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	2b37      	cmp	r3, #55	; 0x37
 80056ba:	d901      	bls.n	80056c0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056bc:	2337      	movs	r3, #55	; 0x37
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	2200      	movs	r2, #0
 80056d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff f994 	bl	8004a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	3318      	adds	r3, #24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff f98f 	bl	8004a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	69b8      	ldr	r0, [r7, #24]
 8005710:	f001 f90c 	bl	800692c <pxPortInitialiseStack>
 8005714:	4602      	mov	r2, r0
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005726:	bf00      	nop
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005738:	f001 fa20 	bl	8006b7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800573c:	4b2d      	ldr	r3, [pc, #180]	; (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 8005744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005746:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800574e:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d110      	bne.n	800577e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800575c:	f000 fc08 	bl	8005f70 <prvInitialiseTaskLists>
 8005760:	e00d      	b.n	800577e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <prvAddNewTaskToReadyList+0xcc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	429a      	cmp	r2, r3
 8005776:	d802      	bhi.n	800577e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800577e:	4b20      	ldr	r3, [pc, #128]	; (8005800 <prvAddNewTaskToReadyList+0xd0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <prvAddNewTaskToReadyList+0xd0>)
 8005786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <prvAddNewTaskToReadyList+0xd0>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <prvAddNewTaskToReadyList+0xd4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d903      	bls.n	80057a4 <prvAddNewTaskToReadyList+0x74>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <prvAddNewTaskToReadyList+0xd4>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <prvAddNewTaskToReadyList+0xd8>)
 80057b2:	441a      	add	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7ff f92f 	bl	8004a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057c0:	f001 fa0a 	bl	8006bd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <prvAddNewTaskToReadyList+0xcc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00e      	beq.n	80057ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d207      	bcs.n	80057ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <prvAddNewTaskToReadyList+0xdc>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000bbc 	.word	0x20000bbc
 80057f8:	200006e8 	.word	0x200006e8
 80057fc:	20000bc8 	.word	0x20000bc8
 8005800:	20000bd8 	.word	0x20000bd8
 8005804:	20000bc4 	.word	0x20000bc4
 8005808:	200006ec 	.word	0x200006ec
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <vTaskDelay+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <vTaskDelay+0x2e>
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	e7fe      	b.n	800583c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800583e:	f000 f87f 	bl	8005940 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005842:	2100      	movs	r1, #0
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fcd7 	bl	80061f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800584a:	f000 f887 	bl	800595c <xTaskResumeAll>
 800584e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <vTaskDelay+0x64>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000be4 	.word	0x20000be4
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	; 0x28
 800587c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005886:	463a      	mov	r2, r7
 8005888:	1d39      	adds	r1, r7, #4
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff f864 	bl	800495c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	9202      	str	r2, [sp, #8]
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	2300      	movs	r3, #0
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	2300      	movs	r3, #0
 80058a4:	460a      	mov	r2, r1
 80058a6:	4920      	ldr	r1, [pc, #128]	; (8005928 <vTaskStartScheduler+0xb0>)
 80058a8:	4820      	ldr	r0, [pc, #128]	; (800592c <vTaskStartScheduler+0xb4>)
 80058aa:	f7ff fe13 	bl	80054d4 <xTaskCreateStatic>
 80058ae:	4602      	mov	r2, r0
 80058b0:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <vTaskStartScheduler+0xb8>)
 80058b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058b4:	4b1e      	ldr	r3, [pc, #120]	; (8005930 <vTaskStartScheduler+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e001      	b.n	80058c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058cc:	f000 fce8 	bl	80062a0 <xTimerCreateTimerTask>
 80058d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d115      	bne.n	8005904 <vTaskStartScheduler+0x8c>
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <vTaskStartScheduler+0xbc>)
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <vTaskStartScheduler+0xc0>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <vTaskStartScheduler+0xc4>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058fe:	f001 f89f 	bl	8006a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005902:	e00d      	b.n	8005920 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d109      	bne.n	8005920 <vTaskStartScheduler+0xa8>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e7fe      	b.n	800591e <vTaskStartScheduler+0xa6>
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08007204 	.word	0x08007204
 800592c:	08005f41 	.word	0x08005f41
 8005930:	20000be0 	.word	0x20000be0
 8005934:	20000bdc 	.word	0x20000bdc
 8005938:	20000bc8 	.word	0x20000bc8
 800593c:	20000bc0 	.word	0x20000bc0

08005940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <vTaskSuspendAll+0x18>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	4a03      	ldr	r2, [pc, #12]	; (8005958 <vTaskSuspendAll+0x18>)
 800594c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	20000be4 	.word	0x20000be4

0800595c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800596a:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <xTaskResumeAll+0x114>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <xTaskResumeAll+0x2a>
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	e7fe      	b.n	8005984 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005986:	f001 f8f9 	bl	8006b7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <xTaskResumeAll+0x114>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	4a37      	ldr	r2, [pc, #220]	; (8005a70 <xTaskResumeAll+0x114>)
 8005992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005994:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <xTaskResumeAll+0x114>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d162      	bne.n	8005a62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800599c:	4b35      	ldr	r3, [pc, #212]	; (8005a74 <xTaskResumeAll+0x118>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05e      	beq.n	8005a62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a4:	e02f      	b.n	8005a06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a6:	4b34      	ldr	r3, [pc, #208]	; (8005a78 <xTaskResumeAll+0x11c>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3318      	adds	r3, #24
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff f890 	bl	8004ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff f88b 	bl	8004ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <xTaskResumeAll+0x120>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d903      	bls.n	80059d6 <xTaskResumeAll+0x7a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <xTaskResumeAll+0x120>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <xTaskResumeAll+0x124>)
 80059e4:	441a      	add	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7ff f816 	bl	8004a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <xTaskResumeAll+0x128>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <xTaskResumeAll+0x12c>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <xTaskResumeAll+0x11c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1cb      	bne.n	80059a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a14:	f000 fb46 	bl	80060a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <xTaskResumeAll+0x130>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d010      	beq.n	8005a46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a24:	f000 f846 	bl	8005ab4 <xTaskIncrementTick>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a2e:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <xTaskResumeAll+0x12c>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f1      	bne.n	8005a24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005a40:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <xTaskResumeAll+0x130>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <xTaskResumeAll+0x12c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <xTaskResumeAll+0x134>)
 8005a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a62:	f001 f8b9 	bl	8006bd8 <vPortExitCritical>

	return xAlreadyYielded;
 8005a66:	68bb      	ldr	r3, [r7, #8]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000be4 	.word	0x20000be4
 8005a74:	20000bbc 	.word	0x20000bbc
 8005a78:	20000b7c 	.word	0x20000b7c
 8005a7c:	20000bc4 	.word	0x20000bc4
 8005a80:	200006ec 	.word	0x200006ec
 8005a84:	200006e8 	.word	0x200006e8
 8005a88:	20000bd0 	.word	0x20000bd0
 8005a8c:	20000bcc 	.word	0x20000bcc
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a9a:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <xTaskGetTickCount+0x1c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005aa0:	687b      	ldr	r3, [r7, #4]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000bc0 	.word	0x20000bc0

08005ab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005abe:	4b4e      	ldr	r3, [pc, #312]	; (8005bf8 <xTaskIncrementTick+0x144>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 8088 	bne.w	8005bd8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ac8:	4b4c      	ldr	r3, [pc, #304]	; (8005bfc <xTaskIncrementTick+0x148>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ad0:	4a4a      	ldr	r2, [pc, #296]	; (8005bfc <xTaskIncrementTick+0x148>)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11f      	bne.n	8005b1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005adc:	4b48      	ldr	r3, [pc, #288]	; (8005c00 <xTaskIncrementTick+0x14c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <xTaskIncrementTick+0x46>
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	e7fe      	b.n	8005af8 <xTaskIncrementTick+0x44>
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <xTaskIncrementTick+0x14c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	4b40      	ldr	r3, [pc, #256]	; (8005c04 <xTaskIncrementTick+0x150>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3e      	ldr	r2, [pc, #248]	; (8005c00 <xTaskIncrementTick+0x14c>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	4a3e      	ldr	r2, [pc, #248]	; (8005c04 <xTaskIncrementTick+0x150>)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b3e      	ldr	r3, [pc, #248]	; (8005c08 <xTaskIncrementTick+0x154>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a3c      	ldr	r2, [pc, #240]	; (8005c08 <xTaskIncrementTick+0x154>)
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	f000 fac4 	bl	80060a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b1c:	4b3b      	ldr	r3, [pc, #236]	; (8005c0c <xTaskIncrementTick+0x158>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d349      	bcc.n	8005bba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <xTaskIncrementTick+0x14c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b30:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <xTaskIncrementTick+0x158>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	601a      	str	r2, [r3, #0]
					break;
 8005b38:	e03f      	b.n	8005bba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <xTaskIncrementTick+0x14c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d203      	bcs.n	8005b5a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b52:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <xTaskIncrementTick+0x158>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b58:	e02f      	b.n	8005bba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe ffba 	bl	8004ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3318      	adds	r3, #24
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe ffb1 	bl	8004ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	4b25      	ldr	r3, [pc, #148]	; (8005c10 <xTaskIncrementTick+0x15c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d903      	bls.n	8005b8a <xTaskIncrementTick+0xd6>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <xTaskIncrementTick+0x15c>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <xTaskIncrementTick+0x160>)
 8005b98:	441a      	add	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7fe ff3c 	bl	8004a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <xTaskIncrementTick+0x164>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3b8      	bcc.n	8005b26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb8:	e7b5      	b.n	8005b26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bba:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <xTaskIncrementTick+0x164>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4914      	ldr	r1, [pc, #80]	; (8005c14 <xTaskIncrementTick+0x160>)
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d907      	bls.n	8005be2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e004      	b.n	8005be2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <xTaskIncrementTick+0x168>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <xTaskIncrementTick+0x168>)
 8005be0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <xTaskIncrementTick+0x16c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bee:	697b      	ldr	r3, [r7, #20]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000be4 	.word	0x20000be4
 8005bfc:	20000bc0 	.word	0x20000bc0
 8005c00:	20000b74 	.word	0x20000b74
 8005c04:	20000b78 	.word	0x20000b78
 8005c08:	20000bd4 	.word	0x20000bd4
 8005c0c:	20000bdc 	.word	0x20000bdc
 8005c10:	20000bc4 	.word	0x20000bc4
 8005c14:	200006ec 	.word	0x200006ec
 8005c18:	200006e8 	.word	0x200006e8
 8005c1c:	20000bcc 	.word	0x20000bcc
 8005c20:	20000bd0 	.word	0x20000bd0

08005c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <vTaskSwitchContext+0xa4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c32:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <vTaskSwitchContext+0xa8>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c38:	e040      	b.n	8005cbc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <vTaskSwitchContext+0xa8>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c40:	4b23      	ldr	r3, [pc, #140]	; (8005cd0 <vTaskSwitchContext+0xac>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e00f      	b.n	8005c68 <vTaskSwitchContext+0x44>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <vTaskSwitchContext+0x3e>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e7fe      	b.n	8005c60 <vTaskSwitchContext+0x3c>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	491a      	ldr	r1, [pc, #104]	; (8005cd4 <vTaskSwitchContext+0xb0>)
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0e5      	beq.n	8005c48 <vTaskSwitchContext+0x24>
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <vTaskSwitchContext+0xb0>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d104      	bne.n	8005cac <vTaskSwitchContext+0x88>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	605a      	str	r2, [r3, #4]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <vTaskSwitchContext+0xb4>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <vTaskSwitchContext+0xac>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6013      	str	r3, [r2, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	20000be4 	.word	0x20000be4
 8005ccc:	20000bd0 	.word	0x20000bd0
 8005cd0:	20000bc4 	.word	0x20000bc4
 8005cd4:	200006ec 	.word	0x200006ec
 8005cd8:	200006e8 	.word	0x200006e8

08005cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d109      	bne.n	8005d00 <vTaskPlaceOnEventList+0x24>
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e7fe      	b.n	8005cfe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <vTaskPlaceOnEventList+0x44>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3318      	adds	r3, #24
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fe feac 	bl	8004a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d0e:	2101      	movs	r1, #1
 8005d10:	6838      	ldr	r0, [r7, #0]
 8005d12:	f000 fa71 	bl	80061f8 <prvAddCurrentTaskToDelayedList>
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200006e8 	.word	0x200006e8

08005d24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <vTaskPlaceOnEventListRestricted+0x26>
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e7fe      	b.n	8005d48 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <vTaskPlaceOnEventListRestricted+0x50>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4619      	mov	r1, r3
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7fe fe63 	bl	8004a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	f000 fa46 	bl	80061f8 <prvAddCurrentTaskToDelayedList>
	}
 8005d6c:	bf00      	nop
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200006e8 	.word	0x200006e8

08005d78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <xTaskRemoveFromEventList+0x2a>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e7fe      	b.n	8005da0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	3318      	adds	r3, #24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fe96 	bl	8004ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dac:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <xTaskRemoveFromEventList+0xac>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11d      	bne.n	8005df0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fe8d 	bl	8004ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <xTaskRemoveFromEventList+0xb0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d903      	bls.n	8005dd2 <xTaskRemoveFromEventList+0x5a>
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	4a16      	ldr	r2, [pc, #88]	; (8005e28 <xTaskRemoveFromEventList+0xb0>)
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <xTaskRemoveFromEventList+0xb4>)
 8005de0:	441a      	add	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fe fe18 	bl	8004a1e <vListInsertEnd>
 8005dee:	e005      	b.n	8005dfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	3318      	adds	r3, #24
 8005df4:	4619      	mov	r1, r3
 8005df6:	480e      	ldr	r0, [pc, #56]	; (8005e30 <xTaskRemoveFromEventList+0xb8>)
 8005df8:	f7fe fe11 	bl	8004a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <xTaskRemoveFromEventList+0xbc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d905      	bls.n	8005e16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <xTaskRemoveFromEventList+0xc0>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e001      	b.n	8005e1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000be4 	.word	0x20000be4
 8005e28:	20000bc4 	.word	0x20000bc4
 8005e2c:	200006ec 	.word	0x200006ec
 8005e30:	20000b7c 	.word	0x20000b7c
 8005e34:	200006e8 	.word	0x200006e8
 8005e38:	20000bd0 	.word	0x20000bd0

08005e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <vTaskInternalSetTimeOutState+0x24>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <vTaskInternalSetTimeOutState+0x28>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	605a      	str	r2, [r3, #4]
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000bd4 	.word	0x20000bd4
 8005e64:	20000bc0 	.word	0x20000bc0

08005e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <xTaskCheckForTimeOut+0x24>
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	e7fe      	b.n	8005e8a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <xTaskCheckForTimeOut+0x3e>
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005ea6:	f000 fe69 	bl	8006b7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <xTaskCheckForTimeOut+0xb8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d102      	bne.n	8005eca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e023      	b.n	8005f12 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <xTaskCheckForTimeOut+0xbc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d007      	beq.n	8005ee6 <xTaskCheckForTimeOut+0x7e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e015      	b.n	8005f12 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d20b      	bcs.n	8005f08 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ff9d 	bl	8005e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	e004      	b.n	8005f12 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f000 fe61 	bl	8006bd8 <vPortExitCritical>

	return xReturn;
 8005f16:	69fb      	ldr	r3, [r7, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000bc0 	.word	0x20000bc0
 8005f24:	20000bd4 	.word	0x20000bd4

08005f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <vTaskMissedYield+0x14>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000bd0 	.word	0x20000bd0

08005f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f48:	f000 f852 	bl	8005ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <prvIdleTask+0x28>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d9f9      	bls.n	8005f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <prvIdleTask+0x2c>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f64:	e7f0      	b.n	8005f48 <prvIdleTask+0x8>
 8005f66:	bf00      	nop
 8005f68:	200006ec 	.word	0x200006ec
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e00c      	b.n	8005f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <prvInitialiseTaskLists+0x60>)
 8005f88:	4413      	add	r3, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fd1a 	bl	80049c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3301      	adds	r3, #1
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b37      	cmp	r3, #55	; 0x37
 8005f9a:	d9ef      	bls.n	8005f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f9c:	480d      	ldr	r0, [pc, #52]	; (8005fd4 <prvInitialiseTaskLists+0x64>)
 8005f9e:	f7fe fd11 	bl	80049c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fa2:	480d      	ldr	r0, [pc, #52]	; (8005fd8 <prvInitialiseTaskLists+0x68>)
 8005fa4:	f7fe fd0e 	bl	80049c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fa8:	480c      	ldr	r0, [pc, #48]	; (8005fdc <prvInitialiseTaskLists+0x6c>)
 8005faa:	f7fe fd0b 	bl	80049c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fae:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <prvInitialiseTaskLists+0x70>)
 8005fb0:	f7fe fd08 	bl	80049c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fb4:	480b      	ldr	r0, [pc, #44]	; (8005fe4 <prvInitialiseTaskLists+0x74>)
 8005fb6:	f7fe fd05 	bl	80049c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <prvInitialiseTaskLists+0x78>)
 8005fbc:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <prvInitialiseTaskLists+0x64>)
 8005fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <prvInitialiseTaskLists+0x7c>)
 8005fc2:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <prvInitialiseTaskLists+0x68>)
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200006ec 	.word	0x200006ec
 8005fd4:	20000b4c 	.word	0x20000b4c
 8005fd8:	20000b60 	.word	0x20000b60
 8005fdc:	20000b7c 	.word	0x20000b7c
 8005fe0:	20000b90 	.word	0x20000b90
 8005fe4:	20000ba8 	.word	0x20000ba8
 8005fe8:	20000b74 	.word	0x20000b74
 8005fec:	20000b78 	.word	0x20000b78

08005ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff6:	e019      	b.n	800602c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ff8:	f000 fdc0 	bl	8006b7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <prvCheckTasksWaitingTermination+0x4c>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe fd65 	bl	8004ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <prvCheckTasksWaitingTermination+0x50>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3b01      	subs	r3, #1
 8006014:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <prvCheckTasksWaitingTermination+0x50>)
 8006016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 8006020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006022:	f000 fdd9 	bl	8006bd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f80e 	bl	8006048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <prvCheckTasksWaitingTermination+0x54>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e1      	bne.n	8005ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000b90 	.word	0x20000b90
 8006040:	20000bbc 	.word	0x20000bbc
 8006044:	20000ba4 	.word	0x20000ba4

08006048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	4618      	mov	r0, r3
 8006060:	f000 ff68 	bl	8006f34 <vPortFree>
				vPortFree( pxTCB );
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 ff65 	bl	8006f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800606a:	e017      	b.n	800609c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006072:	2b01      	cmp	r3, #1
 8006074:	d103      	bne.n	800607e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 ff5c 	bl	8006f34 <vPortFree>
	}
 800607c:	e00e      	b.n	800609c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006084:	2b02      	cmp	r3, #2
 8006086:	d009      	beq.n	800609c <prvDeleteTCB+0x54>
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e7fe      	b.n	800609a <prvDeleteTCB+0x52>
	}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <prvResetNextTaskUnblockTime+0x38>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <prvResetNextTaskUnblockTime+0x3c>)
 80060b6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060bc:	e008      	b.n	80060d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <prvResetNextTaskUnblockTime+0x38>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	4a04      	ldr	r2, [pc, #16]	; (80060e0 <prvResetNextTaskUnblockTime+0x3c>)
 80060ce:	6013      	str	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000b74 	.word	0x20000b74
 80060e0:	20000bdc 	.word	0x20000bdc

080060e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <xTaskGetSchedulerState+0x34>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060f2:	2301      	movs	r3, #1
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	e008      	b.n	800610a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <xTaskGetSchedulerState+0x38>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006100:	2302      	movs	r3, #2
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	e001      	b.n	800610a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800610a:	687b      	ldr	r3, [r7, #4]
	}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	20000bc8 	.word	0x20000bc8
 800611c:	20000be4 	.word	0x20000be4

08006120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d054      	beq.n	80061e0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006136:	4b2d      	ldr	r3, [pc, #180]	; (80061ec <xTaskPriorityDisinherit+0xcc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	d009      	beq.n	8006154 <xTaskPriorityDisinherit+0x34>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e7fe      	b.n	8006152 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <xTaskPriorityDisinherit+0x50>
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	e7fe      	b.n	800616e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	1e5a      	subs	r2, r3, #1
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	429a      	cmp	r2, r3
 8006184:	d02c      	beq.n	80061e0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	2b00      	cmp	r3, #0
 800618c:	d128      	bne.n	80061e0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fca0 	bl	8004ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <xTaskPriorityDisinherit+0xd0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d903      	bls.n	80061c0 <xTaskPriorityDisinherit+0xa0>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <xTaskPriorityDisinherit+0xd0>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <xTaskPriorityDisinherit+0xd4>)
 80061ce:	441a      	add	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe fc21 	bl	8004a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061e0:	697b      	ldr	r3, [r7, #20]
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200006e8 	.word	0x200006e8
 80061f0:	20000bc4 	.word	0x20000bc4
 80061f4:	200006ec 	.word	0x200006ec

080061f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006202:	4b21      	ldr	r3, [pc, #132]	; (8006288 <prvAddCurrentTaskToDelayedList+0x90>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006208:	4b20      	ldr	r3, [pc, #128]	; (800628c <prvAddCurrentTaskToDelayedList+0x94>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3304      	adds	r3, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fc62 	bl	8004ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d10a      	bne.n	8006232 <prvAddCurrentTaskToDelayedList+0x3a>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006222:	4b1a      	ldr	r3, [pc, #104]	; (800628c <prvAddCurrentTaskToDelayedList+0x94>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4819      	ldr	r0, [pc, #100]	; (8006290 <prvAddCurrentTaskToDelayedList+0x98>)
 800622c:	f7fe fbf7 	bl	8004a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006230:	e026      	b.n	8006280 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800623a:	4b14      	ldr	r3, [pc, #80]	; (800628c <prvAddCurrentTaskToDelayedList+0x94>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	429a      	cmp	r2, r3
 8006248:	d209      	bcs.n	800625e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <prvAddCurrentTaskToDelayedList+0x9c>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b0f      	ldr	r3, [pc, #60]	; (800628c <prvAddCurrentTaskToDelayedList+0x94>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7fe fc05 	bl	8004a66 <vListInsert>
}
 800625c:	e010      	b.n	8006280 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <prvAddCurrentTaskToDelayedList+0x94>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3304      	adds	r3, #4
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f7fe fbfb 	bl	8004a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	429a      	cmp	r2, r3
 8006278:	d202      	bcs.n	8006280 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800627a:	4a08      	ldr	r2, [pc, #32]	; (800629c <prvAddCurrentTaskToDelayedList+0xa4>)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6013      	str	r3, [r2, #0]
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000bc0 	.word	0x20000bc0
 800628c:	200006e8 	.word	0x200006e8
 8006290:	20000ba8 	.word	0x20000ba8
 8006294:	20000b78 	.word	0x20000b78
 8006298:	20000b74 	.word	0x20000b74
 800629c:	20000bdc 	.word	0x20000bdc

080062a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062aa:	f000 faff 	bl	80068ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062ae:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <xTimerCreateTimerTask+0x80>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d021      	beq.n	80062fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062be:	1d3a      	adds	r2, r7, #4
 80062c0:	f107 0108 	add.w	r1, r7, #8
 80062c4:	f107 030c 	add.w	r3, r7, #12
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fb61 	bl	8004990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	9202      	str	r2, [sp, #8]
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	2302      	movs	r3, #2
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2300      	movs	r3, #0
 80062de:	460a      	mov	r2, r1
 80062e0:	4910      	ldr	r1, [pc, #64]	; (8006324 <xTimerCreateTimerTask+0x84>)
 80062e2:	4811      	ldr	r0, [pc, #68]	; (8006328 <xTimerCreateTimerTask+0x88>)
 80062e4:	f7ff f8f6 	bl	80054d4 <xTaskCreateStatic>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b10      	ldr	r3, [pc, #64]	; (800632c <xTimerCreateTimerTask+0x8c>)
 80062ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ee:	4b0f      	ldr	r3, [pc, #60]	; (800632c <xTimerCreateTimerTask+0x8c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062f6:	2301      	movs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <xTimerCreateTimerTask+0x74>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	e7fe      	b.n	8006312 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006314:	697b      	ldr	r3, [r7, #20]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000c18 	.word	0x20000c18
 8006324:	0800720c 	.word	0x0800720c
 8006328:	08006461 	.word	0x08006461
 800632c:	20000c1c 	.word	0x20000c1c

08006330 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <xTimerGenericCommand+0x2c>
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	623b      	str	r3, [r7, #32]
 800635a:	e7fe      	b.n	800635a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <xTimerGenericCommand+0x94>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02a      	beq.n	80063ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b05      	cmp	r3, #5
 8006374:	dc18      	bgt.n	80063a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006376:	f7ff feb5 	bl	80060e4 <xTaskGetSchedulerState>
 800637a:	4603      	mov	r3, r0
 800637c:	2b02      	cmp	r3, #2
 800637e:	d109      	bne.n	8006394 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006380:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <xTimerGenericCommand+0x94>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	f107 0110 	add.w	r1, r7, #16
 8006388:	2300      	movs	r3, #0
 800638a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638c:	f7fe fccc 	bl	8004d28 <xQueueGenericSend>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24
 8006392:	e012      	b.n	80063ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <xTimerGenericCommand+0x94>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	f107 0110 	add.w	r1, r7, #16
 800639c:	2300      	movs	r3, #0
 800639e:	2200      	movs	r2, #0
 80063a0:	f7fe fcc2 	bl	8004d28 <xQueueGenericSend>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24
 80063a6:	e008      	b.n	80063ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <xTimerGenericCommand+0x94>)
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	f107 0110 	add.w	r1, r7, #16
 80063b0:	2300      	movs	r3, #0
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	f7fe fdb2 	bl	8004f1c <xQueueGenericSendFromISR>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3728      	adds	r7, #40	; 0x28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000c18 	.word	0x20000c18

080063c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d2:	4b22      	ldr	r3, [pc, #136]	; (800645c <prvProcessExpiredTimer+0x94>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fb79 	bl	8004ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d021      	beq.n	8006438 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	699a      	ldr	r2, [r3, #24]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	18d1      	adds	r1, r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	6978      	ldr	r0, [r7, #20]
 8006402:	f000 f8d1 	bl	80065a8 <prvInsertTimerInActiveList>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800640c:	2300      	movs	r3, #0
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	2100      	movs	r1, #0
 8006416:	6978      	ldr	r0, [r7, #20]
 8006418:	f7ff ff8a 	bl	8006330 <xTimerGenericCommand>
 800641c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d112      	bne.n	800644a <prvProcessExpiredTimer+0x82>
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e7fe      	b.n	8006436 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	6978      	ldr	r0, [r7, #20]
 8006450:	4798      	blx	r3
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000c10 	.word	0x20000c10

08006460 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006468:	f107 0308 	add.w	r3, r7, #8
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f857 	bl	8006520 <prvGetNextExpireTime>
 8006472:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4619      	mov	r1, r3
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f803 	bl	8006484 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800647e:	f000 f8d5 	bl	800662c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006482:	e7f1      	b.n	8006468 <prvTimerTask+0x8>

08006484 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800648e:	f7ff fa57 	bl	8005940 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f866 	bl	8006568 <prvSampleTimeNow>
 800649c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d130      	bne.n	8006506 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <prvProcessTimerOrBlockTask+0x3c>
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d806      	bhi.n	80064c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064b2:	f7ff fa53 	bl	800595c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff85 	bl	80063c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064be:	e024      	b.n	800650a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <prvProcessTimerOrBlockTask+0x90>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <prvProcessTimerOrBlockTask+0x50>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <prvProcessTimerOrBlockTask+0x52>
 80064d4:	2300      	movs	r3, #0
 80064d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <prvProcessTimerOrBlockTask+0x94>)
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	4619      	mov	r1, r3
 80064e6:	f7fe ffc1 	bl	800546c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064ea:	f7ff fa37 	bl	800595c <xTaskResumeAll>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <prvProcessTimerOrBlockTask+0x98>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
}
 8006504:	e001      	b.n	800650a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006506:	f7ff fa29 	bl	800595c <xTaskResumeAll>
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000c14 	.word	0x20000c14
 8006518:	20000c18 	.word	0x20000c18
 800651c:	e000ed04 	.word	0xe000ed04

08006520 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <prvGetNextExpireTime+0x44>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <prvGetNextExpireTime+0x16>
 8006532:	2201      	movs	r2, #1
 8006534:	e000      	b.n	8006538 <prvGetNextExpireTime+0x18>
 8006536:	2200      	movs	r2, #0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006544:	4b07      	ldr	r3, [pc, #28]	; (8006564 <prvGetNextExpireTime+0x44>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e001      	b.n	8006554 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006554:	68fb      	ldr	r3, [r7, #12]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000c10 	.word	0x20000c10

08006568 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006570:	f7ff fa90 	bl	8005a94 <xTaskGetTickCount>
 8006574:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <prvSampleTimeNow+0x3c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	429a      	cmp	r2, r3
 800657e:	d205      	bcs.n	800658c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006580:	f000 f930 	bl	80067e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	e002      	b.n	8006592 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006592:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <prvSampleTimeNow+0x3c>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006598:	68fb      	ldr	r3, [r7, #12]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000c20 	.word	0x20000c20

080065a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d812      	bhi.n	80065f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e01b      	b.n	800661a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <prvInsertTimerInActiveList+0x7c>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4619      	mov	r1, r3
 80065ec:	4610      	mov	r0, r2
 80065ee:	f7fe fa3a 	bl	8004a66 <vListInsert>
 80065f2:	e012      	b.n	800661a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d206      	bcs.n	800660a <prvInsertTimerInActiveList+0x62>
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e007      	b.n	800661a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <prvInsertTimerInActiveList+0x80>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7fe fa26 	bl	8004a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800661a:	697b      	ldr	r3, [r7, #20]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000c14 	.word	0x20000c14
 8006628:	20000c10 	.word	0x20000c10

0800662c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006632:	e0c6      	b.n	80067c2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	da17      	bge.n	800666a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	3304      	adds	r3, #4
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <prvProcessReceivedCommands+0x2e>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e7fe      	b.n	8006658 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006660:	6850      	ldr	r0, [r2, #4]
 8006662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006664:	6892      	ldr	r2, [r2, #8]
 8006666:	4611      	mov	r1, r2
 8006668:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f2c0 80a7 	blt.w	80067c0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	3304      	adds	r3, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fa28 	bl	8004ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006688:	463b      	mov	r3, r7
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff ff6c 	bl	8006568 <prvSampleTimeNow>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b09      	cmp	r3, #9
 8006696:	f200 8094 	bhi.w	80067c2 <prvProcessReceivedCommands+0x196>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <prvProcessReceivedCommands+0x74>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066c9 	.word	0x080066c9
 80066ac:	0800673b 	.word	0x0800673b
 80066b0:	0800674f 	.word	0x0800674f
 80066b4:	08006797 	.word	0x08006797
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066c9 	.word	0x080066c9
 80066c0:	0800673b 	.word	0x0800673b
 80066c4:	0800674f 	.word	0x0800674f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	18d1      	adds	r1, r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e8:	f7ff ff5e 	bl	80065a8 <prvInsertTimerInActiveList>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d067      	beq.n	80067c2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d05c      	beq.n	80067c2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	441a      	add	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	2100      	movs	r1, #0
 8006718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671a:	f7ff fe09 	bl	8006330 <xTimerGenericCommand>
 800671e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d14d      	bne.n	80067c2 <prvProcessReceivedCommands+0x196>
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e7fe      	b.n	8006738 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800674c:	e039      	b.n	80067c2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006754:	f043 0301 	orr.w	r3, r3, #1
 8006758:	b2da      	uxtb	r2, r3
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <prvProcessReceivedCommands+0x156>
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e7fe      	b.n	8006780 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	18d1      	adds	r1, r2, r3
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006790:	f7ff ff0a 	bl	80065a8 <prvInsertTimerInActiveList>
					break;
 8006794:	e015      	b.n	80067c2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80067a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a6:	f000 fbc5 	bl	8006f34 <vPortFree>
 80067aa:	e00a      	b.n	80067c2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067be:	e000      	b.n	80067c2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <prvProcessReceivedCommands+0x1b4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	1d39      	adds	r1, r7, #4
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fc3a 	bl	8005044 <xQueueReceive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f47f af2e 	bne.w	8006634 <prvProcessReceivedCommands+0x8>
	}
}
 80067d8:	bf00      	nop
 80067da:	3730      	adds	r7, #48	; 0x30
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000c18 	.word	0x20000c18

080067e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ea:	e047      	b.n	800687c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ec:	4b2d      	ldr	r3, [pc, #180]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f6:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f967 	bl	8004ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02d      	beq.n	800687c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	d90e      	bls.n	8006850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683e:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fe f90c 	bl	8004a66 <vListInsert>
 800684e:	e015      	b.n	800687c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006850:	2300      	movs	r3, #0
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	2100      	movs	r1, #0
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fd68 	bl	8006330 <xTimerGenericCommand>
 8006860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <prvSwitchTimerLists+0x98>
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	e7fe      	b.n	800687a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1b2      	bne.n	80067ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <prvSwitchTimerLists+0xc4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <prvSwitchTimerLists+0xc0>)
 8006892:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006894:	4a04      	ldr	r2, [pc, #16]	; (80068a8 <prvSwitchTimerLists+0xc4>)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	6013      	str	r3, [r2, #0]
}
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000c10 	.word	0x20000c10
 80068a8:	20000c14 	.word	0x20000c14

080068ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068b2:	f000 f963 	bl	8006b7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d120      	bne.n	8006900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068be:	4814      	ldr	r0, [pc, #80]	; (8006910 <prvCheckForValidListAndQueue+0x64>)
 80068c0:	f7fe f880 	bl	80049c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068c4:	4813      	ldr	r0, [pc, #76]	; (8006914 <prvCheckForValidListAndQueue+0x68>)
 80068c6:	f7fe f87d 	bl	80049c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <prvCheckForValidListAndQueue+0x6c>)
 80068cc:	4a10      	ldr	r2, [pc, #64]	; (8006910 <prvCheckForValidListAndQueue+0x64>)
 80068ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <prvCheckForValidListAndQueue+0x70>)
 80068d2:	4a10      	ldr	r2, [pc, #64]	; (8006914 <prvCheckForValidListAndQueue+0x68>)
 80068d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068d6:	2300      	movs	r3, #0
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <prvCheckForValidListAndQueue+0x74>)
 80068dc:	4a11      	ldr	r2, [pc, #68]	; (8006924 <prvCheckForValidListAndQueue+0x78>)
 80068de:	2110      	movs	r1, #16
 80068e0:	200a      	movs	r0, #10
 80068e2:	f7fe f98b 	bl	8004bfc <xQueueGenericCreateStatic>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <prvCheckForValidListAndQueue+0x60>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	490b      	ldr	r1, [pc, #44]	; (8006928 <prvCheckForValidListAndQueue+0x7c>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fd8e 	bl	800541c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006900:	f000 f96a 	bl	8006bd8 <vPortExitCritical>
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000c18 	.word	0x20000c18
 8006910:	20000be8 	.word	0x20000be8
 8006914:	20000bfc 	.word	0x20000bfc
 8006918:	20000c10 	.word	0x20000c10
 800691c:	20000c14 	.word	0x20000c14
 8006920:	20000cc4 	.word	0x20000cc4
 8006924:	20000c24 	.word	0x20000c24
 8006928:	08007214 	.word	0x08007214

0800692c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b04      	subs	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b04      	subs	r3, #4
 800694a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3b04      	subs	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <pxPortInitialiseStack+0x64>)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b14      	subs	r3, #20
 8006966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b04      	subs	r3, #4
 8006972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f06f 0202 	mvn.w	r2, #2
 800697a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3b20      	subs	r3, #32
 8006980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	08006995 	.word	0x08006995

08006994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <prvTaskExitError+0x50>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a6:	d009      	beq.n	80069bc <prvTaskExitError+0x28>
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e7fe      	b.n	80069ba <prvTaskExitError+0x26>
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069ce:	bf00      	nop
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0fc      	beq.n	80069d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000000c 	.word	0x2000000c
	...

080069f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <pxCurrentTCBConst2>)
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	6808      	ldr	r0, [r1, #0]
 80069f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	f380 8809 	msr	PSP, r0
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8811 	msr	BASEPRI, r0
 8006a0a:	4770      	bx	lr
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst2>:
 8006a10:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a18:	4808      	ldr	r0, [pc, #32]	; (8006a3c <prvPortStartFirstTask+0x24>)
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	6800      	ldr	r0, [r0, #0]
 8006a1e:	f380 8808 	msr	MSP, r0
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8814 	msr	CONTROL, r0
 8006a2a:	b662      	cpsie	i
 8006a2c:	b661      	cpsie	f
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	df00      	svc	0
 8006a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed08 	.word	0xe000ed08

08006a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a46:	4b44      	ldr	r3, [pc, #272]	; (8006b58 <xPortStartScheduler+0x118>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a44      	ldr	r2, [pc, #272]	; (8006b5c <xPortStartScheduler+0x11c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d109      	bne.n	8006a64 <xPortStartScheduler+0x24>
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	e7fe      	b.n	8006a62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a64:	4b3c      	ldr	r3, [pc, #240]	; (8006b58 <xPortStartScheduler+0x118>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a3d      	ldr	r2, [pc, #244]	; (8006b60 <xPortStartScheduler+0x120>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d109      	bne.n	8006a82 <xPortStartScheduler+0x42>
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e7fe      	b.n	8006a80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a82:	4b38      	ldr	r3, [pc, #224]	; (8006b64 <xPortStartScheduler+0x124>)
 8006a84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	4b30      	ldr	r3, [pc, #192]	; (8006b68 <xPortStartScheduler+0x128>)
 8006aa8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aaa:	4b30      	ldr	r3, [pc, #192]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006aac:	2207      	movs	r2, #7
 8006aae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab0:	e009      	b.n	8006ac6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006ab2:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006aba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b80      	cmp	r3, #128	; 0x80
 8006ad0:	d0ef      	beq.n	8006ab2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ad2:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1c3 0307 	rsb	r3, r3, #7
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d009      	beq.n	8006af2 <xPortStartScheduler+0xb2>
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60bb      	str	r3, [r7, #8]
 8006af0:	e7fe      	b.n	8006af0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006af2:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006afa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006afc:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006b06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b10:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <xPortStartScheduler+0x130>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a16      	ldr	r2, [pc, #88]	; (8006b70 <xPortStartScheduler+0x130>)
 8006b16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b1c:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <xPortStartScheduler+0x130>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <xPortStartScheduler+0x130>)
 8006b22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b28:	f000 f8d6 	bl	8006cd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b32:	f000 f8f5 	bl	8006d20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a0f      	ldr	r2, [pc, #60]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b42:	f7ff ff69 	bl	8006a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b46:	f7ff f86d 	bl	8005c24 <vTaskSwitchContext>
	prvTaskExitError();
 8006b4a:	f7ff ff23 	bl	8006994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000ed00 	.word	0xe000ed00
 8006b5c:	410fc271 	.word	0x410fc271
 8006b60:	410fc270 	.word	0x410fc270
 8006b64:	e000e400 	.word	0xe000e400
 8006b68:	20000d14 	.word	0x20000d14
 8006b6c:	20000d18 	.word	0x20000d18
 8006b70:	e000ed20 	.word	0xe000ed20
 8006b74:	2000000c 	.word	0x2000000c
 8006b78:	e000ef34 	.word	0xe000ef34

08006b7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <vPortEnterCritical+0x54>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <vPortEnterCritical+0x54>)
 8006b9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <vPortEnterCritical+0x54>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10e      	bne.n	8006bc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <vPortEnterCritical+0x58>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <vPortEnterCritical+0x48>
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	e7fe      	b.n	8006bc2 <vPortEnterCritical+0x46>
	}
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	2000000c 	.word	0x2000000c
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <vPortExitCritical+0x4c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <vPortExitCritical+0x22>
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	607b      	str	r3, [r7, #4]
 8006bf8:	e7fe      	b.n	8006bf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <vPortExitCritical+0x4c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	4a08      	ldr	r2, [pc, #32]	; (8006c24 <vPortExitCritical+0x4c>)
 8006c02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c04:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <vPortExitCritical+0x4c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <vPortExitCritical+0x3e>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000000c 	.word	0x2000000c
	...

08006c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c30:	f3ef 8009 	mrs	r0, PSP
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <pxCurrentTCBConst>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f01e 0f10 	tst.w	lr, #16
 8006c40:	bf08      	it	eq
 8006c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	6010      	str	r0, [r2, #0]
 8006c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c54:	f380 8811 	msr	BASEPRI, r0
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f7fe ffe0 	bl	8005c24 <vTaskSwitchContext>
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f380 8811 	msr	BASEPRI, r0
 8006c6c:	bc09      	pop	{r0, r3}
 8006c6e:	6819      	ldr	r1, [r3, #0]
 8006c70:	6808      	ldr	r0, [r1, #0]
 8006c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c76:	f01e 0f10 	tst.w	lr, #16
 8006c7a:	bf08      	it	eq
 8006c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c80:	f380 8809 	msr	PSP, r0
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst>:
 8006c90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cb0:	f7fe ff00 	bl	8005ab4 <xTaskIncrementTick>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <SysTick_Handler+0x3c>)
 8006cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <vPortSetupTimerInterrupt+0x34>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortSetupTimerInterrupt+0x38>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <vPortSetupTimerInterrupt+0x3c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <vPortSetupTimerInterrupt+0x40>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	099b      	lsrs	r3, r3, #6
 8006cf4:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <vPortSetupTimerInterrupt+0x44>)
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cfa:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <vPortSetupTimerInterrupt+0x34>)
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	601a      	str	r2, [r3, #0]
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	e000e010 	.word	0xe000e010
 8006d10:	e000e018 	.word	0xe000e018
 8006d14:	20000000 	.word	0x20000000
 8006d18:	10624dd3 	.word	0x10624dd3
 8006d1c:	e000e014 	.word	0xe000e014

08006d20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d30 <vPortEnableVFP+0x10>
 8006d24:	6801      	ldr	r1, [r0, #0]
 8006d26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d2a:	6001      	str	r1, [r0, #0]
 8006d2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d2e:	bf00      	nop
 8006d30:	e000ed88 	.word	0xe000ed88

08006d34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d3a:	f3ef 8305 	mrs	r3, IPSR
 8006d3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b0f      	cmp	r3, #15
 8006d44:	d913      	bls.n	8006d6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d46:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <vPortValidateInterruptPriority+0x6c>)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d50:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <vPortValidateInterruptPriority+0x70>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	7afa      	ldrb	r2, [r7, #11]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d209      	bcs.n	8006d6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	e7fe      	b.n	8006d6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d6e:	4b0e      	ldr	r3, [pc, #56]	; (8006da8 <vPortValidateInterruptPriority+0x74>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <vPortValidateInterruptPriority+0x78>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d909      	bls.n	8006d92 <vPortValidateInterruptPriority+0x5e>
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	e7fe      	b.n	8006d90 <vPortValidateInterruptPriority+0x5c>
	}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	e000e3f0 	.word	0xe000e3f0
 8006da4:	20000d14 	.word	0x20000d14
 8006da8:	e000ed0c 	.word	0xe000ed0c
 8006dac:	20000d18 	.word	0x20000d18

08006db0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dbc:	f7fe fdc0 	bl	8005940 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dc0:	4b57      	ldr	r3, [pc, #348]	; (8006f20 <pvPortMalloc+0x170>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006dc8:	f000 f90c 	bl	8006fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dcc:	4b55      	ldr	r3, [pc, #340]	; (8006f24 <pvPortMalloc+0x174>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 808c 	bne.w	8006ef2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01c      	beq.n	8006e1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006de0:	2208      	movs	r2, #8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d013      	beq.n	8006e1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f023 0307 	bic.w	r3, r3, #7
 8006df8:	3308      	adds	r3, #8
 8006dfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <pvPortMalloc+0x6a>
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e7fe      	b.n	8006e18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d068      	beq.n	8006ef2 <pvPortMalloc+0x142>
 8006e20:	4b41      	ldr	r3, [pc, #260]	; (8006f28 <pvPortMalloc+0x178>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d863      	bhi.n	8006ef2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e2a:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <pvPortMalloc+0x17c>)
 8006e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <pvPortMalloc+0x17c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e34:	e004      	b.n	8006e40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d903      	bls.n	8006e52 <pvPortMalloc+0xa2>
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f1      	bne.n	8006e36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e52:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <pvPortMalloc+0x170>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d04a      	beq.n	8006ef2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	4413      	add	r3, r2
 8006e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	1ad2      	subs	r2, r2, r3
 8006e76:	2308      	movs	r3, #8
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d91e      	bls.n	8006ebc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d009      	beq.n	8006ea4 <pvPortMalloc+0xf4>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	e7fe      	b.n	8006ea2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eb6:	69b8      	ldr	r0, [r7, #24]
 8006eb8:	f000 f8f6 	bl	80070a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <pvPortMalloc+0x178>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <pvPortMalloc+0x178>)
 8006ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eca:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <pvPortMalloc+0x178>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <pvPortMalloc+0x180>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d203      	bcs.n	8006ede <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <pvPortMalloc+0x178>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a15      	ldr	r2, [pc, #84]	; (8006f30 <pvPortMalloc+0x180>)
 8006edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <pvPortMalloc+0x174>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ef2:	f7fe fd33 	bl	800595c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <pvPortMalloc+0x164>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e7fe      	b.n	8006f12 <pvPortMalloc+0x162>
	return pvReturn;
 8006f14:	69fb      	ldr	r3, [r7, #28]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200018dc 	.word	0x200018dc
 8006f24:	200018e8 	.word	0x200018e8
 8006f28:	200018e0 	.word	0x200018e0
 8006f2c:	200018d4 	.word	0x200018d4
 8006f30:	200018e4 	.word	0x200018e4

08006f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d046      	beq.n	8006fd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f46:	2308      	movs	r3, #8
 8006f48:	425b      	negs	r3, r3
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <vPortFree+0xa8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <vPortFree+0x42>
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e7fe      	b.n	8006f74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <vPortFree+0x5e>
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	e7fe      	b.n	8006f90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <vPortFree+0xa8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d019      	beq.n	8006fd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d115      	bne.n	8006fd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <vPortFree+0xa8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	401a      	ands	r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fb8:	f7fe fcc2 	bl	8005940 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <vPortFree+0xac>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <vPortFree+0xac>)
 8006fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fca:	6938      	ldr	r0, [r7, #16]
 8006fcc:	f000 f86c 	bl	80070a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fd0:	f7fe fcc4 	bl	800595c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fd4:	bf00      	nop
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200018e8 	.word	0x200018e8
 8006fe0:	200018e0 	.word	0x200018e0

08006fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ff0:	4b27      	ldr	r3, [pc, #156]	; (8007090 <prvHeapInit+0xac>)
 8006ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3307      	adds	r3, #7
 8007002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0307 	bic.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <prvHeapInit+0xac>)
 8007014:	4413      	add	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <prvHeapInit+0xb0>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007022:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <prvHeapInit+0xb0>)
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	4413      	add	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007030:	2208      	movs	r2, #8
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0307 	bic.w	r3, r3, #7
 800703e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a15      	ldr	r2, [pc, #84]	; (8007098 <prvHeapInit+0xb4>)
 8007044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <prvHeapInit+0xb4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800704e:	4b12      	ldr	r3, [pc, #72]	; (8007098 <prvHeapInit+0xb4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <prvHeapInit+0xb4>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <prvHeapInit+0xb8>)
 8007072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <prvHeapInit+0xbc>)
 800707a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <prvHeapInit+0xc0>)
 800707e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000d1c 	.word	0x20000d1c
 8007094:	200018d4 	.word	0x200018d4
 8007098:	200018dc 	.word	0x200018dc
 800709c:	200018e4 	.word	0x200018e4
 80070a0:	200018e0 	.word	0x200018e0
 80070a4:	200018e8 	.word	0x200018e8

080070a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070b0:	4b28      	ldr	r3, [pc, #160]	; (8007154 <prvInsertBlockIntoFreeList+0xac>)
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e002      	b.n	80070bc <prvInsertBlockIntoFreeList+0x14>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d8f7      	bhi.n	80070b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4413      	add	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d108      	bne.n	80070ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	441a      	add	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	441a      	add	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d118      	bne.n	8007130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <prvInsertBlockIntoFreeList+0xb0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d00d      	beq.n	8007126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e008      	b.n	8007138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvInsertBlockIntoFreeList+0xb0>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e003      	b.n	8007138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d002      	beq.n	8007146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007146:	bf00      	nop
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	200018d4 	.word	0x200018d4
 8007158:	200018dc 	.word	0x200018dc

0800715c <__libc_init_array>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	4e0d      	ldr	r6, [pc, #52]	; (8007194 <__libc_init_array+0x38>)
 8007160:	4c0d      	ldr	r4, [pc, #52]	; (8007198 <__libc_init_array+0x3c>)
 8007162:	1ba4      	subs	r4, r4, r6
 8007164:	10a4      	asrs	r4, r4, #2
 8007166:	2500      	movs	r5, #0
 8007168:	42a5      	cmp	r5, r4
 800716a:	d109      	bne.n	8007180 <__libc_init_array+0x24>
 800716c:	4e0b      	ldr	r6, [pc, #44]	; (800719c <__libc_init_array+0x40>)
 800716e:	4c0c      	ldr	r4, [pc, #48]	; (80071a0 <__libc_init_array+0x44>)
 8007170:	f000 f82c 	bl	80071cc <_init>
 8007174:	1ba4      	subs	r4, r4, r6
 8007176:	10a4      	asrs	r4, r4, #2
 8007178:	2500      	movs	r5, #0
 800717a:	42a5      	cmp	r5, r4
 800717c:	d105      	bne.n	800718a <__libc_init_array+0x2e>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007184:	4798      	blx	r3
 8007186:	3501      	adds	r5, #1
 8007188:	e7ee      	b.n	8007168 <__libc_init_array+0xc>
 800718a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800718e:	4798      	blx	r3
 8007190:	3501      	adds	r5, #1
 8007192:	e7f2      	b.n	800717a <__libc_init_array+0x1e>
 8007194:	080072cc 	.word	0x080072cc
 8007198:	080072cc 	.word	0x080072cc
 800719c:	080072cc 	.word	0x080072cc
 80071a0:	080072d0 	.word	0x080072d0

080071a4 <memcpy>:
 80071a4:	b510      	push	{r4, lr}
 80071a6:	1e43      	subs	r3, r0, #1
 80071a8:	440a      	add	r2, r1
 80071aa:	4291      	cmp	r1, r2
 80071ac:	d100      	bne.n	80071b0 <memcpy+0xc>
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b8:	e7f7      	b.n	80071aa <memcpy+0x6>

080071ba <memset>:
 80071ba:	4402      	add	r2, r0
 80071bc:	4603      	mov	r3, r0
 80071be:	4293      	cmp	r3, r2
 80071c0:	d100      	bne.n	80071c4 <memset+0xa>
 80071c2:	4770      	bx	lr
 80071c4:	f803 1b01 	strb.w	r1, [r3], #1
 80071c8:	e7f9      	b.n	80071be <memset+0x4>
	...

080071cc <_init>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr

080071d8 <_fini>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr
